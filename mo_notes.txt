# This file is just to keep track of changes and TODOs for MO

(TODO)
Make sure to change the test cases (or perhaps add a test case) so that
we are sure that we load a resource from a compressed jar and an uncompressed
jar file in the test cases.


(TODO)
From looking at the rules that do the purify build it seems that
they put things into the src directory which would break if using
--srcdir on a read only mounted filesystem (not too important).



(TODO)
The native implementation of Interp.getCommand()
was never finished for Tcl Blend.


(TODO)
Look into the way that Java objects are retuned using the java::bind
command. Is it correct when threads block?








(PROBLEM)
In looking at the Mac file name problem it seems the following files
use platform specific code.
FileCmd.java
FileUtil.java
GlobCmd.java

Need to test used of ":" instead of "." for current directory as
used in relative names for files. ( :/dir vs ./dir ??? )

src/tcljava/tcl/lang/JavaLoadCmd.java:15: import java.io.File;
src/tests/tcljava/tcl/lang/AdaptorGenTest.java:88:
    FileOutputStream out = new FileOutputStream(fileName);
src/tests/jacl/tcl/lang/TesttranslatefilenameCmd.java:55:
   String result = FileUtil.translateFileName(interp, argv[1].toString());
src/misc/empty/tcl/lang/Interp.java:20: File getWorkingDir()
src/misc/empty/tcl/lang/Interp.java:120: public void evalFile(String s) throws TclException {}
src/jacl/tcl/lang/FileChannel.java:432:     private int getNextFileNum(Interp interp) {
src/jacl/tcl/lang/FileCmd.java:1195: } // end FileCmd class/tmp/mo/tcljava1.1a1/src/jacl/tcl/lang/FileUtil.java:2:  * FileUtil.java --
src/jacl/tcl/lang/GlobCmd.java:20: import java.io.File;
src/jacl/tcl/lang/GlobCmd.java:938:     return FileUtil.getNewFileObj(interp, fileName);
src/jacl/tcl/lang/InfoCmd.java:340:                interp.setResult(TclString.newInstance(interp.scriptFile));
src/jacl/tcl/lang/Interp.java:115: private File workingDir;/tmp/mo/tcljava1.1a1/src/jacl/tcl/lang/Interp.java:2659: String getScriptFile()
src/jacl/tcl/lang/OpenCmd.java:65:                     File f = FileUtil.getNewFileObj(interp,
src/jacl/tcl/lang/ProcCmd.java:37:                 argv[2], argv[3], interp.getScriptFile(),
src/jacl/tcl/lang/Procedure.java:53: String srcFileName;
src/jacl/tcl/lang/PwdCmd.java:64:      * Java File Object methods use backslashes.  Convert them to forward
src/jacl/tcl/lang/Shell.java:110:      interp.evalFile(fileName);
src/jacl/tcl/lang/SourceCmd.java:75:           interp.evalFile(fileName);
src/tclblend/tcl/lang/Interp.java:821: evalFile(













(JIT PROBLEM)

I have been getting some really funky results from the test cases
under JDK1.2. If I bring up a blend shell then do this.

cd ../../tests
source all

It will run the test with no problems. But if I do this

package require java
cd ../../tests
source all

It crashes. This is really strange. It gets even more strange
because it even seems to be happining under 1.1.6. 

After some more messing around it looks like this still has
something to do with the jit compiler bug I saw earlier.

tcljava/JavaLoadCmd.test
Segmentation Fault - core dumped

But it seems like the non native threads stuff is getting used
because this bug only shows up with green threads.

setenv JAVA_COMPILER sunwjit

I guess the only way to aviod this is to not use the compiler.
But why does it only happen if you do the "package req java" first???

It must have something to do with loading libtclblend.so out of the current directory.







(TODO)
Do we need to use SHLIB_PATH instead of LD_LIBRARY path
in the Makefile when building and testing on HPUX?

(TODO)
Why can't the 1.1 vm use the tcl_blend init thing like the
1.2 vm. Is there any reason this option can only be used in
a 1.2 JVM?

(TODO)
the gluepkg demo has some strange code in it for AWT event
management. This code needs to be updated to use the
Notifier class and the java::event system.

(TODO)
the package test cases (in tcl/pkg.test) really need to be fixed
so that they are not destructive. Perhaps the packages could be
stored at the top of the file and then restored when done.


(TODO)
Something needs to be done during the install in case the configure
script was not able to find a working tclsh8.0 installed on the
system. Perhaps if one can not be found on the PATH then the
"make install" will warn the person before testing with the
Test.tcl file. In fact perhaps there should a "test_install"
rule which runs the post install test so that folks can change
that and rerun. Another possibility is to warn and tell them that
the may need to go back and run "make install" in the Tcl source
distro if they compiled with Tcl Blend. Jacl would not be affected.



(TODO)
ParseResult object may also need to be cached by the ParseAdaptor
as they seem to be created frequently by the ParseAdaptor but they
do not really do anything except return both a TclObject and an index.
This also might need to be done in the parser itself.


It might also help to optimize the parse part so that it will not
invoke the full parser when parsing a "" (the second " right to
the left of the first " can be checked with out a lot of work)

Should the member variables in ExprValue be final? Is there any
case where user code should be able to change the types?



(TODO)
Is there ever a case where the parse adaptors will be called with
the length of a string that is less then the actual length of the
string object. Currently the code assumes that two are the same
but if they were different there would be big problems. Is there
even a good reason for this? It seems like a waste.



(TODO)
There is a comment inside Parser.java about a nest level issue.
Check into this to see if it needs to be changed. (line 885)
There is also a comment on line 908 about removing some test
code for the noEval checks once the "new parser" is done.
Same for line 1052 in Parser.java. Also look at Interp.java
and Expression.java for problems related to this.



(TODO)
check all places where strtoul or other functions like it are
used. They need to check the returned errorno value to make sure
things worked properly. In fact it might be better to have bad
things like number format error use an exception rather then a
multi return value like they are currently using (kind of a waste).
Another possible approach would be to use a errno variable on
the interp itself but this is also kind of a C kludge.



(TODO)
There are some comments in Expression.java that say the expr
with trailing spces behavior is what was wanted. Is this a 7.6
thing or is it new to 8.0. If trailing spaces is bad then why
does tcl allow it?


(TODO)
Some checks are made in Util.java for the tcl.regex.Oro classes.
These should be removed if possible.


(TODO)
Util.java says \v can not be used in java. Do they mean \u for
unicode stuff?


(TODO)
The string trimleft and trim right code could be speeded up by using
the labeled breaks in java. Right now they use a var in the loop.
They could also use a second array for searching (mem cost).



(TODO)
The get boolean code seem to indicate that sub string matches
for boolean conditions are allowed "tru" == "true". Does this
jive with tclsh? Also how do we use true in a expr condition?
expr {"true" == 1} does not seem to work.


(TODO)
The stuff in tests/jacl/FileCmd.test really should be from the 8.0
tests if they are not already from 8.0. (cmdsAH.test I think).



(TODO)
It looks like the method Interp.evalFile(String) has not been
implemented in tclblend.






(TODO)
inprogress tests that still need work:

ExprCmd.test has some problems under jacl
GlobCmd.test requires testsetplatform under tclblend
Util.test has some problems under jacl
CdCmd.test has some problems under Tcl Blend with Tcl 8.0.x
ExecCmd.test has some problems under windows 95
AfterCmd.test has some problems under Tcl Blend
BgErrorMgr.test has some problems under Tcl Blend
EventAdaptor.test has some problems under Tcl Blend
UplevelCmd.test has some problems under Tcl Blend





(TODO)
A Possible "Feature" of the cast command could be to cast
a argument to the type of a reflected class object passed
in as the first arguemnt.

# methods returns a java.lang.Class object
set class [java::call AClass getClassObj]
set obj [java::new Sring "hi"]

# cast by name of by reflected class passed in
set cast_to [java::cast $class $obj]

This would make it a lot easier to an object up
java::cast [$obj getClass] $obj  (new)
vs
java::cast [[$obj getClass] getName] $obj (old)





(TODO)
Some of the event test cases will make Tcl Blend crash
on a redhat 5.2 linux box (kernel 2.1.131). We need to
figure why these are blocking and how they can be fixed.


(TODO)
take a look at the exception handling code in tcl.lang.Shell
again. Does it correctly handle break or continue outside
of a loop? Is this really that important?


(TODO)
The method names in jacl/tcl/lang/Channel.java
are really misleading. They seem to be the opposite
of java naming conventions.



(TODO)
Double check to make sure that jikes returns a bad status
when it can not find classes.zip. I ran into a script where
it seems like jikes might not have been returning an error.


(TODO)
in the "exact" method match is there any way someone could create
an "ambiguous" signature with a full method signature??



(TODO)
need to add test cases to the AmbiguousSignature tests so that they
also test out Constructor signatures as well as method signatures!



(TODO)
need to add the public methods evalFile() and evalURL() to
Tcl Blend's Interp.java file.



(TODO)
Check to see what would happen if someone attempted to invoke
a reflection method on a Java array object.


(TODO)
Find out if the subst engine does unicode escapes. I saw
some code in Parser.backslash that seems to do it. Is this
tested anywhere?


(TODO)
Add some debug code to the parser objects to keep track of
the length argument given to scripts. If things like eval2()
are not called with the correct lengths then they break.


(TODO)
Why arent all of the setVar() methods in the interp class
public. Some of them are just easy ways to call the public
methods so it seems like a waste to not make them public.
One place that really hurts is the fact that

setVar(String arrname, String arrindex, String value)

is not public and only

setVar(String arrname, String arrindex, TclObject value)

is public so any code that calls setVar needs to do a stupid
TclString.newInstance(str) call.


Is TclString not supposed to be in the TclBlend package?
Currently TclString is part of the tcljava set of classes.




(TODO)
Check on OSF1 target that I got from Christopher's build.
Does it need a LD_PRELOAD? Does it even work right now?




(TODO)
jaclsh.bat really should be launched with another shell
so that the ugly variable stuff does not get in the way.
Of course we would have to worry about the NT vs 95 stuff.



(TODO)
There is a really ugly problem with the way that the auto_path
is set in the makefiles that can make the tests fail under
windows when another version of tclblend is installed. The
auto path should not be appended to it should be prepended to.




(INFO)
looks like Sun is using Jacl in a product called "Embeded Server".
http://www.sun.com/software/embeddedserver/techinfo/relnotes.html#300


(TODO)
Fix a problem with the configure script. The JAVA_VERISON is not
set in Jacl and there is a spot in the -native test that it is used.


(TODO)
The test cases have some serious problems in how the attempt to
figure out what platform jacl is running under. These need to
be fixed.

(TODO)
Check that perms on open command are correct in jacl. Is "rw" a
valid mode? (set fd [open tmpf rw])


(TODO)
How does the CommandWithDispose interface work when there is
no way to find out the name of the command, For instance if
a command is renamed how will an extension know the new name?
This problem shows up in the reflect object class because
there is no way to know the current name of the command when
we want to delete it from the interp.


(TODO)
figure out why reflected null objects do not come up as typed
in an automated signature. AutoSig 4.5 is a good example of this.
It only happend when java::autolock is on. Later, it looks like
the eval command is to blame as it converts in the concat.



(TODO)

Can the auto name stuff be fixed for null??

# This is like eval except that it does not convert java variables
# into strings so it will keep java references alive unlike eval.

proc java::seval { args } {
  set num 0
  set cmd {}
  set copies {}

  foreach arg $args {
    if {! [catch {java::isnull $arg} err]} {
          java::lock $arg
    }

    foreach subarg $arg {
      incr num

      if {! [catch {java::isnull $subarg} err]} {
          java::lock $subarg
      }

      set $num $subarg
      #puts "$num is [set $num]"
      append cmd "\$[set num] "
    }
  }
  #puts "cmd is \{$cmd\}"
  eval $cmd
}




(TODO)

The "compressed jar hack" issue needs to be examined again. It looks
like Sun does not want to change the 1.2 way of doing things and I
am not sure if it is possible to find out the uncompressed size
of an entry from the header info. Perhaps this is why the Sun JVM
imple wants the size entry for uncompressed files before writing.



(TODO)

Add test cases to make sure that basic types are getting passed
using reflection without loss. The best way to test this is to
use a MAX_VALUE and MIN_VALUE argument for each class and then
call a Java method that takes the MAX and MIN to make sure that
values are getting passed correctly. Also things like infinity
for Double calculation and the like need to be done.




(TODO)

The different Channel implementations need to have a single
implementation that implements the Channel interface and
does the reads and checks for EOF and such. These are error
prone and should not be done for every implementation.


(TODO)
It seems like the error message
"cannot load new class into java or tcl package" would be alot
more helpful if it included the name of the class that could
not be loaded. Perhaps

cannot load new class "java.lang.boolean" ...

would work better.




(TODO)
The Tcl Blend demos should not include the pyramid demo because it will
only work with Jacl.


(TODO)
There seems to be a problem running gridDemo.tcl in Tcl Blend, it gives
this error when run.

tcljava/JavaInvoke.test
invoke-10.1.25

      1 {tcl.lang.TclException: expected floating-point number but got
    "0.0"}

      unknown floating-point error, errno = 84




(TODO)

There is a problem with renaming java object instance commands and
then using those renamed command names in other java methods. Would
it be a good solution to also check for a command that has an
internal rep of a ReflectObject inside ReflectObject.convert().

>      % set o [createRect 0 0 10 10]
>      java0xc7
>      % java::info methods java0xc7
>      {equals java.lang.Object} ......
>      % rename java0xc7 poly1
>      % java::info methods poly1
>      java::info: unknown java class or object "poly1"
>      % java::info methods java0xc7
>      {equals java.lang.Object} ......





(TODO)

There seems to be a big performance drop in Jacl 1.2. Users report
a slowdown of about 4x. Run some tests to see what is going on here.
Could this be related to the expr problems?

(test run on solaris 2.5.1, native threads, 1.1a1 3.4sec, 1.2.2 13 sec)


(TODO)

Check into problem with exec messages getting tossed out by Jacl
exec command. Could adding the message to the error help?


(TODO)
Look into a class file flushing system so that classes that
are not being used can be removed from the cache at runtime.






(Look at this test case again and compare tclblend to jacl)

Which is correct??

inprogress/ExprCmd.test

==== ExprCmd-1.19 cmdProc
==== Contents of test case:

    list [catch {expr {0 == "[set i 0]}} err] $err

==== Result was:
1 {missing close-bracket}
---- Result should have been:
1 {missing "}
---- ExprCmd-1.19 FAILED



(REMOVE FROM CVS)

src/jacl 800K
tcljava/tests/jacl/FileCmd.test,v      133 k
tcljava/unix/configure,v            120 k



(TODO)
Would it be possible to make the check for Tcl/unix/tclConfig.sh
happen a lot sooner in the configure script. It does all the java
checkes and then does the Tcl checks. This can be a pain sometimes.
If it would just check to see if the directory for Tcl was valid
that would be enough!


(TODO)
Tcl 8.1 seems to have added a new "package present" command. This should
also be added to the Jacl implementation when I get some time.
