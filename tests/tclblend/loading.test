# This file tests loading of Tcl Blend into both Tcl and Java
#
# Copyright (c) 2002 by Mo DeJong.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: loading.test,v 1.2 2002/07/22 09:27:20 mdejong Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

test loading-1.1 {load into Tcl} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
unset env(TCLBLEND_TRACE)
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache}

test loading-1.2 {load into Tcl then exit} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
FreeJavaCache
Destroyed JVM}

test loading-1.3 {load into two different
        interpreters in the main thread} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
interp create i1
i1 eval {
  package require java
}
interp create i2
i2 eval {
  package require java
}
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
Entrypoint Tclblend_Init
TSD already initialized
FreeJavaCache
Destroyed JVM}

test loading-1.4 {load into two different
        interpreters in the main thread, then delete
        the interpreters and exit the main thread} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
interp create i1
i1 eval {
  package require java
}
interp create i2
i2 eval {
  package require java
}
interp delete i1
interp delete i2
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
Entrypoint Tclblend_Init
TSD already initialized
JavaInterpDeleted
JavaInterpDeleted
FreeJavaCache
Destroyed JVM}

test loading-2.1 {load into two Tcl threads} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
package require Thread
set tid [thread::create]
thread::send $tid {package require java}
unset env(TCLBLEND_TRACE)
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
Entrypoint Tclblend_Init
Attached to JVM
Initialized Java Cache}

test loading-2.2 {load into two threads, exit
        from second thread and then from main thread} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
package require Thread
set tid [thread::create]
thread::preserve $tid
thread::send $tid {package require java}
thread::release -wait $tid
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
Entrypoint Tclblend_Init
Attached to JVM
Initialized Java Cache
JavaInterpDeleted
FreeJavaCache
DetachTclThread
FreeJavaCache
Destroyed JVM}

test loading-2.3 {load into two threads then exit
        to see if thread exit handlers for other thread are called} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
package require Thread
set tid [thread::create]
thread::send $tid {package require java}
# Give other thread some time to run
after 2000
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
Entrypoint Tclblend_Init
Attached to JVM
Initialized Java Cache
FreeJavaCache
DetachTclThread
FreeJavaCache
Destroyed JVM}


test loading-3.1 {load into Java, fails if TSD not cleaned up from Java} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaLoadTclBlend \
        >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint JavaSetupJava
Initialized Java Cache
FreeJavaCache}

test loading-3.2 {load into a Java, 2 interps} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaLoadTclBlend2 \
        >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint JavaSetupJava
Initialized Java Cache
Entrypoint JavaSetupJava
TSD already initialized
FreeJavaCache}

test loading-3.3 {load into Java, exit from Tcl} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set script {exit 0}
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaEval $script \
        >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint JavaSetupJava
Initialized Java Cache
FreeJavaCache}

test loading-3.4 {load into two Java threads} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaThreadsLoadTclBlend \
        >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint JavaSetupJava
Initialized Java Cache
FreeJavaCache
Entrypoint JavaSetupJava
Initialized Java Cache
FreeJavaCache}


test loading-4.1 {load into Java then load java package from Tcl,
        this should not invoke Tclblend_Init since java pkg is already loaded} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set script {
package require java
exit 0
}
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaEval $script \
        >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint JavaSetupJava
Initialized Java Cache
FreeJavaCache}

test loading-4.2 {load into Java then load java package
        into another interp in the same thread} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set script {
interp create i1
i1 eval {
    package require java
}
exit 0
}
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaEval $script \
        >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint JavaSetupJava
Initialized Java Cache
Entrypoint Tclblend_Init
TSD already initialized
FreeJavaCache}


test loading-5.1 {load into Tcl then load into an interpreter in Java} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
if {[java::call tests.JavaEval eval\
        "expr {1 + 2}"] != 3} {
    error "should be 3"
}
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
Entrypoint JavaSetupJava
TSD already initialized
FreeJavaCache
Destroyed JVM}

test loading-5.2 {load into Tcl then load a Java class in the same thread,
        pass the existing Tcl interpreter to this Java class and eval a cmd} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
if {[java::call tests.JavaEval eval\
        [java::getinterp] "expr {1 + 2}"] != 3} {
    error "should be 3"
}
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
FreeJavaCache
Destroyed JVM}

test loading-5.3 {load into Tcl then load into another Java thread} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set f [makeFile {
package require java
set loader [java::new tests.JavaThreadLoadTclBlend]
set thr [java::new Thread $loader]
$thr start
after 2000
exit 0
} loading.tcl]
    exec $tcltest::tcltest $f >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint Tclblend_Init
Created JVM
Initialized Java Cache
Entrypoint JavaSetupJava
Initialized Java Cache
FreeJavaCache
FreeJavaCache
Destroyed JVM}


test loading-6.1 {load into Java, then load Thread package. If this
        fails it is because of a a bug in the Threads package since
        it references a global variable inside Tcl} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set script {
package require Thread
exit 0
}
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaEval $script \
        >@stdout 2>@stderr
    viewFile tclblend.trace
} {Entrypoint JavaSetupJava
Initialized Java Cache
FreeJavaCache}

test loading-6.2 {load into Java and then try to exec a program, if
        this fails it is because Java is masking the SIGCHLD signal} {
    set trace [makeFile {} tclblend.trace]
    file delete $trace
    set env(TCLBLEND_TRACE) $trace
    set hello [makeFile {puts hello} hello.tcl]
    set script [format {
exec %s %s
exit 0
} $tcltest::tcltest $hello]
    exec $env(JAVA) -classpath $env(CLASSPATH) tests.JavaEval $script
} {hello}


# cleanup
if {[info exists env(TCLBLEND_TRACE)]} {
    unset env(TCLBLEND_TRACE)
}
file delete -force $hello

::tcltest::cleanupTests
return
