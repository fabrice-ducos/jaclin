proc expr-unbraced {a} {
    set b 23
    set c 4
    set d 6
    set e 7
    expr $a*$b+log($c)-pow($d,$e)
    expr $a*$b+log($c)-pow($d,$e)
}
proc expr-braced {a} {
    set b 23
    set c 4
    set d 6
    set e 7
    expr {$a*$b+log($c)-pow($d,$e)}
    expr {$a*$b+log($c)-pow($d,$e)}
}

proc expr-3.1 {a} {
    expr {$a}
}
proc expr-3.2 {a} {
    expr {$a + $a + $a + $a + $a + $a + $a + $a + $a + $a}
}
proc expr-3.3 {a} {
    expr {$a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a + $a +  $a + $a + $a + $a}
}

proc expr-incr-incr {value} {
    incr value
}
proc expr-incr-expr {value} {
    expr {$value + 1}
}
proc expr-streq {a b} {
    expr {$a == $b}; expr {$a == $b}; expr {$a == $b}; expr {$a == $b}
}
proc expr-strneq {a b} {
    expr {$a != $b}; expr {$a != $b}; expr {$a != $b}; expr {$a != $b}
}

proc expr-big {} {
    expr {
        1.0 + 5 /
        (100 * 3000) +
        11 + (5000 % 2) + (2135 / 3) -
        16 - 17 - 22.0 +
        double(1) + int(10.0) -
        100 * 5.5 +
        ((123&321) | 0xF4) +
        (~0 / 2) *
        11.0 +
        (1<<31)/16 +
        round(1.4)
    }
}

# Compare a string to the empty string constant.

proc expr-empty-string {} {
    set a "HI"
    set l [list]

    expr {$a == ""}
    expr {$a == ""}
    expr {$a == ""}
    expr {$a == ""}
    expr {$a == ""}

    expr {$l == {}}
    expr {$l == {}}
    expr {$l == {}}
    expr {$l == {}}
    expr {$l == {}}
}

proc expr-empty-string-loop {} {
    set a ""
    for {set i 0} {$i < 1000} {incr i} {
        expr {$a == ""}
    }
    return
}

# Negate compare a string to the empty string constant. 

proc expr-empty-not-string {} {
    set a "HI"
    set l [list]

    expr {$a != ""}
    expr {$a != ""}
    expr {$a != ""}
    expr {$a != ""}
    expr {$a != ""}

    expr {$l != {}}
    expr {$l != {}}
    expr {$l != {}}
    expr {$l != {}}
    expr {$l != {}}
}

# Compare to constant string

proc expr-equal-constant-string {} {
    set a "HELLO"
    expr {$a == "Y"}
    expr {$a == "YO"}
    expr {$a == "YOYO"}
    expr {$a == "YOYOYO"}
    expr {$a == "YOYOYO"}
}

# Compare to same constant string, this
# might not show much improvement if
# a char compare is done vs a direct
# string object compare.

proc expr-equal-same-constant-string {} {
    set a "HELLO"
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
    expr {$a == "HELLO" || $a == "HELLO"}
}

# Compare to same constant string, this
# should show a significant improvement
# if a direct object compare is used
# instead of a char compare.

proc expr-equal-same-big-constant-string {} {
    set a "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"
    expr {$a|| $a}
    expr {$a|| $a}
    expr {$a|| $a}
    expr {$a|| $a}
    expr {$a|| $a}
}

# Compare an object that contains an int to a constant int value.

proc expr-equal-constant-int {} {
    set a 10
    expr {$a == 0}
    expr {$a == 0}
    expr {$a == 0}
    expr {$a == 0}
    expr {$a == 0}
}

# Compare an object to a constant int value in a loop test

proc expr-equal-constant-int-loop {} {
    set sum 0
    for {set i 0} {$i < 1000} {incr i} {
        incr sum $i
    }
    return
}


if { [catch {string repeat "abc" 10}] } {
    proc str-repeat {str num} {
	set val {}
	for {set i 0} {$i < $num} {incr i} { append val $str }
	return $val
    }
} else {
    proc str-repeat {str num} { string repeat $str $num }
}
set base [str-repeat a 100]
set str1 "$base abc"
set str2 "$base cde"
set str3 "$base f"

bench -desc "expr-streq-a-eq-b-eq-len" -body {expr-streq $str1 $str2}
bench -desc "expr-strneq-a-neq-b-eq-len" -body {expr-strneq $str1 $str2}
bench -desc "expr-streq-a-eq-b-neq-len" -body {expr-streq $str1 $str3}

bench -desc "expr-streq-a-neq-b-neq-len" -body {expr-strneq $str1 $str3}
bench -desc "expr-streq-a-eq-b" -body {expr-streq 100 200}
bench -desc "expr-streq-a-neq-b" -body {expr-strneq 100 200}
bench -desc "expr-unbraced" -body {expr-unbraced 12}
bench -desc "expr-braced" -body {expr-braced 12}

bench -desc "expr-inline" -body {
    set a 12
    set b 23
    set c 4
    set d 6
    set e 7
    expr {$a*$b+log($c)-pow($d,$e)}
}

bench -desc "expr-one-operand" -body {expr-3.1 1}
bench -desc "expr-ten-operands" -body {expr-3.2 1}
bench -desc "expr-fifty-operands" -body {expr-3.3 1}

bench -desc "expr-incr-with-incr" -body {expr-incr-incr 1}
bench -desc "expr-incr-with-expr" -body {expr-incr-expr 1}
bench -desc "expr-big-expression" -body {expr-big}

bench -desc "expr-empty-string" -body {expr-empty-string}
bench -desc "expr-empty-string-loop" -body {expr-empty-string-loop}
bench -desc "expr-empty-not-string" -body {expr-empty-not-string}

bench -desc "expr-equal-same-constant-string" \
    -body {expr-equal-same-constant-string}

bench -desc "expr-equal-same-big-constant-string" \
    -body {expr-equal-same-big-constant-string}

bench -desc "expr-equal-constant-int" -body {expr-equal-constant-int}
bench -desc "expr-equal-constant-int-loop" -body {expr-equal-constant-int-loop}

