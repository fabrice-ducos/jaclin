# This series of tests checks specific internal
# TJC/Jacl APIs. These tests may need to
# invoke a specific function in a tight loop
# in order to get specific measurements about
# how the API performs on its own.

if {[catch {
package require TJC
}]} {
    return
}


set tuples [list \
    {internal-tclobject-preserve tcl.lang.TJCBench InternalTclObjectPreserve} \
    {internal-tclobject-preserve-release tcl.lang.TJCBench InternalTclObjectPreserveRelease} \
    {internal-expr-parse-int-value tcl.lang.TJCBench InternalExprParseIntValue} \
    {internal-expr-parse-double-value tcl.lang.TJCBench InternalExprParseDoubleValue} \
    {internal-expr-get-boolean-int tcl.lang.TJCBench InternalExprGetBooleanInt} \
    {internal-expr-get-boolean-double tcl.lang.TJCBench InternalExprGetBooleanDouble} \
    {internal-expr-get-boolean-string tcl.lang.TJCBench InternalExprGetBooleanString} \
    {internal-incr tcl.lang.TJCBench InternalIncr} \
    {internal-tcllist-length tcl.lang.TJCBench InternalTclListLength} \
    {internal-tcllist-lindex tcl.lang.TJCBench InternalTclListLindex} \
    {internal-tcllist-append tcl.lang.TJCBench InternalTclListAppend} \
    {internal-tclobject-newinstance-tclstring tcl.lang.TJCBench InternalTclStringNewInstance} \
    {internal-tclobject-newinstance-tclinteger tcl.lang.TJCBench InternalTclIntegerNewInstance} \
    {internal-tclobject-newinstance-tcldouble tcl.lang.TJCBench InternalTclDoubleNewInstance} \
    {internal-tclobject-newinstance-tcllist tcl.lang.TJCBench InternalTclListNewInstance} \
    {internal-tclobject-duplicate-tclstring tcl.lang.TJCBench InternalTclStringDuplicate} \
    {internal-tclobject-duplicate-tclinteger tcl.lang.TJCBench InternalTclIntegerDuplicate} \
    {internal-tclobject-duplicate-tcldouble tcl.lang.TJCBench InternalTclDoubleDuplicate} \
    {internal-tclobject-duplicate-tcllist tcl.lang.TJCBench InternalTclListDuplicate} \
    {internal-tclobject-is-tclinteger-type tcl.lang.TJCBench InternalTclIntegerType} \
    {internal-tclobject-is-tcldouble-type tcl.lang.TJCBench InternalTclDoubleType} \
    {internal-tclobject-is-tclstring-type tcl.lang.TJCBench InternalTclStringType} \
    {internal-tclobject-is-tcllist-type tcl.lang.TJCBench InternalTclListType} \
    {internal-expr-tclinteger-get tcl.lang.TJCBench InternalTclIntegerGet} \
    {internal-expr-get-known-int tcl.lang.TJCBench InternalExprGetKnownInt} \
    {internal-expr-inline-get-int tcl.lang.TJCBench InternalExprInlineGetInt} \
    {internal-expr-tcldouble-get tcl.lang.TJCBench InternalTclDoubleGet} \
    {internal-expr-get-known-double tcl.lang.TJCBench InternalExprGetKnownDouble} \
    {internal-expr-inlined-int-not-operator tcl.lang.TJCBench InternalExprInlinedIntNotOperator} \
    {internal-expr-inlined-int-not-bitwise-operator tcl.lang.TJCBench InternalExprInlinedIntNotBitwiseOperator} \
    {internal-expr-value-int-not-operator tcl.lang.TJCBench InternalExprValueIntNotOperator} \
    {internal-expr-value-int-not-nstr-operator tcl.lang.TJCBench InternalExprValueIntNotNstrOperator} \
    {internal-result-reset tcl.lang.TJCBench InternalResetResult} \
    {internal-result-set-tclobject tcl.lang.TJCBench InternalSetTclObjectResult} \
    {internal-result-set-same-tclobject tcl.lang.TJCBench InternalSetSameTclObjectResult} \
    {internal-result-set-boolean tcl.lang.TJCBench InternalSetBooleanResult} \
    {internal-result-set-int tcl.lang.TJCBench InternalSetIntResult} \
    {internal-result-set-int-via-expr-value tcl.lang.TJCBench InternalSetIntResultViaExprValue} \
    {internal-result-expr-set-int tcl.lang.TJCBench InternalExprSetIntResult} \
    {internal-expr-op-int-plus tcl.lang.TJCBench InternalExprOpIntPlus} \
    {internal-expr-op-double-plus tcl.lang.TJCBench InternalExprOpDoublePlus} \
    {internal-expr-op-int-not tcl.lang.TJCBench InternalExprOpIntNot} \
    {internal-result-expr-op-int-not-grab-release tcl.lang.TJCBench InternalExprOpIntNotGrabReleaseResult} \
    {internal-result-expr-op-int-not-stack-value tcl.lang.TJCBench InternalExprOpIntNotStackValueResult} \
    {internal-result-expr-op-int-not-stack-value-int tcl.lang.TJCBench InternalExprOpIntNotStackValueIntResult} \
    {internal-result-expr-op-int-not-stack-value-boolean tcl.lang.TJCBench InternalExprOpIntNotStackValueBooleanResult} \
    {internal-result-expr-op-int-not-stack-value-boolean-lookup tcl.lang.TJCBench InternalExprOpIntNotStackValueBooleanLookupResult} \
    {internal-result-expr-op-int-inlined-not-stack-value tcl.lang.TJCBench InternalExprOpIntInlinedNotStackValueResult} \
    {internal-result-expr-op-int-inlined-not-nstr-stack-value tcl.lang.TJCBench InternalExprOpIntInlinedNotNstrStackValueResult} \
    {internal-result-expr-op-int-inlined-not-nstr-stack-value-int tcl.lang.TJCBench InternalExprOpIntInlinedNotNstrStackValueIntResult} \
    {internal-result-expr-op-int-inlined-not-nstr-stack-value-boolean tcl.lang.TJCBench InternalExprOpIntInlinedNotNstrStackValueBooleanResult} \
    ]

foreach tuple $tuples {
    set cmd [lindex $tuple 0]
    set jclass [lindex $tuple 1]
    set test [lindex $tuple 2]
    TJC::command $cmd $jclass
}

foreach tuple $tuples {
    set cmd [lindex $tuple 0]
    set jclass [lindex $tuple 1]
    set test [lindex $tuple 2]
    bench -desc $cmd -body [list $cmd $test] -iter 5000
}

