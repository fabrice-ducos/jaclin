# This file contains for the parseCmd.c file.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 Ajuba Solutions
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: parseCmd.test,v 1.2 2005/10/24 00:36:36 mdejong Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

if {[catch {package require parser} err]} {
    puts "parseCmd.test:  can't run this test without parse command"
    return
}

test parseCmd-2.1 {ParseCommand} {
    list [catch {parse command {set x {foo}z} {}} msg] $msg $errorCode
} {1 {extra characters after close-brace} {PARSE braceExtra 11 {extra characters after close-brace}}}

test parseCmd-3.1 {ParseSetErrorCode} {
    list [catch {parse command {"foo"bar} {}} msg] $msg $errorCode
} {1 {extra characters after close-quote} {PARSE quoteExtra 5 {extra characters after close-quote}}}
test parseCmd-3.2 {ParseSetErrorCode} {
    list [catch {parse command {{foo}bar} {}} msg] $msg $errorCode
} {1 {extra characters after close-brace} {PARSE braceExtra 5 {extra characters after close-brace}}}
test parseCmd-3.3 {ParseSetErrorCode} {
    list [catch {parse command "{foo}" {0 3}} msg] $msg $errorCode
} {1 {missing close-brace} {PARSE missingBrace 0 {missing close-brace}}}
# This next test fails because Jacl's Parser impl does not record the same
# termIndex as the C impl. Best approach would be to fully port the Tcl 8.4
# parser to Jacl, but that it not implemented yet.
test parseCmd-3.4 {ParseSetErrorCode} {unimplemented} {
    list [catch {parse command {[foo} {0 3}} msg] $msg $errorCode
} {1 {missing close-bracket} {PARSE missingBracket 0 {missing close-bracket}}}
test parseCmd-3.5 {ParseSetErrorCode} {
    list [catch {parse command {$x(foo)} {0 4}} msg] $msg $errorCode
} {1 {missing )} {PARSE missingParen 2 {missing )}}}
test parseCmd-3.6 {ParseSetErrorCode} {
    list [catch {parse command {"foo"} {0 3}} msg] $msg $errorCode
} {1 {missing "} {PARSE missingQuote 0 {missing "}}}
test parseCmd-3.7 {ParseSetErrorCode} {
    list [catch {parse command {${foo}} {0 4}} msg] $msg $errorCode
} {1 {missing close-brace for variable name} {PARSE missingVarBrace 1 {missing close-brace for variable name}}}
test parseCmd-3.8 {ParseSetErrorCode} {
    list [catch {parse expr {3+err} {}} msg] $msg $errorCode
} {1 {syntax error in expression "3+err"} {PARSE syntax 2 {syntax error in expression "3+err"}}}
test parseCmd-3.9 {ParseSetErrorCode} {
    list [catch {parse expr {99999999999999999999999999999} {}} msg] $msg $errorCode
} {1 {integer value too large to represent} {PARSE badNumber 0 {integer value too large to represent}}}
test parseCmd-3.10 {ParseSetErrorCode} {
    list [catch {parse expr {} {}} msg] $msg $errorCode
} {1 {syntax error in expression ""} {PARSE syntax 0 {syntax error in expression ""}}}
test parseCmd-3.11 {ParseSetErrorCode} {
    list [catch {parse expr {1+} {}} msg] $msg $errorCode
} {1 {syntax error in expression "1+"} {PARSE syntax 1 {syntax error in expression "1+"}}}


test parseCmd-4.1 {ParseGetString} {
    parse getstring "foo\u00c7bar" {5 1}
} b

test parseCmd-5.1 {ParseCharIndex} {
    parse charindex "foo\u00c7bar" {5 1}
} 4

test parseCmd-6.1 {ParseCharLength} {
    parse charlength "foo\u00c7bar" {0 7}
} 6

test parseCmd-6.2 {ParseGetString} {
    set s "foo\u00c7bar"
    list \
        [parse getstring $s {0 1}] \
        [parse getstring $s {1 1}] \
        [parse getstring $s {2 1}] \
        [parse getstring $s {3 2}] \
        [parse getstring $s {5 1}] \
        [parse getstring $s {6 1}] \
        [parse getstring $s {7 1}]
} [list f o o \u00c7 b a r]



test parseCmd-7.0.1 {ParseList} {
    set s "\u00c7 B \u00c7"
    parse list $s {0 end}
} {{0 2} {3 1} {5 2}}

test parseCmd-7.0.2 {parse list elements} {
    set script {{0 1 2}}
    set range {1 5}
    parse list $script $range
} {{1 1} {3 1} {5 1}}



test parseCmd-7.1 {parse list elements} {
    set script {0 1 2}
    set range {0 end}
    set range_str [parse getstring $script $range]
    set results [parse list $script $range]
    set strs [list]
    foreach result $results {
        lappend strs [parse getstring $script $result]
    }
    list $range_str $results $strs
} {{0 1 2} {{0 1} {2 1} {4 1}} {0 1 2}}

test parseCmd-7.2 {parse list elements} {
    set script {{0 1 2}}
    set range {1 5}
    set range_str [parse getstring $script $range]
    set results [parse list $script $range]
    set strs [list]
    foreach result $results {
        lappend strs [parse getstring $script $result]
    }
    list $range_str $results $strs
} {{0 1 2} {{1 1} {3 1} {5 1}} {0 1 2}}

test parseCmd-7.3 {parse list elements} {
    set script {set i {0 1 2}}
    set range {7 5}
    set range_str [parse getstring $script $range]
    set results [parse list $script $range]
    set strs [list]
    foreach result $results {
        lappend strs [parse getstring $script $result]
    }
    list $range_str $results $strs
} {{0 1 2} {{7 1} {9 1} {11 1}} {0 1 2}}


test parseCmd-8.1 {parse expr} {
    set script {1 == ""}
    parse expr $script {0 end}
} [list \
    subexpr {0 7} \
    [list \
        {operator {2 2} {}} \
        {subexpr {0 1} {{text {0 1} {}}}} \
        {subexpr {5 2} {{text {6 0} {}}}} \
    ] \
  ]

test parseCmd-8.2 {parse expr} {
    set script {1 ne ""}
    parse expr $script {0 end}
} [list \
    subexpr {0 7} \
    [list \
        {operator {2 2} {}} \
        {subexpr {0 1} {{text {0 1} {}}}} \
        {subexpr {5 2} {{text {6 0} {}}}} \
    ] \
  ]

test parseCmd-8.3 {parse expr} {
    set script {!1}
    parse expr $script {0 end}
} [list \
    subexpr {0 2} \
    [list \
        {operator {0 1} {}} \
        [list \
            subexpr {1 1} \
            [list \
                {text {1 1} {}} \
            ] \
        ] \
    ] \
  ]

test parseCmd-8.4 {parse expr} {
    set script {[cmd] != {}}
    parse expr $script {0 end}
} [list \
    subexpr {0 11} \
    [list \
        {operator {6 2} {}} \
        {subexpr {0 5} {{command {0 5} {}}}} \
        {subexpr {9 2} {{text {10 0} {}}}} \
    ] \
  ]


# cleanup
cleanupTests
if {[info exists tk_version] && !$tcl_interactive} {
    exit
}
