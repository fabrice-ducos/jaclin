if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.1
    namespace import -force ::tcltest::*
}

setupJavaPackage

tcltest::test testtjc-1.0 {call TestTJC methds} {
    java::call TestTJC testEvalProcBody [java::getinterp]
} -1

tcltest::test testtjc-1.1 {call TestTJC methds} {
    java::call TestTJC testEvalProcBody2 [java::getinterp]
} 2

tcltest::test testtjc-1.2 {call TestTJC methds} {
    java::call TestTJC testInvoke1 [java::getinterp]
} 1

tcltest::test testtjc-1.3 {call TestTJC methds} {
    java::call TestTJC testInvoke2 [java::getinterp]
} 1

tcltest::test testtjc-1.4 {call TestTJC methds} {
    set unknown_args [list]
    if {[info commands unknown] == "unknown"} {
        set unknown_defined 1
        rename unknown old.unknown
    }
    proc unknown { args } {
        set ::unknown_args $args
    }
    java::call TestTJC testInvoke3 [java::getinterp]
    rename unknown {}
    if {$unknown_defined} {
        rename old.unknown unknown
    }
    set unknown_args
} {foobar 1 2}

tcltest::test testtjc-1.5 {call TestTJC methds} {
    proc ziggy { num } {
        set ::ziggy $num
    }
    java::call TestTJC testInvoke4 [java::getinterp]
    rename ziggy {}
    set ::ziggy
} {11}

tcltest::test testtjc-1.6 {call TestTJC methds} {
    proc raise_error { num } {
        error "error$num"
    }
    set result [java::call TestTJC testInvoke5 [java::getinterp]]
    rename raise_error {}
    list $result $err $errorInfo
} {1 error2 {error2
    while executing
"error "error$num""
    (procedure "raise_error" line 2)
    invoked from within
"raise_error 2"}}

tcltest::test testtjc-1.7 {call TestTcl methds} {
    java::call tcl.lang.TestTcl testBoolQuery1 [java::getinterp]
} {2 refCount 1 TclInteger 1 TclBoolean true 1 TclInteger 1}

tcltest::test testtjc-1.8 {call TestTcl methds} {
    java::call tcl.lang.TestTcl testBoolQuery2 [java::getinterp]
} {2 refCount 2 TclInteger 2 TclBoolean true 2 TclInteger 2}

tcltest::test testtjc-1.9 {call TestTcl methds} {
    java::call tcl.lang.TestTcl testBoolQuery3 [java::getinterp]
} {2 1 TclInteger 1 TclInteger 2 2 true}

tcltest::test testtjc-2.0 {call TestTJC methds} {
    java::call TestTJC testSwitchInvoke1 [java::getinterp]
} {pass}

tcltest::test testtjc-2.1 {call TestTJC methds} {
    java::call TestTJC testSwitchInvoke2 [java::getinterp]
} {pass}

tcltest::test testtjc-3.1 {call TestTJC methds} {
    java::call TestTJC testExprOp1 [java::getinterp]
} {-1}

tcltest::test testtjc-3.2 {call TestTJC methds} {
    java::call TestTJC testExprOp2 [java::getinterp]
} {-1234}

tcltest::test testtjc-3.3 {call TestTJC methds} {
    java::call TestTJC testExprOp3 [java::getinterp]
} {1000}

tcltest::test testtjc-3.4 {call TestTJC methds} {
    java::call TestTJC testExprOp4 [java::getinterp]
} {101.0}

tcltest::test testtjc-3.5 {call TestTJC methds} {
    java::call TestTJC testExprOp5 [java::getinterp]
} {0}

tcltest::test testtjc-3.6 {call TestTJC methds} {
    java::call TestTJC testExprOp6 [java::getinterp]
} {1}

tcltest::test testtjc-3.7 {call TestTJC methds} {
    java::call TestTJC testExprOp7 [java::getinterp]
} {1}

tcltest::test testtjc-3.8 {call TestTJC methds} {
    java::call TestTJC testExprOp8 [java::getinterp]
} {0}

tcltest::test testtjc-3.9 {call TestTJC methds} {
    java::call TestTJC testExprOp9 [java::getinterp]
} {4.0}

tcltest::test testtjc-3.10 {call TestTJC methds} {
    java::call TestTJC testExprOp10 [java::getinterp]
} {1}

tcltest::test testtjc-3.11 {call TestTJC methds} {
    java::call TestTJC testExprOp11 [java::getinterp]
} {0}

tcltest::test testtjc-3.12 {call TestTJC methds} {
    java::call TestTJC testExprOp12 [java::getinterp]
} {1}

tcltest::test testtjc-3.13 {call TestTJC methds} {
    java::call TestTJC testExprOp13 [java::getinterp]
} {1.0}


tcltest::test testtjc-args-1.0 {assign proc args} {
    java::call TestTJC testArg1 [java::getinterp]
} 1

tcltest::test testtjc-args-1.1 {assign proc args, should not assign to global vars} {
    set results [list]
    catch {unset id}
    catch {unset age}
    lappend results [info exists id]
    lappend results [info exists age]
    java::call TestTJC testArg1 [java::getinterp]
    lappend results [info exists id]
    lappend results [info exists age]
    set results
} {0 0 0 0}

tcltest::test testtjc-args-1.2 {assign proc args} {
    java::call TestTJC testArg2 [java::getinterp]
} 1

tcltest::test testtjc-args-1.3 {assign proc args} {
    java::call TestTJC testArg3 [java::getinterp]
} 1

tcltest::test testtjc-args-1.4 {assign proc args} {
    java::call TestTJC testArg4 [java::getinterp]
} 1

tcltest::test testtjc-args-1.5 {assign proc args} {
    java::call TestTJC testArg5 [java::getinterp]
} 1

tcltest::test testtjc-cmd-1.0 {create compiled command} {
    java::call TestTJC testCreateCompiledCommand1 [java::getinterp]
} 1

tcltest::test testtjc-cmd-1.1 {create compiled command} {
    java::call TestTJC testCreateCompiledCommand2 [java::getinterp]
} 1

tcltest::test testtjc-cmd-1.2 {create compiled command} {
    java::call TestTJC testCreateCompiledCommand3 [java::getinterp]
} 1

tcltest::test testtjc-refcount-1.0 {TclObject ref count} {
    java::call TestTJC testRefCount1 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.1 {TclObject ref count} {
    java::call TestTJC testRefCount2 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.2 {TclObject ref count} {
    java::call TestTJC testRefCount3 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.3 {TclObject ref count} {
    java::call TestTJC testRefCount4 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.4 {TclObject ref count} {
    java::call TestTJC testRefCount5 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.5 {TclObject ref count} {
    java::call TestTJC testRefCount6 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.6 {TclObject ref count} {
    java::call TestTJC testRefCount7 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.7 {TclObject ref count} {
    java::call TestTJC testRefCount8 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.8 {TclObject ref count} {
    java::call TestTJC testRefCount9 [java::getinterp]
} {TclObject has been deallocated}

tcltest::test testtjc-refcount-1.9 {TclObject ref count} {
    java::call TestTJC testRefCount10 [java::getinterp]
} {TclObject has been deallocated}


tcltest::test testtjc-package-1.0 {load TJC package} {
    package require TJC
    lsort [info commands TJC::*]
} {::TJC::command ::TJC::package}

tcltest::test testtjc-command-1.0 {TJC::command} {
    package require TJC
    catch {TJC::command foo one.two.three.four.FooCmd} err
    set err
} {class one.two.three.four.FooCmd not found}

tcltest::test testtjc-command-1.1 {TJC::command} {
    package require TJC
    TJC::command test_tjc_compiled_command TestTJCCompiledCommand
    set result [test_tjc_compiled_command]
    rename test_tjc_compiled_command {}
    set result
} {OK from ::}

tcltest::test testtjc-command-1.2 {TJC::command} {
    package require TJC
    TJC::command ::TJC::test_tjc_compiled_command TestTJCCompiledCommand
    set result [TJC::test_tjc_compiled_command]
    rename ::TJC::test_tjc_compiled_command {}
    set result
} {OK from ::TJC}

tcltest::test testtjc-package-1.0 {TJC::package} {
    package require TJC
    catch {TJC::package one.two.three.four} err
    set err
} {class one.two.three.four.TJCExtension not found}

tcltest::test testtjc-package-1.1 {TJC::package} {
    package require TJC
    catch {TJC::package default} err
    set err
} {class TJCExtension not found}

tcltest::test testtjc-package-1.2 {TJC::package} {
    package require TJC
    set val {}
    TJC::package test.tjc
    set val
} {OK}

tcltest::test testtjc-package-1.3 {TJC::package} {
    package require TJC
    # Loading test.tjcext package will source
    # f1.tcl, f2.tcl, and f3.tcl from
    # the tjcext.jar file.
    foreach cmd [info commands fp*] {
        rename $cmd {}
    }
    TJC::package test.tjcext
    set results [lsort [info commands fp*]]
    foreach cmd $results {
        rename $cmd {}
    }
    set results
} {fp1 fp2 fp3}


# Test variable cache implementation, the test command
# is invoked from inside a Tcl proc body so that a
# local var frame is available.

proc testtjc_varlookup_1_0 {} {
    # "var" does not exist in the local var frame

    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.0 {variable cache} {
    testtjc_varlookup_1_0
} {VAR_NO_CACHE}

proc testtjc_varlookup_1_1 {} {
    # "var" does exist in the local var frame
    set var VALUE

    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.1 {variable cache} {
    testtjc_varlookup_1_1
} {OK_CACHE}

proc traceDummy { args } {
    puts "traceDummy $args"
}

proc testtjc_varlookup_1_2 {} {
    # "var" does exist in the local var frame but
    # it can't be cached because it has traces set.
    set var VALUE
    trace variable var r traceDummy

    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.2 {variable cache} {
    testtjc_varlookup_1_2
} {VAR_NO_CACHE}

proc testtjc_varlookup_1_3 {} {
    # "var" does exist in the local var frame but
    # it can't be cached because it has traces set.
    set var VALUE
    trace variable var w traceDummy

    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.3 {variable cache} {
    testtjc_varlookup_1_3
} {VAR_NO_CACHE}

proc testtjc_varlookup_1_4 {} {
    # "var" does exist in the local var frame
    set var VALUE

    java::call TestTJC testVarLookup2 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.4 {variable cache} {
    testtjc_varlookup_1_4
} {VALUE}


proc testtjc_varlookup_1_5 {} {
    # "var" does exist in the local var frame, but
    # it will get unset before the cached value
    # is accessed.
    set var VALUE

    java::call TestTJC testVarLookup3 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.5 {variable cache} {
    testtjc_varlookup_1_5
} {NOT_VALID2}

proc testtjc_varlookup_1_6 {} {
    # "var" exists in local frame, it is a link
    # to a global scalar variable.
    global var

    java::call TestTJC testVarLookup2 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.6 {variable cache} {
    set var VALUE
    testtjc_varlookup_1_6
} {VALUE}

proc testtjc_varlookup_1_7 {} {
    # lookup "var" in the global scope.
    java::call TestTJC testVarLookup4 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.7 {variable cache} {
    set var VALUE7
    testtjc_varlookup_1_7
} {VALUE7}


proc testtjc_varlookup_1_8_0 {} {
    # "v1" exists in local frame, other vars
    # are links to "v1".
    set v1 VALUE8_0
    upvar 0 v1 v2
    upvar 0 v2 v3
    upvar 0 v3 var

    java::call TestTJC testVarLookup2 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.8.0 {variable cache} {
    testtjc_varlookup_1_8_0
} {VALUE8_0}

proc testtjc_varlookup_1_8_1 {} {
    # upvar links to an array element so it can't
    # be cached.
    set arr(one) 1
    upvar 0 arr(one) var

    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.8.1 {variable cache} {
    testtjc_varlookup_1_8_1
} {VAR_NO_CACHE}

proc testtjc_varlookup_1_8_2 {} {
    # upvar link to a local scalar that does not
    # yet exit is valid.
    upvar 0 notyet var
    set var VALUE8_2

    java::call TestTJC testVarLookup2 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.8.2 {variable cache} {
    testtjc_varlookup_1_8_2
} {VALUE8_2}

proc testtjc_varlookup_1_8_3 {} {
    # upvar link to a local scalar that does not
    # yet exit is valid.
    upvar 0 var notyet
    set notyet VALUE8_3

    java::call TestTJC testVarLookup2 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.8.3 {variable cache} {
    testtjc_varlookup_1_8_3
} {VALUE8_3}

proc testtjc_varlookup_1_8_4 {} {
    set arr(one) 1
    # upvar link to array variable is valid, but it
    # will not be cached as a linked scalar because
    # the variable is an array.
    upvar 0 arr var

    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.8.4 {variable cache} {
    testtjc_varlookup_1_8_4
} {VAR_NO_CACHE}


proc testtjc_varlookup_1_8_5 {} {
    # create upvar link to global
    upvar #0 test_varlookup185 var
    
    # create upvar link to global, this
    # is the link that will be broken next.
    upvar #0 test_varlookup185 local_ref

    # redirect upvar to a local, this marks
    # the global as not valid for cache purposes.
    upvar 0 dummy_local local_ref

    # lookup var, the global should now be marked
    # as not cached because of the link redirect
    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.8.5 {variable cache} {
    set test_varlookup185 VALUE185
    testtjc_varlookup_1_8_5
} {VAR_NO_CACHE}


proc testtjc_varlookup_1_9 {} {
    # lookup "var" in the local scope.
    set var VALUE9
    java::call TestTJC testVarLookup5 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.9 {variable cache} {
    testtjc_varlookup_1_9
} {VALUE9}

proc testtjc_varlookup_1_10 {} {
    # set and query cached var value
    java::call TestTJC testVarLookup6 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.10 {variable cache} {
    testtjc_varlookup_1_10
} {VALUE10}

proc testtjc_varlookup_1_11 {} {
    # set and query cached var value
    java::call TestTJC testVarLookup7 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.11 {variable cache} {
    testtjc_varlookup_1_11
} {A A B B C C C}


proc testtjc_varlookup1_12_trace { args } {
    # Define a global variable when
    # a read trace is executed.
    global varlookup1_12_var
    set varlookup1_12_var VALUE12
}

proc testtjc_varlookup_1_12 {} {
    # "var" is linked to a global that is
    # currently undefined. A variable get
    # should run the read trace and set
    # the variable, the var should not
    # be cached.

    upvar #0 varlookup1_12_var var

    trace variable var r testtjc_varlookup1_12_trace

    java::call TestTJC testVarLookup1 [java::getinterp]
}

tcltest::test testtjc-varlookup-1.12 {variable cache} {
    if {[info exists varlookup1_12_var]} {
        unset varlookup1_12_var
    }
    testtjc_varlookup_1_12
} {VAR_NO_CACHE}


::tcltest::cleanupTests
return

