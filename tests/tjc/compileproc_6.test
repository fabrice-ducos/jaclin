package require tcltest

# Test series 6 is for variable cache logic.
# The variable cache code will lookup and
# cache local and global scalar variables.
# This is enabled via the +cache-variables
# OPTIONS flag.

# Load jdk test data in case this has not already been done.
source [file join [tcltest::testsDirectory] jdkutils.tcl]
test_jdk_load_config

# Invoked after compileproc_init is invoked inside compileproc_compile.

proc test_compileproc_6_set_flags { proc_name } {
    global _compileproc
    global test_compileproc_6_cache_variables

    # Inline all containers but don't bother caching commands.
    set _compileproc(options,inline_containers) {all}

    # Set flag if global is set, then unset
    if {[info exists test_compileproc_6_cache_variables]} {
        if {$test_compileproc_6_cache_variables} {
            set _compileproc(options,cache_variables) 1
        }
        unset test_compileproc_6_cache_variables
    }
}

tcltest::test compileproc6-1.0 {no variable cache for get} {
    set script {
proc p {} {
    list $x
}
}

    set test_compileproc_6_cache_variables 0
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $x
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $x
                tmp1 = interp.getVar("x", null, 0);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjv(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc6-1.1 {use variable cache for get} {
    set script {
proc p {} {
    list $x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $x
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: list
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 variable: $x
                tmp1 = getVarScalar(interp, "x", 0, varcache1, 1);
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjv(interp, objv0, 2);
            }
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("list");
        const0.preserve(); const0.preserve();
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}

tcltest::test compileproc6-1.2 {no variable cache for arg set} {
    set script {
proc p { x } {
}
}

    set test_compileproc_6_cache_variables 0
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 2) {
            throw new TclNumArgsException(interp, 1, objv, "x");
        }
        interp.setVar("x", null, objv[1], 0);
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc6-1.3 {use variable cache for arg set} {
    set script {
proc p { x } {
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 2) {
            throw new TclNumArgsException(interp, 1, objv, "x");
        }
        setVarScalar(interp, "x", objv[1], 0, varcache1, 1);
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}

tcltest::test compileproc6-1.4 {use variable cache for arg set} {
    set script {
proc p { x {y 1} args } {
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length < 2) {
            throw new TclNumArgsException(interp, 1, objv, "x ?y? args");
        }
        setVarScalar(interp, "x", objv[1], 0, varcache1, 1);
        setVarScalar(interp, "y", 
            ((objv.length <= 2) ? const0 : objv[2]), 0, varcache2, 2);
        if ( objv.length <= 3 ) {
            setVarScalar(interp, "args", "", 0, varcache3, 3);
        } else {
            TclObject argl = TclList.newInstance();
            for (int i = 3; i < objv.length; i++) {
                TclList.append(interp, argl, objv[i]);
            }
            setVarScalar(interp, "args", argl, 0, varcache3, 3);
        }
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }

    Var varcache1 = null;
    Var varcache2 = null;
    Var varcache3 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                varcache2 = null;
                varcache3 = null;
                return null;
            }
            case 1: {
                part1 = "x";
                break;
            }
            case 2: {
                part1 = "y";
                break;
            }
            case 3: {
                part1 = "args";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
            case 2: {
                varcache2 = lvar;
                break;
            }
            case 3: {
                varcache3 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}

tcltest::test compileproc6-1.5 {use variable cache for foreach var set} {
    set script {
proc p {} {
    foreach x {1 2} {}
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: foreach x {1 2} {}
            TclObject tmp0 = null;
            try {
                tmp0 = const0;
                tmp0.preserve();
                final int tmp0_length = TclList.getLength(interp, tmp0);

                for ( int index1 = 0 ; index1 < tmp0_length ; index1++ ) {
                    TclObject tmp2 = TclList.index(interp, tmp0, index1);
                    try {
                        setVarScalar(interp, "x", tmp2, 0, varcache1, 1);
                    } catch (TclException ex) {
                        TJC.foreachVarErr(interp, "x");
                    }
                }
                interp.resetResult();
            } finally {
                if ( tmp0 != null ) {
                    tmp0.release();
                }
            }
        } // End Invoke: foreach
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("1 2");
        const0.preserve(); const0.preserve();
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}

tcltest::test compileproc6-1.6 {use variable cache for catch var set} {
    set script {
proc p {} {
    catch {error MSG} x
}
}

    set test_compileproc_6_cache_variables 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_6_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: catch {error MSG} x
            int code0 = TCL.OK;
            try {
            if ( false ) { throw (TclException) null; }
            { // Invoke: error MSG
                TclObject[] objv1 = TJC.grabObjv(interp, 2);
                try {
                    TclObject tmp2;
                    // Arg 0 constant: error
                    tmp2 = const0;
                    tmp2.preserve();
                    objv1[0] = tmp2;
                    // Arg 1 constant: MSG
                    tmp2 = const1;
                    tmp2.preserve();
                    objv1[1] = tmp2;
                    TJC.invoke(interp, null, objv1, 0);
                } finally {
                    TJC.releaseObjv(interp, objv1, 2);
                }
            } // End Invoke: error
            } catch (TclException ex) {
                code0 = ex.getCompletionCode();
            }
            TclObject result = interp.getResult();
            try {
                setVarScalar(interp, "x", result, 0, varcache1, 1);
            } catch (TclException ex) {
                TJC.catchVarErr(interp);
            }
            interp.resetResult();
            interp.setResult(code0);
        } // End Invoke: catch
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    TclObject const0;
    TclObject const1;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("error");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("MSG");
        const1.preserve(); const1.preserve();
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}

# Should we even bother to cache a variable
# if it is only accessed once during the method?
# Would need to know when an access was a flat
# read/write or from inside a loop. Also,
# global accesses like "::namespace::other::var"
# might not need a cache if they are only
# read or written once.

# Cleanup
jdk_tool_cleanup
tcltest::cleanupTests

