package require tcltest

# Test series 7 is for inlined Tcl command logic.
# builtin Tcl commands like set, global, and
# others are inlined to improve performance
# and reduce code size.
# This is enabled via the +inline-commands
# OPTIONS flag.

# Load jdk test data in case this has not already been done.
source [file join [tcltest::testsDirectory] jdkutils.tcl]
test_jdk_load_config

# Invoked after compileproc_init is invoked inside compileproc_compile.

proc test_compileproc_7_set_flags { proc_name } {
    global _compileproc
    global test_compileproc_7_cache_variables
    global test_compileproc_7_inline_commands
    global test_compileproc_7_skip_constant_increment

    # Inline all containers but don't bother caching commands.
    set _compileproc(options,inline_containers) {all}

    # Set flag if global is set, then unset
    if {[info exists test_compileproc_7_cache_variables]} {
        if {$test_compileproc_7_cache_variables} {
            set _compileproc(options,cache_variables) 1
        }
        unset test_compileproc_7_cache_variables
    }

    # Set flag if global is set, then unset
    if {[info exists test_compileproc_7_inline_commands]} {
        if {$test_compileproc_7_inline_commands} {
            set _compileproc(options,inline_commands) 1
        }
        unset test_compileproc_7_inline_commands
    }

    # Set flag if global is set, then unset
    if {[info exists test_compileproc_7_skip_constant_increment]} {
        if {$test_compileproc_7_skip_constant_increment} {
            set _compileproc(options,skip_constant_increment) 1
        }
        unset test_compileproc_7_skip_constant_increment
    }
}

tcltest::test compileproc7-1.0 {no inline set command} {
    set script {
proc p {} {
    set x
}
}

    set test_compileproc_7_inline_commands 0
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) { initCmd(interp); }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: set x
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: set
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 constant: x
                tmp1 = const1;
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjv(interp, objv0, 2);
            }
        } // End Invoke: set
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("set");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("x");
        const1.preserve(); const1.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-1.1 {inline set command} {
    set script {
proc p {} {
    set x
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: set x
            TclObject tmp0 = interp.getVar("x", null, 0);
            interp.setResult(tmp0);
        } // End Invoke: set
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-1.2 {inline set command} {
    set script {
proc p {} {
    set x 1
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: set x 1
            TclObject tmp0;
            tmp0 = interp.setVar("x", null, const0, 0);
            interp.setResult(tmp0);
        } // End Invoke: set
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-1.3 {inline set command} {
    set script {
proc p {} {
    set x $y
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: set x $y
            TclObject tmp0;
            tmp0 = interp.getVar("y", null, 0);
            tmp0 = interp.setVar("x", null, tmp0, 0);
            interp.setResult(tmp0);
        } // End Invoke: set
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-1.4 {inline set command} {
    set script {
proc p {} {
    set x [set y]
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: set x [...]
            TclObject tmp0;
            { // Invoke: set y
                TclObject tmp1 = interp.getVar("y", null, 0);
                interp.setResult(tmp1);
            } // End Invoke: set
            tmp0 = interp.getResult();
            tmp0 = interp.setVar("x", null, tmp0, 0);
            interp.setResult(tmp0);
        } // End Invoke: set
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-1.5 {inline set command, enable varcache} {
    set script {
proc p {} {
    set x [set y]
}
}

    set test_compileproc_7_cache_variables 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: set x [...]
            TclObject tmp0;
            { // Invoke: set y
                TclObject tmp1 = getVarScalar(interp, "y", 0, varcache1, 1);
                interp.setResult(tmp1);
            } // End Invoke: set
            tmp0 = interp.getResult();
            tmp0 = setVarScalar(interp, "x", tmp0, 0, varcache2, 2);
            interp.setResult(tmp0);
        } // End Invoke: set
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    Var varcache1 = null;
    Var varcache2 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                varcache2 = null;
                return null;
            }
            case 1: {
                part1 = "y";
                break;
            }
            case 2: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
            case 2: {
                varcache2 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}


tcltest::test compileproc7-2.0 {inline global command} {
    set script {
proc p {} {
    global x
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: global x
            interp.resetResult();
            TJC.makeGlobalLinkVar(interp, "x", "x");
        } // End Invoke: global
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-2.1 {inline global command} {
    set script {
proc p {} {
    global x y
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: global x y
            interp.resetResult();
            TJC.makeGlobalLinkVar(interp, "x", "x");
            TJC.makeGlobalLinkVar(interp, "y", "y");
        } // End Invoke: global
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-2.2 {inline global command} {
    set script {
proc p {} {
    global ::x ::one::two::y
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: global ::x ::one::two::y
            interp.resetResult();
            TJC.makeGlobalLinkVar(interp, "::x", "x");
            TJC.makeGlobalLinkVar(interp, "::one::two::y", "y");
        } // End Invoke: global
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-3.0 {inline list command} {
    set script {
proc p {} {
    list
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list
            TclObject tmp0 = TclList.newInstance();
            interp.setResult(tmp0);
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-3.1 {inline list command} {
    set script {
proc p {} {
    list 1
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list 1
            TclObject tmp0 = TclList.newInstance();
            TclList.append(interp, tmp0, const0);
            interp.setResult(tmp0);
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-3.2 {inline list command} {
    set script {
proc p {} {
    list $x
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $x
            TclObject tmp0 = TclList.newInstance();
            TclObject tmp1;
            tmp1 = interp.getVar("x", null, 0);
            TclList.append(interp, tmp0, tmp1);
            interp.setResult(tmp0);
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-3.3 {inline list command} {
    set script {
proc p {} {
    list $x foo $y
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list $x foo $y
            TclObject tmp0 = TclList.newInstance();
            TclObject tmp1;
            try {
                tmp1 = interp.getVar("x", null, 0);
                TclList.append(interp, tmp0, tmp1);
                TclList.append(interp, tmp0, const0);
                tmp1 = interp.getVar("y", null, 0);
                TclList.append(interp, tmp0, tmp1);
            } catch (TclException ex) {
                tmp0.release();
                throw ex;
            }
            interp.setResult(tmp0);
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("foo");
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-3.4 {inline list command} {
    set script {
proc p {} {
    list 1 2 3
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: list 1 2 3
            TclObject tmp0 = TclList.newInstance();
            try {
                TclList.append(interp, tmp0, const0);
                TclList.append(interp, tmp0, const1);
                TclList.append(interp, tmp0, const2);
            } catch (TclException ex) {
                tmp0.release();
                throw ex;
            }
            interp.setResult(tmp0);
        } // End Invoke: list
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;
    TclObject const2;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
        const1 = TclInteger.newInstance(2);
        const1.preserve(); const1.preserve();
        const2 = TclInteger.newInstance(3);
        const2.preserve(); const2.preserve();
    }
} // end class Test1
}}


tcltest::test compileproc7-4.0 {inline llength command} {
    set script {
proc p {} {
    llength {1 2 3}
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: llength {1 2 3}
            int tmp0 = TclList.getLength(interp, const0);
            interp.setResult(tmp0);
        } // End Invoke: llength
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("1 2 3");
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-4.1 {inline llength command} {
    set script {
proc p {} {
    llength $x
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: llength $x
            TclObject tmp0 = interp.getVar("x", null, 0);
            int tmp1 = TclList.getLength(interp, tmp0);
            interp.setResult(tmp1);
        } // End Invoke: llength
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}


tcltest::test compileproc7-5.0 {inline incr command} {
    set script {
proc p {} {
    incr x
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr x
            interp.resetResult();
            TclObject tmp0 = TJC.incrVar(interp, "x", 1);
            interp.setResult(tmp0);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-5.1 {inline incr command} {
    set script {
proc p {} {
    incr x 20
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr x 20
            interp.resetResult();
            TclObject tmp0 = TJC.incrVar(interp, "x", 20);
            interp.setResult(tmp0);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-5.2 {inline incr command} {
    set script {
proc p {} {
    incr x 0xFF
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr x 0xFF
            int tmp0 = TclInteger.get(interp, const0);
            interp.resetResult();
            TclObject tmp1 = TJC.incrVar(interp, "x", tmp0);
            interp.setResult(tmp1);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("0xFF");
        TclInteger.get(interp, const0);
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-5.3 {inline incr command} {
    set script {
proc p {} {
    incr x $y
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr x $y
            TclObject tmp0 = interp.getVar("y", null, 0);
            int tmp1 = TclInteger.get(interp, tmp0);
            interp.resetResult();
            TclObject tmp2 = TJC.incrVar(interp, "x", tmp1);
            interp.setResult(tmp2);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-5.4 {inline incr command} {
    set script {
proc p {} {
    incr ::x(y)
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr ::x(y)
            interp.resetResult();
            TclObject tmp0 = TJC.incrVar(interp, "::x(y)", 1);
            interp.setResult(tmp0);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-5.5 {inline incr command} {
    set script {
proc p {} {
    incr x
}
}

    set test_compileproc_7_cache_variables 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr x
            interp.resetResult();
            TclObject tmp0 = incrVarScalar(interp, "x", 1, 0, varcache1, 1);
            interp.setResult(tmp0);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}

tcltest::test compileproc7-5.6 {inline incr command} {
    set script {
proc p {} {
    incr ::x(y)
}
}

    set test_compileproc_7_cache_variables 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr ::x(y)
            interp.resetResult();
            TclObject tmp0 = TJC.incrVar(interp, "::x(y)", 1);
            interp.setResult(tmp0);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-5.7 {inline incr command} {
    set script {
proc p {} {
    incr x $y
}
}

    set test_compileproc_7_cache_variables 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr x $y
            TclObject tmp0 = getVarScalar(interp, "y", 0, varcache1, 1);
            int tmp1 = TclInteger.get(interp, tmp0);
            interp.resetResult();
            TclObject tmp2 = incrVarScalar(interp, "x", tmp1, 0, varcache2, 2);
            interp.setResult(tmp2);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    Var varcache1 = null;
    Var varcache2 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                varcache2 = null;
                return null;
            }
            case 1: {
                part1 = "y";
                break;
            }
            case 2: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
            case 2: {
                varcache2 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}

tcltest::test compileproc7-5.8 {inline incr command} {
    set script {
proc p {} {
    incr x [cmd]
}
}

    set test_compileproc_7_cache_variables 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: incr x [...]
            { // Invoke: cmd
                TclObject[] objv1 = TJC.grabObjv(interp, 1);
                try {
                    TclObject tmp2;
                    // Arg 0 constant: cmd
                    tmp2 = const0;
                    tmp2.preserve();
                    objv1[0] = tmp2;
                    TJC.invoke(interp, null, objv1, 0);
                } finally {
                    TJC.releaseObjv(interp, objv1, 1);
                }
            } // End Invoke: cmd
            TclObject tmp0 = interp.getResult();
            int tmp3 = TclInteger.get(interp, tmp0);
            interp.resetResult();
            TclObject tmp4 = incrVarScalar(interp, "x", tmp3, 0, varcache1, 1);
            interp.setResult(tmp4);
        } // End Invoke: incr
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("cmd");
        const0.preserve(); const0.preserve();
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "x";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}


tcltest::test compileproc7-6.0 {inline lindex command} {
    set script {
proc p {} {
    lindex {A B C} 0
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lindex {A B C} 0
            TclObject tmp0 = TclList.index(interp, const0, 0);
            if ( tmp0 == null ) {
                interp.resetResult();
            } else {
                interp.setResult(tmp0);
            }
        } // End Invoke: lindex
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("A B C");
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-6.1 {inline lindex command} {
    set script {
proc p {} {
    lindex $l 0
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lindex $l 0
            TclObject tmp0 = interp.getVar("l", null, 0);
            tmp0 = TclList.index(interp, tmp0, 0);
            if ( tmp0 == null ) {
                interp.resetResult();
            } else {
                interp.setResult(tmp0);
            }
        } // End Invoke: lindex
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-6.2 {inline lindex command} {
    set script {
proc p {} {
    lindex $list $index
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lindex $list $index
            TclObject tmp0 = null;
            TclObject tmp1;
            try {
                tmp0 = interp.getVar("list", null, 0);
                tmp0.preserve();
                tmp1 = interp.getVar("index", null, 0);
                TJC.lindexNonconst(interp, tmp0, tmp1);
            } finally {
                if ( tmp0 != null ) {
                    tmp0.release();
                }
            }
        } // End Invoke: lindex
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }
} // end class Test1
}}

tcltest::test compileproc7-6.3 {inline lindex command} {
    # Currently, no optimizations are done for "end" or "end-1"
    set script {
proc p {} {
    lindex {A B C} end-1
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lindex {A B C} end-1
            TclObject tmp0 = null;
            TclObject tmp1;
            try {
                tmp0 = const0;
                tmp0.preserve();
                tmp1 = const1;
                TJC.lindexNonconst(interp, tmp0, tmp1);
            } finally {
                if ( tmp0 != null ) {
                    tmp0.release();
                }
            }
        } // End Invoke: lindex
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("A B C");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("end-1");
        const1.preserve(); const1.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-6.4 {no inline for lindex command} {
    # No support for compiled multiple arguments to lindex.
    # This could be optimized by adding a constant list to
    # the constant pool and passing to the runtime proc.
    set script {
proc p {} {
    lindex {A B C} 0 0
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lindex {A B C} 0 0
            TclObject[] objv0 = TJC.grabObjv(interp, 4);
            try {
                TclObject tmp1;
                // Arg 0 constant: lindex
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 constant: {A B C}
                tmp1 = const1;
                tmp1.preserve();
                objv0[1] = tmp1;
                // Arg 2 constant: 0
                tmp1 = const2;
                tmp1.preserve();
                objv0[2] = tmp1;
                // Arg 3 constant: 0
                tmp1 = const2;
                tmp1.preserve();
                objv0[3] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjv(interp, objv0, 4);
            }
        } // End Invoke: lindex
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;
    TclObject const2;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("lindex");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("A B C");
        const1.preserve(); const1.preserve();
        const2 = TclInteger.newInstance(0);
        const2.preserve(); const2.preserve();
    }
} // end class Test1
}}


tcltest::test compileproc7-7.0 {inline lappend command} {
    # lappend is only inlined with 3 or more arguments.
    set script {
proc p {} {
    lappend var
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lappend var
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: lappend
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 constant: var
                tmp1 = const1;
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjv(interp, objv0, 2);
            }
        } // End Invoke: lappend
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("lappend");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("var");
        const1.preserve(); const1.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-7.1 {inline lappend command} {
    set script {
proc p {} {
    lappend var 1
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lappend var 1
            TclObject[] objv0 = TJC.grabObjv(interp, 1);
            try {
                TclObject tmp1;
                // Arg 2 constant: 1
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                interp.resetResult();
                tmp1 = TJC.lappendVar(interp, "var", objv0);
                interp.setResult(tmp1);
            } finally {
                TJC.releaseObjv(interp, objv0, 1);
            }
        } // End Invoke: lappend
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-7.2 {inline lappend command} {
    # Same as above but skip constant increment for argument
    set script {
proc p {} {
    lappend var 1
}
}

    set test_compileproc_7_skip_constant_increment 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lappend var 1
            TclObject[] objv0 = TJC.grabObjv(interp, 1);
            try {
                TclObject tmp1;
                // Arg 2 constant: 1
                objv0[0] = const0;
                interp.resetResult();
                tmp1 = TJC.lappendVar(interp, "var", objv0);
                interp.setResult(tmp1);
            } finally {
                TJC.releaseObjv(interp, objv0, 0);
            }
        } // End Invoke: lappend
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-7.3 {inline lappend command} {
    # Skip constant increment and use cache variable
    set script {
proc p {} {
    lappend var 1
}
}

    set test_compileproc_7_cache_variables 1
    set test_compileproc_7_skip_constant_increment 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: lappend var 1
            TclObject[] objv0 = TJC.grabObjv(interp, 1);
            try {
                TclObject tmp1;
                // Arg 2 constant: 1
                objv0[0] = const0;
                interp.resetResult();
                tmp1 = lappendVarScalar(interp, "var", objv0, varcache1, 1);
                interp.setResult(tmp1);
            } finally {
                TJC.releaseObjv(interp, objv0, 0);
            }
        } // End Invoke: lappend
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "var";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}


tcltest::test compileproc7-8.0 {inline append command} {
    # append is only inlined with 3 or more arguments.
    set script {
proc p {} {
    append var
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: append var
            TclObject[] objv0 = TJC.grabObjv(interp, 2);
            try {
                TclObject tmp1;
                // Arg 0 constant: append
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                // Arg 1 constant: var
                tmp1 = const1;
                tmp1.preserve();
                objv0[1] = tmp1;
                TJC.invoke(interp, null, objv0, 0);
            } finally {
                TJC.releaseObjv(interp, objv0, 2);
            }
        } // End Invoke: append
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;
    TclObject const1;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclString.newInstance("append");
        const0.preserve(); const0.preserve();
        const1 = TclString.newInstance("var");
        const1.preserve(); const1.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-8.1 {inline append command} {
    set script {
proc p {} {
    append var 1
}
}

    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: append var 1
            TclObject[] objv0 = TJC.grabObjv(interp, 1);
            try {
                TclObject tmp1;
                // Arg 2 constant: 1
                tmp1 = const0;
                tmp1.preserve();
                objv0[0] = tmp1;
                interp.resetResult();
                tmp1 = TJC.appendVar(interp, "var", objv0);
                interp.setResult(tmp1);
            } finally {
                TJC.releaseObjv(interp, objv0, 1);
            }
        } // End Invoke: append
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-8.2 {inline append command} {
    # Same as above but skip constant increment for argument
    set script {
proc p {} {
    append var 1
}
}

    set test_compileproc_7_skip_constant_increment 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: append var 1
            TclObject[] objv0 = TJC.grabObjv(interp, 1);
            try {
                TclObject tmp1;
                // Arg 2 constant: 1
                objv0[0] = const0;
                interp.resetResult();
                tmp1 = TJC.appendVar(interp, "var", objv0);
                interp.setResult(tmp1);
            } finally {
                TJC.releaseObjv(interp, objv0, 0);
            }
        } // End Invoke: append
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }
} // end class Test1
}}

tcltest::test compileproc7-8.3 {inline append command} {
    # Skip constant increment and use cache variable
    set script {
proc p {} {
    append var 1
}
}

    set test_compileproc_7_cache_variables 1
    set test_compileproc_7_skip_constant_increment 1
    set test_compileproc_7_inline_commands 1
    set plist [compileproc_script_to_proc_list $script]
    set buffer [compileproc_compile $plist testpkg.Test1 \
        test_compileproc_7_set_flags]
    if {[catch {
    set ok [test_jdk_compile_buffer testpkg.Test1 $buffer]
    }]} {
    set ok NO
    }
    list $ok $buffer
} {OK {// TJC implementation of procedure p
package testpkg;
import tcl.lang.*;

public class Test1 extends TJC.CompiledCommand {
    public void cmdProc(
        Interp interp,
        TclObject[] objv)
            throws TclException
    {
        if (!initCmd) {
            inlineCmds = true;
            initCmd(interp);
        }
        CallFrame callFrame = TJC.pushLocalCallFrame(interp, wcmd.ns);
        try {
        if (objv.length != 1) {
            throw new TclNumArgsException(interp, 1, objv, "");
        }
        { // Invoke: append var 1
            TclObject[] objv0 = TJC.grabObjv(interp, 1);
            try {
                TclObject tmp1;
                // Arg 2 constant: 1
                objv0[0] = const0;
                interp.resetResult();
                tmp1 = appendVarScalar(interp, "var", objv0, varcache1, 1);
                interp.setResult(tmp1);
            } finally {
                TJC.releaseObjv(interp, objv0, 0);
            }
        } // End Invoke: append
        } catch (TclException te) {
            TJC.checkTclException(interp, te, "p");
        } finally {
            TJC.popLocalCallFrame(interp, callFrame);
            updateVarCache(interp, 0);
        }
    }

    TclObject const0;

    protected void initConstants(Interp interp) throws TclException {
        const0 = TclInteger.newInstance(1);
        const0.preserve(); const0.preserve();
    }

    Var varcache1 = null;

    protected
    Var updateVarCache(
        Interp interp,
        int cacheId)
    {
        String part1;
        String part2 = null;
        int flags = 0;
        Var lvar;

        switch ( cacheId ) {
            case 0: {
                varcache1 = null;
                return null;
            }
            case 1: {
                part1 = "var";
                break;
            }
            default: {
                throw new TclRuntimeError("default: cacheId " + cacheId);
            }
        }

        lvar = TJC.resolveVarScalar(interp, part1, flags);

        switch ( cacheId ) {
            case 1: {
                varcache1 = lvar;
                break;
            }
        }
        return lvar;
    }
} // end class Test1
}}


# FIXME: In the examples above, it would improve performance if
# the interp result did not need to be set to the result of
# a nested invocation. Perhaps the invocation function could
# be passed a symbol to assign to instead of setting the
# interp result. It would not matter much in the case above,
# but for something like "set x [list 1 2 3]" it could help to
# skip the incr/decr that happens as a result it preserved/released.

# We might also be able to optimize away the interp.resetResult()
# call in cases where we know the interp result is not saved
# or used in a nested  invocation. The current code does not know
# if the result is used while emitting, so it needs to always
# reset or set the result even if it does not get used.

# Might be really useful to optimize the known basic classes
# like TclInteger, TclList, and so on so that a flag is set
# in the TclObject instance to indicate which type it is.
# This would do an AND to determine if the class was of
# a type instead of using instanceof operator which might
# be slower than just accessing a flag. This kind of check
# is done inside the impl for each type and in the TJC layer,
# so it might provide a worthwhile speedup with only a minor
# complexity addition.

# Cleanup
jdk_tool_cleanup
tcltest::cleanupTests

