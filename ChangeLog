2005-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/Interp.java (createCommand,
        deleteCommandFromToken, renameCommand, hideCommand):
        Increment WrappedCommand epoch when a command is
        renamed or redefined. Also invoke new
        resetShadowedCmdRefs() method to check for a rename
        that shadows another command.
        * src/jacl/tcl/lang/Namespace.java
        (resetShadowedCmdRefs): Port of shadowed command ref
        logic from Tcl 8.4.
        * src/jacl/tcl/lang/WrappedCommand.java: Add a
        cmdEpoch field that is used to see if a ref to
        a WrappedCommand is still valid. When changes to
        a command are made, the command epoch is updated
        to indicate that a held ref is no longer valid.
        * src/tests/jacl/tcl/lang/TestEpoch.java:
        * tests/jacl/refCount.test: Test WrappedCommand.cmdEpoch
        field on command rename and delete.

2005-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

        Update Namespace.getNamespaceForQualName() so that
        a result object stored on a per interp basis is
        populated with namespace info. Profiling indicates
        that this API generates lots of heap allocations
        that could be avoided.

        * src/jacl/tcl/lang/InfoCmd.java:
        * src/jacl/tcl/lang/Interp.java:
        * src/jacl/tcl/lang/Namespace.java:
        * src/jacl/tcl/lang/NamespaceCmd.java:
        * src/jacl/tcl/lang/ProcCmd.java:
        * src/jacl/tcl/lang/Var.java:

2005-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/Namespace.java: Reformat
        CRLF to LF to avoid patching issues.

2005-11-18  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/AfterCmd.java (getAfterEvent):
        Update strtoul() caller.
        * src/jacl/tcl/lang/Expression.java (ExprParseString):
        Update strtoul() and strtod() callers.
        * src/jacl/tcl/lang/FormatCmd.java (strtoul):
        Update callers of FormatCmd.strtoul() and fixup
        a number of formatting and StringBuffer issues.
        * src/jacl/tcl/lang/ScanCmd.java (cmdProc):
        Update strtoul() and strtod() callers and fixup
        formatting issues.
        * src/jacl/tcl/lang/StringCmd.java (cmdProc):
        Update strtoul() and strtod() callers.
        * src/jacl/tcl/lang/StrtodResult.java: Fixup comment.
        * src/jacl/tcl/lang/Util.java (strtoul, getInt,
        strtod, getDouble): Update strtoul() and strtod()
        to support parsing a sign indicator from the front
        of the string. The previous implementation was buggy
        as it saw strings like "- 100" as integers. Also
        support a "nan" as a double string.
        * tests/tcl/parseExpr.test: Enable test.
        * tests/tcl/string.test: Add number parsing test.

2005-11-18  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/Parser.java (parseCommand):
        Update parseCommand to use ParseWhitespace
        util method in command end logic. This fixes
        a bug where backslash newline + newline was
        not being seen as the end of a command.
        Rename numBytes to numChars in all Parser methods.
        * tests/tcl/parse.test: Add test case for
        backslash newline + newline bug in Jacl.

2005-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/ParseExpr.java (ParseInfo,
        ParsePrimaryExpr): Add support for parsing
        boolean literal tokens.
        * tests/tcl/parseExpr.test: Test boolean literal
        parsing. Remove constraints for tests that pass.

2005-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/ExprValue.java (getStringValue,
        toString): Use Util.printDouble() to create
        a string rep from a double.
        * tests/tcl/expr.test: Check for string rep of
        a double expr value.

2005-11-16  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/ForCmd.java (cmdProc):
        Remove extra CONTINUE branch and add
        default switch block.
        * tests/tcl/for.test: Test for Tcl 8.4
        results and remove knownBug contstraints.
        * tests/tcl/interp.test: Use knownbug
        not knownBug as constraint name.
        * tests/tcl/switch.test: Update to switch
        tests from Tcl 8.4.

2005-11-16  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/EvalCmd.java (cmdProc):
        Invoke eval(TclObject) instead of eval(String).
        * src/jacl/tcl/lang/Interp.java (setResult, eval,
        checkCommonInteger, checkCommonDouble,
        checkCommonBoolean, checkCommonString):
        Increment new result TclObject ref count before
        decremeting the old result ref count in the
        setResult(TclObject) method. This matches the
        Tcl 8.4 impl. Double check that common objects
        are shared to catch possible ref count errors
        in user code. Increment and decrement the passed
        in TclObject ref count in eval(TclObject) to
        match the Tcl 8.4 impl of Tcl_EvalObjEx.
        * src/jacl/tcl/lang/NamespaceCmd.java (evalCmd):
        Invoke eval(TclObject) instead of eval(String).
        * src/jacl/tcl/lang/UplevelCmd.java (cmdProc):
        Don't preserve and release TclObject passed to
        eval(TclObject) since eval now does that.
        * src/jacl/tcl/lang/Var.java (setVar): Pass
        String instead of TclObject since a String
        would get passed in the helper method anyway.
        * src/tcljava/tcl/lang/BeanEvent.java (BeanEvent):
        Save a String and invoke eval(String) later on
        instead of saving a ref to a TclObject without
        incrementing the ref count.
        * src/tcljava/tcl/lang/TclObject.java: Comment fixup.

2005-11-16  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/FormatCmd.java (cvtDblToStr):
        Set StringBuffer length instead of allocating
        a new StringBuffer. Format a double that has an
        exponent with a leading zero in the exponent
        so that Jacl matches Tcl 8.4.
        * tests/tcl/expr.test: Test for double formatting
        with an exponent that has a leading zero.

2005-11-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ForeachCmd.java (cmdProc):
        Remove unused var lookup code.
	* src/jacl/tcl/lang/IfCmd.java (cmdProc):
        Check for extra words after the else block
        and generate an error if found.
	* tests/tcl/foreach.test:
	* tests/tcl/if.test:
	* tests/tcl/while-old.test:
	* tests/tcl/while.test: Update test to
        those found in Tcl 8.4.

2005-11-06  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/itcl/itcl/lang/Cmds.java: Don't pass
        -url to source of a resource.
	* src/jacl/tcl/lang/FileCmd.java: Add debug
        statement.
	* src/jacl/tcl/lang/FileUtil.java: Fixup
        broken use of StringBuffer, keep file path
        from being munged with more than one character
        appears before a colon.
	* src/jacl/tcl/lang/FormatCmd.java: Fixup
        broken StringBuffer usage.
	* src/jacl/tcl/lang/Interp.java (createCommands,
        evalResource):
        Remove -url arguent to source of a resource.
        Set the script name returned by info script
        when sourcing a resource.
	* src/jacl/tcl/lang/SourceCmd.java: If a
        filename starts with "resource:" then
        always treat it as a resource. The previous
        code would only treat it as a resource if the
        -url flag was also passed.
	* src/jacl/tcl/lang/library/init.tcl:
        Remove -url arguent to source of a resource.
	* tests/jacl/FileCmd.test: Test for filename
        bug that was keeping resource: prefixed
        names from being dealt properly with the file
        commands.
	* tests/jacl/Interp.test:
        Remove -url arguent to source of a resource.

2005-11-04  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Copy files into library directory
        without extra files and CVS dirs. Don't cd to
        tests directory in source tree before running tests.
	* jaclsh.bat.in:
	* jaclsh.in: Check for JACL_MAIN env var when
        starting shell, if it exists then use it as
        the name of the Java main program. Default to
        tcl.lang.Shell.
	* src/jacl/tcl/lang/Expression.java: Comment
        out unused String allocation.
	* src/jacl/tcl/lang/ParseExpr.java (GetLexeme,
        ParseMaxDoubleLength): Update GetLexeme to
        match Tcl 8.4 implementation so that expr
        parsing that depends on the eq or ne operator
        works as expected.
	* src/jacl/tcl/lang/ProcCmd.java (cmdProc,
        FindCommandNamespace): Create util method
        to lookup command given a name and use it
        in the proc command.
	* src/jacl/tcl/lang/SwitchCmd.java (cmdProc,
        getBodyOffset): Update implementation of the
        switch command so that it matches Tcl 8.4.
        Move switch body logic into util method.
	* src/tcljava/tcl/lang/Extension.java (load):
        Move loading logic into util method.
	* tests/all.tcl (testsDirectory): Update
        test harness implementation so that tests
        are run with the build directory as the
        current directory. This keeps tmp files from
        being created in the source tree and it matches
        how Tcl 8.4 works.
	* tests/tcl/SwitchCmd.test: Remove duplicate
        of switch.test.
	* tests/tcl/switch.test: Update error message
        for switch command so that it matches Tcl 8.4.
	* tests/tclparser/parseCmd.test: Add expr parse
        test cases for eq and ne operators.

2005-10-28  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Add tcljava and jacl test
        source directories to the CLASSPATH
        for debug targets.
	* src/jacl/tcl/lang/ParseExpr.java (parseExpr,
        ParsePrimaryExpr, GetLexeme, LogSyntaxError):
        Fix bugs causing expr test failures.
	* src/jacl/tcl/lang/Parser.java (parseTokens,
        backslash, ParseBraces, ParseQuotedString,
        ParseWhiteSpace):
        Add "count" member to BackSlashResult so that
        caller can correctly determine the number of
        characters parsed. Set this count field in
        the backslash() method. Set the script_array
        member of a TclToken when setting the
        script_index. Add ParseWhitespaceResult
        util, it is not used yet.
	* src/jacl/tcl/lang/TclToken.java: Invoke
        the getTokenString() method just once in toString();
	* src/tests/jacl/tcl/lang/JavaTestExtension.java:
        Replace testeval2 command with testevalex.
        Add testexprparser command.
	* src/tests/jacl/tcl/lang/TestEval2Cmd.java:
	* src/tests/jacl/tcl/lang/TestEvalExCmd.java:
        Rename TestEval2Cmd to TestEvalExCmd.
	* src/tests/jacl/tcl/lang/TestEvalObjvCmd.java:
        Update to match Tcl 8.4 implementation so
        that test cases pass.
	* src/tests/jacl/tcl/lang/TestExprParserCmd.java:
        Port Tcl 8.4 implementation of test command.
	* src/tests/jacl/tcl/lang/TestParserCmd.java:
        Update to match Tcl 8.4 implementation.
	* src/tests/jacl/tcl/lang/TestParsevarnameCmd.java:
	* tests/tcl/parse.test: Update to Tcl 8.4 tests.
	* tests/tcl/parseExpr.test: Update to Tcl 8.4 tests.

2005-10-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Expression.java (Expression,
        registerMathFunction, evalMathFunction, RoundFunction):
        Add method to support registration of math functions.
        Use it for built-in math functions in ctor.
        Fix num args to math function check so that
        a math function with no args is correctly handled.
        Pass name of math function into evalMathFunction
        in case it is needed for an error message.
        Update round() math function implementation so that
        Tcl 8.4 tests added to expr.test pass.
	* src/tests/jacl/tcl/lang/JavaTestExtension.java:
        Create T1(), T2(), and T3() math functions so that
        tests in expr.test pass.
	* tests/tcl/expr.test: Use constraints to limit
        running tests that don't work instead of commenting
        them out. Add round() tests from Tcl 8.4.

2005-10-26  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/BackSlashResult.java: Add
        a count field that saves the number of characters
        consumed by the backslash subst.
	* src/jacl/tcl/lang/FindElemResult.java: Add
        a size field that saves the number of characters
        consumed from the script.
	* src/jacl/tcl/lang/ParseExpr.java (ParseInfo, parseExpr):
        Define start, next, prevEnd, and lastChar indexes like
        Tcl 8.4 so that parser tests pass.
	* src/jacl/tcl/lang/Parser.java (backslash, ParseHex):
        Rewrite backslash subst impl so that it makes use
        of a ParseHex helper like Tcl 8.4.
	* src/jacl/tcl/lang/TclParser.java (ParseList,
        ParseCountNewline):
        Use new size member of FindElemResult to get the
        correct number of characters in a list element.
        Fix end index bug in ParseCountNewline so that
        the correct number of newlines is returned.
	* src/jacl/tcl/lang/TclToken.java:
	* src/jacl/tcl/lang/Util.java (findElement):
        Define size member of FindElemResult.

2005-10-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Expression.java: Repalce call to
	Character.toString() with String.valueOf() since the
	former only appears in JDK 1.4 and newer.

2005-10-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ParseExpr.java: Add port of
	Tcl 8.4 expr parser donated by Bruce Johnson.
	* src/jacl/tcl/lang/Parser.java (ParseBraces,
	ParseQuotedString): Add Tcl 8.4 parse APIs needed
	for expr parser.
	* src/jacl/tcl/lang/TclParse.java (insertInTokenArray):
	Add field named "extra" for cases where an extra index
	result needs to be passed back to the caller. Init the
	result member. Add helper method to expand token array.
	* src/jacl/tcl/lang/TclParser.java: Use new expr parser
	to return expr tokens in parser package.
	* tests/tclparser/parseCmd.test: Enabled expr tests.

2005-10-21  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/LindexCmd.java (cmdProc,
        TclLindexList, TclLindexFlat): Implement Tcl TIP
        22, multiple index arguments to lindex. This
        matches the Tcl 8.4 implementation.
	* src/jacl/tcl/lang/Util.java (getIntForIndex):
        Update to match Tcl 8.4 implementation.
	* tests/tcl/lindex.test:
	* tests/tcl/string.test: Update tests to
        those used in Tcl 8.4.

2005-10-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Add tcltest.tcl to jacl.jar.
	* src/jacl/tcl/lang/Interp.java (createCommands,
        transferResult): Add tcltest package. Check for
        deleted interp in transferResult.
	* src/jacl/tcl/lang/InterpAliasCmd.java (cmdProc):
	* src/jacl/tcl/lang/InterpSlaveCmd.java (eval, invokeHidden):
	* src/jacl/tcl/lang/PackageCmd.java (checkVersion):
        Check for version number with two . characters in a row.
	* src/xputils/iload.test: Load tcltest package.
	* src/xputils/xputils.test: Load tcltest package.
	* tests/all.tcl: Load tcltest package instead of
        directly sourcing tcltest.tcl.
	* tests/defs (setupJavaPackage): Do nothing if Java
        package was already loaded.
	* tests/tcl/info.test: Load tcltest package.
	* tests/tcl/io.test: Load tcltest package.
	* tests/tcl/lsort.test: Load tcltest package.
	* tests/tcl/pkg.test: Load tcltest package
        into slave interp. These tests were not being
        run before so some new bugs in the interp needed
        to be fixed before the tests would pass.

2005-10-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/TclParserExtension.java:
	Reformat to replace DOS CRLF with LF.

2005-10-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/CharPointer.java:
	* src/jacl/tcl/lang/FindElemResult.java:
        Add elemStart member needed for calculation
        of element ranges in new parser package.
	* src/jacl/tcl/lang/Interp.java: Load
        parser package via "package require parser".
	* src/jacl/tcl/lang/Parser.java: Set the
        parse.termIndex and parse.errorType fields
        as needed by parser package. Add defs
        for TCL_TOKEN_SUB_EXPR and TCL_TOKEN_OPERATOR,
        though these are not implemented yet. Add
        parse error type decls needed by parser package.
	* src/jacl/tcl/lang/StringCmd.java (Utf8Count):
        Make Utf8Count available to other Jacl classes.
	* src/jacl/tcl/lang/TclParse.java: Add
        the errorType member to match Tcl 8.4.
        Also set termIndex to the end of the script.
	* src/jacl/tcl/lang/TclParser.java:
        Ported tclpro's parser package from the C
        code in tclParser.c. The package is functional
        except for the expr parser.
	* src/jacl/tcl/lang/TclParserExtension.java:
        Load parser package when required in Jacl.
	* src/jacl/tcl/lang/TclToken.java: Add
        printing code for TCL_TOKEN_SUB_EXPR and
        TCL_TOKEN_OPERATOR types.
	* src/jacl/tcl/lang/Util.java (findElement):
        Update FindElemResult calls so that they take
        an index for the start of the token.
	* tests/all.tcl: Add tclparser tests.
	* tests/tclparser/parse.test:
	* tests/tclparser/parseCmd.test: Test cases for
        parser package from tclpro. The expr tests and
        tests that depend on embedded null handling are
        currently disabled.

2005-10-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Add "make debug" target that
	will invoke a JPDA debug session for Jacl.
	Add src jars like tcljavasrc.jar to the CLASSPATH
	for the JPDA debug session.

2005-10-17  Mo DeJong  <mdejong@users.sourceforge.net>
 
	* src/jacl/tcl/lang/AfterCmd.java:
	* src/jacl/tcl/lang/EvalCmd.java:
	* src/jacl/tcl/lang/NamespaceCmd.java:
	* src/jacl/tcl/lang/UplevelCmd.java: Update
	concat callers since it now returns a TclObject.
	* src/jacl/tcl/lang/Util.java (concat):
	Reimplement concat so that it behaves like
	Tcl_ConcatObj from Tcl 8.4.
	* tests/tcl/list.test: Add concat test case.
	Update to Tcl 8.4 version.
	* tests/tcl/util.test: Remove incorrect
	code that would fail to run tests unless
	testobj was defined. Update to Tcl 8.4 version.

2005-10-14  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): Remove
	unused directory from search path in AMD 64 case.

2005-10-14  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): Add detection
	code for AMD 64 bit JVM under Linux.

2005-10-14  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Fixup test syntax that was
	generating errors under Linux.
	* src/native/javaCmd.c (Tclblend_Init, JavaInitBlend):
	Add assert calls to double check that interp
	pointers are not NULL in the init path.

2005-10-13  Mo DeJong  <mdejong@users.sourceforge.net>

        Enable Java debugger support for Jacl. When the
        JACL_DEBUG=1 env var is set, both jaclsh and
        jaclsh.bat will start the Jacl shell in a mode
        that supports attaching a Java source debugger.
        Jar files that contain the Java source code
        for each package are now created and installed
        so that a debugger can automatically display
        the source code.

        * Makefile.in: Create tcljavasrc.jar, jaclsrc.jar,
        itclsrc.jar, and install them.
        * configure: Regen.
        * jaclsh.bat.in:
        * jaclsh.in: Add itcl.jar to the CLASSPATH.
        Add new debug source jars to CLASSPATH if the
        JACL_DEBUG env var is set.
        * new_features.txt: Mention debug mode for Jacl.
        * tcljava.m4 (AC_JAVA_TOOLS): Update logic for
        debug flags under Win32.

2005-10-12  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/tcljava/tcl/lang/TclBoolean.java:
        Reimplement TclBoolean class so that only two
        instances of the TclBoolean internal rep will
        ever exist. This matches the C Tcl impl.
        In the get() method, check for an integer
        with the value 0 or 1, and return a boolean
        value without converting the internal rep
        to a boolean type.
        * src/tests/tcljava/tcl/lang/TestObjCmd.java:
        Add support for "boolean" type so that
        conversion tests will run as expected.
        * tests/tcl/obj.test: Add int->boolean
        conversion tests.

2005-10-11  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/StringCmd.java (cmdProc):
        Use Util.getBoolean() since TclBoolean.get()
        now converts int and double values.
        * src/tcljava/tcl/lang/TclBoolean.java (setBooleanFromAny):
        Update conversion to boolean type to match Tcl 8.4
        implementation where int and double numbers are
        converted directly to boolean values. Get object
        string rep to fix a bug where conversion of a
        pure object would result in loss of info.
        * src/tcljava/tcl/lang/TclIndex.java (testUpdateIndex):
        Add a regression testing access methods use in TestObjCmd.
        * src/tcljava/tcl/lang/TclString.java: Add FIXME.
        * src/tests/jacl/tcl/lang/JavaTestExtension.java:
        Create "testobj" and related commands.
        * src/tests/tcljava/tcl/lang/TestObjCmd.java: Add
        implementation of "testobj" and related commands.
        * tests/tcl/listObj.test: Enable "testobj" conditional
        code that was commented out.
        * tests/tcl/obj.test: Update to Tcl 8.4 obj.test.
        * tests/tcl/stringObj.test: Modify some tests so
        that they pass even though Jacl uses slightly different
        buffer allocation code for strings. Jacl also has no
        "none" TclObject, a TclObject always has an internal
        rep so make tests that depend on that pass too.
        * tests/tcl/util.test: Tests not run currently.

2005-10-06  Mo DeJong  <mdejong@users.sourceforge.net>

        Add optimized setVar() methods to the Interp class
        that accept a primitive argument type like an int,
        double, or boolean. Use these methods in the
        rest of Jacl code to take advantage of optimized
        primitive type assignment.

        * Makefile.in: Compile itcl code only with Jacl.
        * src/jacl/tcl/lang/ArrayCmd.java:
        * src/jacl/tcl/lang/CatchCmd.java:
        * src/jacl/tcl/lang/EofCmd.java:
        * src/jacl/tcl/lang/Interp.java: Create shared
        constant TclObject values for common primitive
        types. Add setVar() methods that optimize
        assignment of primitive values. Check for
        common primitives and use the shared constant
        values if found.
        * src/jacl/tcl/lang/InterpAliasCmd.java:
        * src/jacl/tcl/lang/InterpCmd.java:
        * src/jacl/tcl/lang/InterpSlaveCmd.java:
        * src/jacl/tcl/lang/LlengthCmd.java:
        * src/jacl/tcl/lang/StringCmd.java:
        * src/jacl/tcl/lang/TellCmd.java:
        * src/jacl/tcl/lang/TraceCmd.java:
        * src/jacl/tcl/lang/Util.java:
        * src/jacl/tcl/lang/Var.java: Remove
        useless getVar(), setVar(), unsetVar(),
        traceVar(), untraceVar(), and getTraces()
        methods that are just aliases.
        * src/jacl/tcl/lang/VariableCmd.java:
        * src/jacl/tcl/lang/VwaitCmd.java:
        * src/tclblend/tcl/lang/Interp.java: Add
        setVar() methods so that public API for
        TclBlend Interp class matches that of Jacl.

2005-10-06  Mo DeJong  <mdejong@users.sourceforge.net>

        Add tclbench runtime performance testing support.
        The existing output can be used to compare Tcl 8.4.11
        to Jacl 1.3.2.

        * tests/tclbench/data.bench:
        * tests/tclbench/expr.bench:
        * tests/tclbench/jacl132.out:
        * tests/tclbench/libbench.tcl:
        * tests/tclbench/list.test:
        * tests/tclbench/loops.bench:
        * tests/tclbench/runbench.tcl:
        * tests/tclbench/tclsh8411.out:

2005-09-29  Mo DeJong  <mdejong@users.sourceforge.net>

        * src/jacl/tcl/lang/AfterCmd.java (cmdProc, getAfterEvent):
        Update Util.strtoul() caller.
        * src/jacl/tcl/lang/ExprCmd.java (cmdProc):
        Invoke new Expression.evalSetResult() method.
        * src/jacl/tcl/lang/ExprValue.java:
        Rewrite ExprValue class so that it is a mutable value
        that can be passed around inside Jacl methods.
        * src/jacl/tcl/lang/Expression.java:
        Reimplement Jacl's expr module to use 32 bit integers
        instead of 64 bit integers in calculations. Add support
        for eq and ne string operators. Create per-interp cache
        of ExprValue objects to speed up expr processing. When
        parsing an expr, use the internal rep for integer, double,
        and boolean types instead of always reparsing from the
        string representation. Add shortcuts for common strings
        as expr values. The expr div and mod as well as other
        operators are now up to date WRT to CVS head of Tcl.
        Parsing of boolean tokens in an expr has been fixed
        and math functions have been reimplemented so that
        they accept ExprValues instead of TclObject values.
        * src/jacl/tcl/lang/FormatCmd.java (cmdProc):
        Update Util.strtoul() caller.
        * src/jacl/tcl/lang/Interp.java (strtoulResult, strtodResult):
        Add parse result object to avoid allocation for
        each parse operation.
        * src/jacl/tcl/lang/Parser.java (eval2, backslash):
        Set array member to null in case it helps gc faster,
        update caller of Util.strtoul().
        * src/jacl/tcl/lang/ScanCmd.java (cmdProc):
        Update Util.strtoul() caller.
        * src/jacl/tcl/lang/StringCmd.java (cmdProc):
        Remove pointless TclBoolean internal rep checking.
        Update calls to Expression.looksLikeInt() and
        Util.strtod().
        * src/jacl/tcl/lang/StrtodResult.java: Add support for
        updating the result of an already allocated object.
        * src/jacl/tcl/lang/StrtoulResult.java: Ditto.
        * src/jacl/tcl/lang/Util.java (strtoul, getInt, getIntForIndex,
        strtod, getDouble, findElement, getBoolean, traceProc):
        Optimize number parsing routines. Pass an already allocated
        object to strtoul and strtod so as to avoid lots of allocations.
        Support a null interp argument in getInt, getIntForIndex,
        and getDouble.
        * src/tcljava/tcl/lang/TclDouble.java (setDoubleFromAny):
        Check for double and integer objects with no string rep
        and create a string rep for them if needed.
        * src/tcljava/tcl/lang/TclInteger.java (setIntegerFromAny):
        Check for boolean with string rep and optimized boolean
        to integer cases.
        * src/tcljava/tcl/lang/TclObject.java (hasNoStringRep):
        Add access method to determine if object has no string rep.
        This is needed to check for edge cases when converting
        objects and during expr evaluations.
        * tests/tcl/expr.test: Add expr tests from Tcl CVS.
        * tests/tcl/string.test: Add missing string is tests.

2005-09-21  Mo DeJong  <mdejong@users.sourceforge.net>

        Add a constant boolean flag to the TclObject
        class. If enabled, each TclObject allocation,
        internal rep allocation, and internal rep
        conversion will be counted. This will provide
        a handy interactive record of the way that
        objects behave. This code will be optimized
        away when the flag is set to false.

        * src/jacl/tcl/lang/TclList.java:
        * src/tclblend/tcl/lang/CObject.java:
        * src/tclblend/tcl/lang/TclList.java:
        * src/tcljava/tcl/lang/TclBoolean.java:
        * src/tcljava/tcl/lang/TclDouble.java:
        * src/tcljava/tcl/lang/TclInteger.java:
        * src/tcljava/tcl/lang/TclObject.java:
        * src/tcljava/tcl/lang/TclString.java:

2005-09-11  Mo DeJong  <mdejong@users.sourceforge.net>

        Make NamespaceCmd.Namespace inner class a
        toplevel class in the tcl.lang package.
        The Namespace class is now part of the
        documented public API for Jacl. Add
        API docs for classes/methods that are
        only available with Jacl.

	* diffs.txt:
	* itcl/itcl/lang/BiCmds.java:
	* itcl/itcl/lang/Class.java:
	* itcl/itcl/lang/Cmds.java:
	* itcl/itcl/lang/Ensemble.java:
	* itcl/itcl/lang/ItclInt.java:
	* itcl/itcl/lang/Methods.java:
	* itcl/itcl/lang/Objects.java:
	* itcl/itcl/lang/Parse.java:
	* itcl/itcl/lang/Util.java:
	* itcl/tcl/lang/ItclAccess.java:
	* jacl/tcl/lang/CallFrame.java:
	* jacl/tcl/lang/ImportedCmdData.java:
	* jacl/tcl/lang/InfoCmd.java:
	* jacl/tcl/lang/Interp.java:
	* jacl/tcl/lang/InterpAliasCmd.java:
	* jacl/tcl/lang/InterpSlaveCmd.java:
	* jacl/tcl/lang/Namespace.java:
	* jacl/tcl/lang/NamespaceCmd.java:
	* jacl/tcl/lang/ProcCmd.java:
	* jacl/tcl/lang/Procedure.java:
	* jacl/tcl/lang/Resolver.java:
	* jacl/tcl/lang/Var.java:
	* jacl/tcl/lang/WrappedCommand.java:

2005-09-11  Mo DeJong  <mdejong@users.sourceforge.net>

	Add tcljava-post-itcl-merge tag.

2005-09-11  Mo DeJong  <mdejong@users.sourceforge.net>

        Add Itcl package for Jacl. This is a full port
        of the C version of Itcl 3.2.1 over to Java. A
        "package require Itcl" adds the itcl::class
        and other commands.

	* Makefile.in:
	* license.itcl:
	* src/itcl/itcl/lang/BiCmds.java:
	* src/itcl/itcl/lang/Class.java:
	* src/itcl/itcl/lang/Cmds.java:
	* src/itcl/itcl/lang/Ensemble.java:
	* src/itcl/itcl/lang/Itcl.java:
	* src/itcl/itcl/lang/ItclExtension.java:
	* src/itcl/itcl/lang/ItclInt.java:
	* src/itcl/itcl/lang/Linkage.java:
	* src/itcl/itcl/lang/Methods.java:
	* src/itcl/itcl/lang/Migrate.java:
	* src/itcl/itcl/lang/Objects.java:
	* src/itcl/itcl/lang/Parse.java:
	* src/itcl/itcl/lang/Util.java:
	* src/itcl/itcl/lang/library/itcl.tcl:
	* src/itcl/tcl/lang/ItclAccess.java:
	* src/jacl/tcl/lang/CallFrame.java:
	* src/jacl/tcl/lang/Interp.java:
	* src/jacl/tcl/lang/NamespaceCmd.java:
	* src/jacl/tcl/lang/ProcCmd.java:
	* src/jacl/tcl/lang/Procedure.java:
	* src/jacl/tcl/lang/Var.java:
	* src/jacl/tcl/lang/WrappedCommand.java:
	* src/tcljava/tcl/lang/TCL.java:
	* src/tcljava/tcl/lang/TclException.java:
	* tests/all.tcl:
	* tests/itcl/basic.test:
	* tests/itcl/body.test:
	* tests/itcl/chain.test:
	* tests/itcl/delete.test:
	* tests/itcl/ensemble.test:
	* tests/itcl/import.test:
	* tests/itcl/info.test:
	* tests/itcl/inherit.test:
	* tests/itcl/interp.test:
	* tests/itcl/local.test:
	* tests/itcl/methods.test:
	* tests/itcl/mkindex.test:
	* tests/itcl/namespace.test:
	* tests/itcl/protection.test:
	* tests/itcl/scope.test:

2005-09-11  Mo DeJong  <mdejong@users.sourceforge.net>

	Add tcljava-pre-itcl-merge tag.

2005-08-08  Mo DeJong  <mdejong@users.sourceforge.net>

	Add tcljava-132-branch branch and
	and tcljava-132-branchpoint tags.

2005-08-08  Mo DeJong  <mdejong@users.sourceforge.net>

	Add tcljava-132-2005-08-08 tag to mark tree
	state for the 1.3.2 release.

2005-07-28  Mo DeJong  <mdejong@users.sourceforge.net>

	* announce: Update.
	* docs/website/index.html: Update.

2005-07-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* README.jacl: Update msys description and
	mention jaclsh.bat script.
	* README.tclblend: Mention Tcl 8.4.11 and
	Thread 2.6.2 reqs. Add msys url and
	mention jtclsh.bat script.
	* docs/website/faq.html: Update FAQ.
	* docs/website/index.html: Update homepage
	info with new 1.3.2 release.
	* docs/website/mail.html: Add mail page that
	explains how the mailing lists work.

2005-07-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (initOutput):
	When initializing a channel of type "file",
	set a flag to indicate that the channel
	should be sync()'ed in addition to flushing.
	* src/jacl/tcl/lang/FlushCmd.java: Print
	IO exception stack trace, this should never
	happen but if it did sa stack trace would
	be helpful.
	* src/jacl/tcl/lang/TclOutputStream.java (setSync,
	flushChannel):
	Add flag setting method so that an output
	stream can be marked so that sync() will
	be invoked when flushing.
	* tests/tcl/SocketCmd.test: Add simple socket
	test case that writes to and reads from a socket.

2005-07-21  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/BinaryCmd.java (FormatNumber,
	ScanNumber):
	Handle edge cases when casting from a double
	to a float. Rewrite scanning code so that
	64 bit long value is used for shifting operation.
	* src/jacl/tcl/lang/InfoCmd.java:
	* src/jacl/tcl/lang/Shell.java:
	* src/jacl/tcl/lang/SubstCmd.java:
	Invoke static method via class name.
	* src/jacl/tcl/lang/Util.java (strtod): Add
	support for "NaN", "Inf", and "-Inf" strings
 	as valid double values.
	* tests/tcl/binary.test: Enable test cases
	that were not being run because they had
	the nonPortable constraint. Java supports
	only big endian primitive types so the
	binary format and scan operations can
	just assume big endian layout. Test that
	assume little endian are not run via
	addition of the littleEndian constraint.
	Add test cases for double -> float edge cases.

2005-07-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Copy new files into dist.
	* tests/tclblend/loading.test: Rework test
	so that it is only run under Win32 and
	returns the proper result.
	* win/jaclsh.bat: Removed old bat script.

2005-07-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Remove old green threads code
	for "custom" target. Tcl Blend only works
	with a native threads JVM anyway. Add new
	custom2 shell which loads a JVM at runtime
	and then loads Tcl Blend like a JVM would.
	This shell make it easier to debug weird
	loading issues in Tcl Blend.
	* src/tests/tclblend/tests/JavaEval.java:
	Make the program exit(0) when an expected
	result matches the program result. Use
	positive exit status.
	* tests/tclblend/loading.test: Use the
	expected compare test in the JavaEval
	class.
	* unix/custom2.c: Add new custom shell impl
	that loads a JVM and then loads Tcl Blend into
	the JVM.

2005-07-18  Mo DeJong  <mdejong@users.sourceforge.net>

	Fix crashes when loading Tcl Blend into an
	existing JVM by invoking Tcl_FindExecutable("java")
	to init Tcl subsystems.

	* src/native/javaCmd.c: Update comment.
	* src/native/javaInterp.c (
	Java_tcl_lang_Interp_create,
	Java_tcl_lang_Interp_init,
	Java_tcl_lang_Interp_initName): Add
	TCLBLEND_DEBUG output statements.
	Add initName() method that will init the
	Tcl executable name when Tcl Blend is loaded
	from Java.
	* src/tclblend/tcl/lang/Interp.java (shlib_load,
	initName):
	Add initName() method mentioned above and
	invoke it after loading the Tcl Blend shared lib.
	* tests/tclblend/loading.test: Update tests
	to account for executable name check. Add
	test for [info nameofexecutable] in a Tcl Blend
	interp loaded into Java.

2005-07-17  Mo DeJong  <mdejong@users.sourceforge.net>

	Add startup .bat files for Jacl and Tcl Blend.
	The bat files are auto generated by configure
	with the correct paths.

	* Makefile.in: Install and test jaclsh.bat
	and jtclsh.bat. Make sure the PATH variable
	is always set with the new directories
	prepended to the PATH. Rework tricky gdb
	invocation under Win32 since the mingw
	version of gdb does not know about mingw
	style unix paths.
	* autogen.sh: Remove autoconf generated cache.
	* configure: Regen.
	* configure.in: Quote directory names passed
	to mingw path utils to deal with spaces in paths.
	Subst native versions of paths so that we can
	generate a .bat file with win32 paths. Emit
	bat during configure on win32.
	* jaclsh.bat.in: Jacl bat template.
	* jaclsh.in: Print error if run under Cygwin.
	* jtclsh.bat.in: Tcl Blend bat template.
	* jtclsh.in: Don't set unix env vars under win32.
	* mingw_path.sh: Deal with paths that don't
	exist and other edge cases.
	* mingw_path.test: Regression tests for mingw utils.
	* mingw_paths.sh: Script to convert a set of
	path elements seperated by : into win32 path
	elements seperated by ; characters.

2005-07-16  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Place double quotes around setting of
	runtime path variable in shell_tclblend and
	test_tclblend.exec targets. This avoids an error
	when the PATH contains a directory name that has
	spaces in it under Win32.
	* configure: Regen.
	* jtclsh.in: Place double quotes around PATH value.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): Add detection for
	Sun JDK 1.3 and 1.4 JVMs. Fixup IBM JDK 1.3 detection
	so that it does not generate a false positive when
	configuring with a Sun JDK 1.4 JVM.

2005-07-14  Mo DeJong  <mdejong@users.sourceforge.net>

	Update version number to 1.3.2. Update README
	and associated files.

	* README.jacl:
	* README.tclblend:
	* announce:
	* configure:
	* configure.in:
	* new_features.txt:
	* src/pkgIndex.tcl:
	* src/jacl/tcl/lang/Interp.java:
	* src/tcljava/tcl/lang/BlendExtension.java:
	* unix/tools/vutil/current:
	* unix/tools/vutil/vsub.sh:
	* win/makefile.vc:

2005-07-14  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* configure.in: Fixup subst variable needed
	when configuring both tclblend and jacl.
	* tests/inprogress/Unicode.test: Add knownbug
	constraint to test that always fails due to
	some bug in Java unicode libs.

2005-07-13  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/StringCmd.java (cmdProc):
	Handle empty string case for string is CLASS
	subcommand.
	* tests/tcl/string.test: Add test case for
	empty string argument with string is.
	[Bug 1237950]

2005-07-13  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/CObject.java:
	Add stubbed out signatures for methods defined
	by the TclBlend version of CObject. These methods
	will never be called in Jacl.
	[Patch 875166]

2005-07-13  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Expression.java (ExprGetValue):
	Check for a subexpression that has no right hand
	operand and raise a syntax error if found.
	* tests/tcl/expr.test: Check for error condition.
	Thanks go to Jason Lohrey for this bug id and patch.
	[Bug 1071611]

2005-07-13  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Expression.java (ExprParseString):
	Fix ancient number parsing bug dealing with expr
	values. Expr should treat something that does not
	parse as an integer or double as a string. Expr
	was incorrectly raising an error for numbers that
	were out of range or did not look like integers.
	* tests/inprogress/ExprCmd.test:
	* tests/tcl/expr.test: Remove knownbug constraint
	since this number parse bug is now fixed.
	[Bug 879170]

2005-07-13  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/TclInteger.java
	(setIntegerFromAny): When converting a boolean
	to an integer, convert by reparsing the string
	rep unless the boolean has the string rep
	"0" or "1". It is possible that a valid
	integer like 10 would be converted to the
	boolean 1 and we would not want to convert
	that back to the integer 1.

2005-01-12  Mo DeJong  <mdejong@users.sourceforge.net>

	* demos/gluepkg/JarCmd.java:
	* src/jacl/tcl/lang/Interp.java:
	* src/jacl/tcl/lang/NamespaceCmd.java:
	* src/jacl/tcl/lang/PackageCmd.java:
	* src/jacl/tcl/lang/SearchId.java:
	* src/jacl/tcl/lang/Var.java:
	* src/tcljava/tcl/lang/TclClassLoader.java:
	* src/tests/jacl/tcl/lang/TestChannelCmd.java:
	Replace use of variable identifier enum with
	e since enum is a reserved word in Java 1.5.

2004-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* docs/TclJavaLib/dispose.htm: Add note to
	dispose command docs to make sure people
	know that dispose must be called from the
	same thread that created the interp.
	* src/jacl/tcl/lang/Interp.java (dispose):
	* src/tclblend/tcl/lang/Interp.java (dispose):
	Check that the Interp.dispose() method is
	being invoked from the same thread that the
	interp was created in. Users should not be
	invoking dispose in another thread and it
	crashes Tcl Blend so this error check just
	makes things easier to debug.
	[Bug 1037295]

2004-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ExecCmd.java (cmdProc):
	Add ability to exec a process in the background
	by passing the & flag to the exec command.
	[Patch 500880]

2004-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in:
	* src/tcljava/tcl/lang/JavaLoadCmd.java:
	* src/tests/tcljava/javaload/Test11Extension.java:
	* tests/tcljava/JavaLoadCmd.test:
	Add check for class dependency errors while
	creating an instance of an Extension object
	via the java::load command.
	[Patch 1016586]

2004-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Interp.java (setWorkingDir):
	Fixup error message from cd command so that
	it matches the Tcl implementation.
	[Bug 896209]

2004-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ExecCmd.java (cmdProc)
	Update exec for JDK 1.3 or newer so that
	another thread is created to read data
	from the subprocess while the first thread
	calls waitFor(). Earlier than JDK 1.3
	still does both in one thread.
	[Bug 879167]

2004-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ExecCmd.java (execWin):
	Add "windows xp" as one of the OS strings
	checked before execing the pre JDK 1.3
	version of exec.
	[Bug 879167]

2004-10-01  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Copy tests/tl.jar to build dir
	and add it to the CLASSPATH.
	* src/jacl/tcl/lang/Interp.java (convertStringCRLF,
	readScriptFromURL): Move CRLF conversion code into
	helper function so that it can be regression tested.
	* src/tclblend/tcl/lang/Interp.java (evalResource,
	readScriptFromInputStream): Remove JDK compressed jar
	hack and replace with Reader/Writer code in the
	readScriptFromInputStream helper.
	* tests/tl.jar: Add jar for test cases.
	* tests/jacl/Interp.test: Add test case for
	evalResource() in the Interp class.
	* tests/tclblend/javaInterp.test: Add test case
	for evalResource() in the Interp class.

2004-09-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (TCLJAVA_ENABLE_JACL_OR_TCLBLEND):
	When building with Jacl only, set the ac_cv_tcl_win32
	var based on the results of uname -s. This fixes
	a native path conversion code problem that was
	causing a configure problem and was causing
	`make test` to fail.
	[Bug 904653]

2004-09-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/FileChannel.java (close): Set file
	member to null after closing.
	* src/jacl/tcl/lang/Interp.java (readScriptFromFile,
	readScriptFromURL, readScriptFromInputStream, evalResource):
	Use new Tcl IO layer to filter CRLF to LF when
	sourcing data from a file. Use new ReadInputStreamChannel
	class to read and filter data from an InputStream
	either from a resource or a URL. This removes any
	attempts to use the available method to do any sort
	of non-blocking IO in the Interp class.
	* src/jacl/tcl/lang/ReadInputStreamChannel.java: Add
	new class to read data from an InputStream as a Channel.
	* tests/all.tcl: Fixup tcltest variable setting
	so that it works in Jacl.
	* tests/jacl/Interp.test: Add test cases for CRLF to LF
	conversion when sourcing a file or a URL.
	[Bug 1000176]

2004-09-28  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/TclOutputStream.java (flushChannel):
	Add explicit call to flush() the OutputStream and to
	sync() the FileDescriptor for a FileOutputStream. This
	fixes a number of test regressions under Sun JDK 1.4 (Win32).

2004-09-18  Alexander James Pasadyn  <ajpasadyn@users.sourceforge.net>

	* src/jacl/tcl/lang/InfoCmd.java (InfoHostnameCmd): Implement
	info hostname command for Jacl.
	[Patch 1017119]

2004-09-18  Alexander James Pasadyn  <ajpasadyn@users.sourceforge.net>

	* src/jacl/tcl/lang/Shell.java (main): If the main eval()
	returns TCL.ERROR or some unknown error code, exit with
	a non-zero status.
	[Patch 1021427]

2004-09-18  Alexander James Pasadyn  <ajpasadyn@users.sourceforge.net>

	* src/tcljava/tcl/lang/TCL.java: Make the TCL.NO_EVAL,
	TCL.EVAL_GLOBAL, and TCL.EVAL_DIRECT constants public
	so that they can be used outside the tcl.lang package.
	[bug 1000263]

2004-09-18  Alf Watt  <alfwatt@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_CLASSPATH): Add support
	for building Jacl under Darwin.
	[Bug 1004860]

2004-09-18  Alexander James Pasadyn  <ajpasadyn@users.sourceforge.net>

	* src/jacl/tcl/lang/library/init.tcl: Loop over
	path value list in env(TCLLIBPATH) instead of
	incorrectly assuming that it is a single value.
	[Bug 979897]

2003-09-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* README.jacl:
	* README.tclblend: Remove note claiming Jacl
	and Tcl Blend were not ready for use in a
	production system.

2003-09-09  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_CLASSPATH): Avoid using
	an existing CLASSPATH env var under msys+mingw
	since the mixing of Win32 and Unix style paths
	was causing problems. Append an existing CLASSPATH
	env var value to the detected ac_java_classpath
	instead of skipping the detection step when a
	CLASSPATH is set.

2003-09-02  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Update the tclblendDist rule
	so that win/libjvm.dll.a is included in the
	tar and zip files.

2003-08-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* docs/website/faq.html: Add entry about stubs.
	* docs/website/index.html: Add 1.3.1 release news.

2003-08-07  Mo DeJong  <mdejong@users.sourceforge.net>

	Add tcljava-131-2003-08-07 tag to mark the
	1.3.1 release.

2003-08-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Create a tmp directory and
	run install check for tclblend in this
	dir. This avoids a problem under Windows
	where the install rule crashes when a
	tclblend.dll is loaded from two different
	localtions on the file system.
	* jtclsh.in: Set the PATH env var to
	include Java and Tcl Blend shared lib locations.

2003-07-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Fix install of xputils package
	so that it works when built outside the src dir.
	* configure: Regen.
	* tcljava.m4 (TCLJAVA_CHECK_TCLSH): Fix
	the TCLSH_LOC and TCLSH paths so that the
	install rule works under Win32 in both
	regular and debug mode.

2003-07-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Parser.java: Set the
	interp result directly instead of trying
	to append to the result object since appending
	is known to not work.

2003-07-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/pkgIndex.tcl:
	* src/jacl/tcl/lang/Interp.java:
	* src/tcljava/tcl/lang/BlendExtension.java:
	* unix/tools/vutil/current:
	* win/makefile.vc: Update version numbers
	in files as a result of running `make dist`.

2003-07-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* configure.in: Update version number to 1.3.1.

2003-07-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* README.jacl:
	* README.tclblend: Update to mention that scripts
	need to be installed before running and that
	Tcl 8.4.4 is the min 8.4 version that Tcl Blend
	can be used with.

2003-07-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): If linking
	with the jvm.lib from the JDK fails, link
	with our own import lib for jvm.dll.
	* win/libjvm.dll.a: Add import lib created
	using instructions from the following URL:
	http://www.inonit.com/cygwin/jni/invocationApi/archive.html

2003-05-30  Kenneth H. Cox  <tclunit@attbi.com>

	* src/native/javaInterp.c (BTestCmd): Change
	C++ style comment to C style comment.

2003-04-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* README.tclblend: Update min version of the
	Tcl Thread package to 2.5.2. This avoids
	a configure bug in the 2.5.1 release that
	shows up when building in the srcdir.

2003-03-18  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/JavaDefineClassCmd.java (cmdProc):
	Convert each char to a byte instead of calling
	String.getBytes() which returns bytes in the
	platform's default encoding.

2003-03-17  Mo DeJong  <mdejong@users.sourceforge.net>

	Add tcljava-130-2003-03-17 tag to mark the
	1.3.0 release.

2003-03-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/tcl/get.test: Fix syntax error and
	add knownbug constraint to test that fails.
	* tests/tcljava/FuncSig.test: Comment out
	test case that depends on a feature in the
	source that was disabled.
	* tests/tcljava/JavaDefineClassCmd.test:
	Use binary translation when reading .class
	files for both Jacl and Tcl Blend. This is
	needed to fix a failing test in Jacl, as
	a result of the recent IO upgrade.

2003-03-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Revamp the dist target, updates
	are needed since lots of things about file
	layout have changed. Copy the xputils dir out
	of the src subdir when installing Tcl Blend.
	Don't bother building a .Z file via dist.
	* configure: Regen.
	* configure.in: Rework AC_OUTPUT so that only
	the needed files are emitted for a Jacl or
	Tcl Blend configure.

2003-03-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/inprogress/CallFrame.test:
	* tests/inprogress/ExprCmd.test:
	* tests/inprogress/GlobCmd.test:
	* tests/inprogress/Unicode.test:
	* tests/inprogress/Util.test:
	* tests/jacl/FileCmd.test:
	* tests/jacl/Interp.test:
	* tests/tcl/error.test:
	* tests/tcl/expr-old.test:
	* tests/tcl/expr.test:
	* tests/tcl/fileName.test:
	* tests/tcl/for.test:
	* tests/tcl/format.test:
	* tests/tcl/get.test:
	* tests/tcl/if.test:
	* tests/tcl/interp.test:
	* tests/tcl/io.test:
	* tests/tcl/ioCmd.test:
	* tests/tcl/lsearch.test:
	* tests/tcl/misc.test:
	* tests/tcl/namespace.test:
	* tests/tcl/parse.test:
	* tests/tcl/parseOld.test:
	* tests/tcl/platform.test:
	* tests/tcl/proc-old.test:
	* tests/tcl/proc.test:
	* tests/tcl/regexp.test:
	* tests/tcl/scan.test:
	* tests/tcl/security.test:
	* tests/tcl/set-old.test:
	* tests/tcl/split.test:
	* tests/tcl/string.test:
	* tests/tcl/switch.test:
	* tests/tcl/timer.test:
	* tests/tcl/upvar.test:
	* tests/tcl/utf.test:
	* tests/tcl/var.test:
	* tests/tcl/while-old.test:
	* tests/tcl/while.test: Either add a knownbug constraint
	or simply don't run any test that currently fail. This
	is needed so that folks don't see a ton of errors from
	known problems when running `make test` on the release.

2003-03-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* README.jacl:
	* README.tclblend: Add note indicating that
	1.3.0 is not a production release. Fixup
	some old links and descriptions under the
	Documentation section. Note the Tcl and
	Thread package requirements for Tcl Blend.

2003-03-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* docs/cFunctions.html:
	* docs/contents.html:
	* docs/TclJava/contents.html:
	* docs/TclJavaLib/contents.htm:
	* docs/website/download.html:
	* docs/website/faq.html:
	* docs/website/getstart.html:
	* docs/website/index.html:
	* docs/website/links.html:
	* docs/website/logo100.gif:
	* docs/website/mail.html:
	* docs/website/manual.html:
	* docs/website/matchmadeforscripting.html: Add new
	web interface that will be available via
	tcljava.sourceforge.net. Pull in content from
	previous FAQ, add new getting started page along
	with other new content.

2003-03-13  Mo DeJong  <mdejong@users.sourceforge.net>

	* extras/GuiShell/GuiShell.java (processCommand):
	Remove call to interp.updateReturnInfo() and
	check for TCL.OK. This is already handled by
	the interp.eval() method.
	* src/jacl/tcl/lang/Interp.java (eval):
	Don't create a new TclException when catching,
	just reset the completion code in case it was
	changed because TCL.RETURN was raised. This
	matches the implementation used elsewhere.
	Fixup some comments about the eval method.
	* src/jacl/tcl/lang/Shell.java (processEvent):
	Remove call to interp.updateReturnInfo() and
	check for TCL.OK. This is already handled by
	the interp.eval() method.

2003-03-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* diffs.txt: Move fblocked, fconfigure, and
	socket from the unsupported list to the
	partially supported list.
	* new_features.txt: Add note about new
	Jacl IO subsystem.

2003-03-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/FieldSig.java
	(getAccessibleFields, getAccessibleField):
	Don't return a private field as a result of
	getAccessibleFields or getAccessibleField.
	* src/tcljava/tcl/lang/FuncSig.java
	(getAccessibleConstructors, getAccessibleConstructor):
	Don't return a private constructor as a result of
	getAccessibleConstructors or getAccessibleConstructor.
	* src/tcljava/tcl/lang/reflect/PkgInvoker.java
	(isAccessible): Add isAccessible methods that
	accept a Constructor or a Field argument.
	* src/tests/tcljava/pkg1/PrivateAccess.java:
	Add test case of private access for fields
	and constructors.
	* tests/tcljava/PkgInvoker.test: Add accessibility
	checks for private methods, fields, and
	constructors in a class with a TclPkgInvoker.

2003-03-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Notifier.java (serviceEvent):
	* src/tclblend/tcl/lang/Notifier.java (serviceEvent):
	No need for extra logic that deals with the
	isProcessing field of the TclEvent class since
	the getAvailableEvent does not return a TclEvent
	that has isProcessing set to true.

2003-03-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Notifier.java (serviceEvent):
	Rework synchronization on a TclEvent inside
	serviceEvent. Now the monitor on the TclEvent
	object is only locked if the sync() method
	has been invoked on the TclEvent. This should
	speed things up since a monitor lock is no
	longer needed in the common case where the
	event is processed without a call to sync().
	* src/tclblend/tcl/lang/Notifier.java (preserve,
	release, queueEvent, deleteEvents, serviceEvent,
	getAvailableEvent): Implement TclEvent change
	to serviceEvent as described above. Undo the
	"notifierMutex" changes made on 2000-08-23,
	it is not clear why a separate object used
	as a mutex is preferable to just synchronizing
	the methods. Just make sure that the serviceEvent
	method is not synchronized since that is what
	was causing the deadlocking problem.
	* src/tcljava/tcl/lang/TclEvent.java (sync):
	Don't synchronize the entire sync() method since
	there is no need to do that when sync() is called
	from the primary thread. Instead, grab the
	monitor before calling wait.

2003-03-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Notifier.java (deleteEvents,
	deleteEvent, serviceEvent): Have the Notifier
	class implement the EventDeleter interface
	to match the event delete implementation
	used in Tcl Blend. Optimize the deleteEvents
	call by saving the just processed event in
	the servicedEvent field and checking this field
	when the Notifier is passed to deleteEvents.
	This avoids the need for a call to the deleteEvent
	method for every event in the queue.
	* src/tclblend/tcl/lang/Notifier.java (deleteEvents,
	deleteEvent, serviceEvent): Optimize the deleteEvents
	call by saving the just processed event in
	the servicedEvent field and checking this field
	when the Notifier is passed to deleteEvents.
	This avoids the need for a call to the deleteEvent
	method for every event in the queue.

2003-03-09  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Notifier.java (serviceEvent,
	getAvailableEvent, doOneEvent): Rework synchronization
	approach used by Jacl's notifier class. Don't
	synchronize the serviceEvent and doOneEvent methods,
	instead synchronize only when waiting and when
	reading or changing the queue. This lets us queue up
	a new event while another is still being processed.
	* src/tests/tcljava/tests/EventQueueLockThread.java:
	Add new test case for event queue while another
	event is being processed.
	* tests/tcljava/TclEvent.test: Add test that
	makes use of EventQueueLockThread.

2003-03-07  Mo DeJong  <mdejong@users.sourceforge.net>

	Initial port of Tcl IO layer from Tcl 8.4. This
	port implements encoding and translation features
	and buffers things based on Tcl's semantics.
	Implements correct semantics for puts, read,
	gets, seek, tell, eof, and close. Async IO
	the fileevent command, and the fcopy have
	not been implemented.

	* src/jacl/tcl/lang/Channel.java (read, write,
	close, flush, initInput, initOutput, eof,
	getInputStream, getOutputStream, setBlocking,
	setBuffering, getBufferedInput, getBufferedOutput,
	getNumBufferedInputBytes, getNumBufferedOutputBytes,
	isBlocked, inputSawCR, setEncoding, setInputTranslation,
	setOutputTranslation, getInputEofChar, setInputEofChar,
	getOutputEofChar, setOutputEofChar):
	Use the TclInputStream and TclOutputStream to
	manage IO details instead of using a Java
	Reader or Writer. Invoke methods on the input or
	output object from the identical method in the
	Channel class. The read method now returns an integer
	and expects a TclObject as an argument. Add abstract
	getInputStream and getOutputStream method that should
	be defined by a subclass.
	* src/jacl/tcl/lang/ChannelBuffer.java: Add helper
	class that is used by TclInputStream and TclOutputStream.
	* src/jacl/tcl/lang/FblockedCmd.java (cmdProc):
	Pass interp to Channel API for error checking.
	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc):
	Update -eofchar and -translation option handling to
	match Tcl impl and so test cases pass.
	* src/jacl/tcl/lang/FileChannel.java (read, write,
	flush, seek, tell, getInputStream, getOutputStream):
	Remove read, write, and flush methods since this is
	now handled in Channel. Update seek and tell
	implementations based on the new TclInputStream and
	TclOutputStream classes. Add defs for the
	getInputStream and getOutputStream abstract methods.
	* src/jacl/tcl/lang/GetsCmd.java (cmdProc): Implement
	calls to Channel class based on Tcl implementation.
	* src/jacl/tcl/lang/OpenCmd.java (cmdProc): Update
	error messages in open so they pass Tcl tests.
	* src/jacl/tcl/lang/ReadCmd.java (cmdProc): Implement
	calls to Channel class based on Tcl implementation.
	* src/jacl/tcl/lang/SeekCmd.java (cmdProc): Use
	TclIndex when processing seek options so that test
	cases pass.
	* src/jacl/tcl/lang/ServerSocketChannel.java (getInputStream,
	getOutputStream): Implement dummy methods.
	* src/jacl/tcl/lang/Shell.java (main): Invoke the
	interp.dispose() method before calling exit so that
	any remaining IO is flushed when Channels are closed.
	* src/jacl/tcl/lang/SocketChannel.java (SocketChannel,
	getInputStream, getOutputStream): Remove setting of
	reader and writer fields and implement getInputStream
	and getOutputStream instead.
	* src/jacl/tcl/lang/StdChannel.java (open, ):
	Don't set reader, instead implement getInputStream method.
	Add dummy getOutputStream implementaiton.
	* src/jacl/tcl/lang/TclInputStream.java: Implementaiton of
	input half of Tcl IO code. Supports binary input as
	well as reading encoded streams.
	* src/jacl/tcl/lang/TclOutputStream.java: Implementaiton of
	output half of Tcl IO code. Supports binary output as
	well as writing encoded streams.
	* src/tcljava/tcl/lang/TclString.java (append, empty):
	Add an append method that acepts a char[] and a new empty
	method that will ensure that the internal rep is an
	empty StringBuffer. These features are used by the Jacl
	IO system only.
	* src/tests/jacl/tcl/lang/TestChannelCmd.java (cmdProc):
	Update calls to Channel APIs like isBlocked,
	getNumBufferedInputBytes, and getNumBufferedOutputBytes.
	* tests/tcltest.tcl: Add the testConstraint method since
	it is used in io.test and ioCmd.test.
	* tests/inprogress/Unicode.test: Add a couple of test
	cases for Java encodings. The JVM's I have tested don't
	seem to support encodings very well, so these tests
	will likely fail.
	* tests/tcl/FileCmd.test: Invoke fconfigure correctly,
	this buggy code was inside a catch.
	* tests/tcl/io.test:
	* tests/tcl/ioCmd.test: Add IO test scripts from Tcl
	CVS as of today. Most pass, some still fail because
	of minor bugs.

2003-03-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/TclByteArray.java (setLength):
	Remove TclException from method throws section since
	the methods never throw a TclException. Call the
	invalidateStringRep method from setLength so that
	a modified array will be reflected in the string rep.

2003-03-06  Bruce Johnson  <bruce_johnson@merck.com>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/FileChannel.java (open):
	Add logic to handle EXCL and TRUNC options.
	* src/jacl/tcl/lang/OpenCmd.java (cmdProc):
	Add proc essing of access flags, the
	RDONLY, WRONLY, RDWR, APPEND, CREAT, EXCL,
	and TRUNC options are now processed correctly.
	* src/jacl/tcl/lang/TclIO.java: Add the
	EXCL and TRUNC values.

2003-03-05  Tom Poindexter  <tpoindex@nyx.net>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Interp.java (eventuallyDispose):
	* src/jacl/tcl/lang/StdChannel.java (close): Invoke
	the close() method for any remaining channel
	when the interp is being disposed of. The close
	method in the StdChannel class will invoke flush
	one final time for stdout in case there was output
	that had not yet been flushed.

2003-03-05  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/StdChannel.java (open, write):
	Avoid wrapping a buffered IO object around the
	stdio and stderr streams since this was causing
	problems where stdout was not being flushed.
	Instead, explicitly handle flushing in the
	write method.

2003-02-14  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Build a jar file named hello.jar
	for use in test that loads class file out of
	a jar. Also copy new directory to dist file.
	* src/tcljava/tcl/lang/TclClassLoader.java
	(getClassFromPath): Use '/' character instead of
	File.separatorChar as the separator when constructing
	a class file name to be searched for in the .jar
	file. A jar file always uses '/' as the separator.
	* src/tests/tcljava/hello/SayHello.java: Add test
	source code.
	* tests/tcljava/JavaCallCmd.test: Add test
	case that loads a class file out of a jar
	on the TCL_CLASSPATH.
	[Bug 225612]

2003-02-06  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/IfCmd.java (cmdProc):
	Add additional info to errorInfo to match
	Tcl 8.3 implementation.
	* tests/tcl/expr.test:
	* tests/tcl/if.test: Update test cases to
	match Jacl implementation.

2003-02-06  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/tcl/incr-old.test:
	* tests/tcl/incr.test: Update incr test cases
	to match Jacl implementation. Add tests cases
	from Tcl 8.4 impl.

2003-02-05  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/interp.test: Don't include load command
	in list of hidden commands for Jacl.
	* tests/set-old.test: Run test cases that depend
	on hash order through lsort so that the tests
	pass under Jacl.

2003-02-05  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Parser.java (eval2): When
	invoking logCommandInfo while processing a
	nested command, check for a close bracket
	terminator in addition to a normal end of
	command terminator. This allows a regression
	test that was failing to pass.

2003-02-05  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ParseAdaptor.java (parseNestedCmd):
	Raise missing close-bracket exception for easy error case.
	* src/jacl/tcl/lang/Parser.java (parseCommand):
	Raise "missing close-bracket" exception when parser
	finds a nested command that is not terminated by
	a close bracket. This allows a couple of failing test
	cases to pass.

2003-02-03  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/tcl/error.test:
	* tests/tcl/expr.test:
	* tests/tcl/for.test:
	* tests/tcl/if.test:
	* tests/tcl/incr.test:
	* tests/tcl/while.test: Change expected result
	of tests that examine the errorInfo variable
	after an error is raised. The message
	"while compiling" has been changed to "while executing"
	to match the Jacl implementation. Jacl does not
	have a bytecode compiler, so it can't match the
	errorInfo messages of Tcl 8.X. This change allows
	a number of test cases to pass.

2003-02-03  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Expression.java (ExprGetValue):
	Throw a plain syntax error when unmatched
	parens or a bad ?: operator is encountered.
	This is less descriptive but matches the Tcl
	8.3 implementation.

2003-02-03  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Expression.java (ExprGetValue,
	mathFunction): Return null from ExprGetValue when
	a CLOSE_PAREN is found and check for this special
	case so that the proper error message is returned.

2003-02-03  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Parser.java (eval2): Check to
	see if the character just before the end of the
	returned script is a terminator and don't include
	it in the error message if it is. This fixes
	a test case in error.test.

2003-02-02  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ClockCmd.java (GetDate):
	Work around bug in JDK's Calendar implementation
	by adding whole days instead of a days worth
	of seconds. This allows the two failing test
	cases in clock.test to pass, these tests dealt
	with daylight savings time issues.

2003-02-02  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/FileCmd.java (copyRenameOneFile):
	Check for case where a directory cannot be renamed
	because the target dir contains a file. Raise
	a EEXIST error in this case. This gets a number
	of test cases in tests/jacl/FileCmd.test to pass.

2003-02-01  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/FileCmd.java (cmdProc):
	Add unimplemented command stubs for channels,
	link, normalize, separator, and system
	subcommands.
	* src/jacl/tcl/lang/FileUtil.java (doTildeSubst):
	Search for env(HOME) in the global variable table.
	* tests/defs: Add testchmod implementation for UNIX.
	* tests/jacl/FileCmd.test: Rework tests to match
	Tcl 8.4 and current Jacl implementation.

2003-02-01  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/tclblend/loading.test: Rework a couple
	of tests to make errors showing up under JDK 1.4
	more clear. Remove core file if there is one.

2003-01-31  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/FormatCmd.java (cmdProc, cvtStrToStr):
	Fixup failing format test cases that had to do with
	padding with zeros and negative width values.

2003-01-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/tclblend/loading.test: Add unimplemented
	constraint so that loading-2.3 is not run.

2003-01-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* README.jacl: Document shared UNIX/Windows
	build for Jacl.
	* README.tclblend: Document shared UNIX/Windows
	build for Tcl Blend.
	* new_features.txt: Added note about new
	Windows build system.
	* unix/README.jacl: Removed.
	* unix/README.tclblend: Removed.
	* win/README.jacl: Removed.
	* win/README.tclblend: Removed.

2003-01-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* bsjavac.sh: Add script that works around path
	separator issues under Win32.
	* configure: Regen.
	* tcljava.m4 (AC_PROG_JAVAC, AC_JAVA_JNI_LIBS,
	TCLJAVA_CHECK_TCLSH): Add support for JDK 1.1
	when building under mingw. This meant adding a
	special workaround to deal with path separator
	bugs in that version of javac. Also set the
	TCL_LIBRARY env var when running tclsh.
	* src/tclblend/tcl/lang/CObject.java: Don't
	make objPtr final to work around bug in
	brain dead jdk 1.1 compiler.

2003-01-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Use TOP_DIR_NATIVE instead of
	TOP_DIR in build rules that require a Win32
	style path instead of a unix style path.

2003-01-21  Mo DeJong  <mdejong@users.sourceforge.net>

	Add initial and incomplete mingw build support.

	* Makefile.in: Add _NATIVE versions of paths
	that have to be in Win32 native format. Add
	TCL_DEFS to compile line to avoid compiler
	warnings under Mingw. Add PATH to the list
	of variables that gets modified when running
	the shell or test targets. Add jni_example.clean
	to cleanup after recent change.
	* configure: Regen.
	* configure.in: Subst TCL_DEFS and TCL_BIN_TCLSH
	into Makefile. Subst *_NATIVE variables after
	running them through mingw_path.sh.
	* mingw_path.sh: Add new helper file that
	converts a mingw path to a win32 path.
	* tcljava.m4 (AC_JAVA_JNI_LIBS, TCLJAVA_WITH_TCL,
	TCLJAVA_CHECK_TCLSH):
	Detect IBM JDK 1.3 for win32. Make sure libs
	appear after the source file in JVM link test.
	When loading tclConfig.sh, check for win32
	specific defines and add any missing variables.
	Add mingw flags to build commands under win32.
	Check for win32 name for tclsh if unix style
	name is not found.
	* src/native/java.h: Add mingw build support.
	* unix/custom.c: Fixup define checks so that
	custom can be compiled with JDK 1.2 or newer.

2003-01-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Split creation of JNI_example
	shared lib into a compile an link step to
	match the makefile.vc impl of same.
	* win/makefile.vc: Add \ to output dir
	name, hard code dll name. This fixes a
	minor build problem with last checkin.

2003-01-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Add jni_example target, this
	provides a very simple test case to ensure
	that the JVM can load a generated shared lib.
	* extras/JNI_example/JNI_example.c: New file
	* extras/JNI_example/JNI_example.java: New file.
	* src/xputils/iload.test: Fixup some test case
	results to match the current implementation
	which passes a DEFAULT token.
	* win/makefile.vc: Fixup support for building
	in a build dir that is not tcljava/win.
	Add jni_example target.

2003-01-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaCmd.c (Tclblend_Init): Add
	additional TCLBLEND_DEBUG output.
	If an exception is raised during the Interp
	constructor, check to see if it is an
	UnsatisfiedLinkError return a more
	useful error message to Tcl. The old error
	message "java.lang.UnsatisfiedLinkError: init"
	was not very illuminating. Don't propagate
	a Java exception since Tclblend_Init is
	only every invoked by Tcl.
	* src/tclblend/tcl/lang/Interp.java (shlib_load):
	Add a new shlib_load method instead of attempting
	to load the Tcl Blend shared library in the
	static initializer for the class. This new
	approach provides a way for us to catch and
	propagate an exception during loading of the
	shared library back to the caller.

2003-01-11  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/TclNumArgsException.java
	(TclNumArgsException): Use a StringBuffer instead
	of allocating a string over and over again.

2003-01-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_CLASSPATH): Look for
	.../jre/lib/core.jar to support IBM JDK 1.4.

2003-01-09  Mo DeJong  <mdejong@users.sourceforge.net>

	* new_features.txt: Mention array unset addition.
	* src/jacl/tcl/lang/ArrayCmd.java (cmdProc):
	Add array unset subcommand.

2003-01-09  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/TclIndex.java (get): Don't
	add a comma to the error message when there are
	only two items. This matches the Tcl 8.3 impl.
	* tests/tcljava/JavaInfoCmd.test: Update
	error messages to account for TclIndex change.

2003-01-09  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Parser.java (parseCommand,
	commandComplete):
	The info complete subcommand now passes all
	the Tcl regression tests. [Bug 223973]

2003-01-08  Mo DeJong  <mdejong@users.sourceforge.net>

	Re-implement ref counting system for Jacl to
	more closely match to C implementation.
	Deprecate TclObject.takeExclusive() method and
	replace it with new TclObject.duplicate() method.

	* diffs.txt: Remove takeExclusive, add duplicate.
	* new_features.txt: Mention new TclObject.duplicate()
	method and when it should be used.
	* docs/cFunctions.html: Add Tcl_DuplicateObj entry.
	* docs/TclJavaLib/TclObject.htm: Doc duplicate
	and remove docs for takeExclusive method. Add
	example of how to use the duplicate method.
	* src/jacl/tcl/lang/Expression.java (ExprLex):
	Invoke release() when done with a ParseResult.
	* src/jacl/tcl/lang/Interp.java (Interp, setResult,
	resetResult, appendElement):
	Preserve the m_nullResult twice so that it is
	actually shared. This bug did not show up
	before because objects were being copied
	every time instead of when shared.
	When setting a result, don't decrement or
	increment the ref count of the m_nullResult.
	Check for illegal decrement of m_nullResult.
	Replace use of takeExclusive with duplicate.
	* src/jacl/tcl/lang/LappendCmd.java (cmdProc):
	Replace use of takeExclusive with duplicate.
	* src/jacl/tcl/lang/LinsertCmd.java (cmdProc):
	Replace use of takeExclusive with duplicate.
	* src/jacl/tcl/lang/LreplaceCmd.java (cmdProc):
	Replace use of takeExclusive with duplicate.
	* src/jacl/tcl/lang/LsortCmd.java (cmdProc):
	Replace use of takeExclusive with duplicate.
	* src/jacl/tcl/lang/ParseAdaptor.java (parseBraces):
	Invoke string constructor so ref count is incremented.
	* src/jacl/tcl/lang/ParseResult.java (ParseResult,
	release): Increment ref count of value unless
	called with a TclObject argument. Add release
	method that will let go of held ref.
	* src/jacl/tcl/lang/Parser.java (evalTokens, parseVar):
	Replace use of takeExclusive with duplicate.
	Don't release the result of evalTokens call
	since the ParseResult depends on it.
	* src/jacl/tcl/lang/SubstCmd.java (cmdProc): Call
	release after we are finished with a ParseResult.
	Increment TclObject ref count before passing it
	to the ParseResult constructor.
	* src/jacl/tcl/lang/TclList.java (duplicate, append,
	replace): Don't invoke takeExclusive for objects
	that are being added to a list. This makes it
	possible to create a list that holds a ref to
	itself, but the C version of Tcl also has this
	problem. This should significantly reduce
	memory use in Jacl since we will not need to
	copy every object that is added to a TclList.
	* src/jacl/tcl/lang/Var.java (setVar, incrVar):
	Remove ugly workarounds and hacks that were
	needed since the takeExclusive API is so broken.
	Invoke isShared and duplicate methods instead,
	the code now matches the Tcl core implementation.
	* src/tcljava/tcl/lang/TclObject.java (duplicate,
	takeExclusive): Add new duplicate method and
	deprecate the takeExclusive method.
	* src/tests/jacl/tcl/lang/TestEmptyResultCmd.java:
	Add new test case implementation.
	* src/tests/jacl/tcl/lang/TestParsevarCmd.java:
	Release ParseResult when done with it.
	* src/tests/tclblend/tcl/lang/IntListAppendCmd.java:
	Replace takeExclusive call with duplicate.
	* src/tests/tcljava/tests/ListReplaceCmd.java:
	Replace takeExclusive call with duplicate.
	* tests/inprogress/BgErrorMgr.test:
	Modify test case so that it matches current
	implementation. This test case depending on
	the old behavior of a list append that
	appended a copy instead of the real object.
	* tests/jacl/refCount.test: Add a series of
	m_nullResult and parser ref count tests.

2003-01-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/CallFrame.java (dispose):
	Clear out the var hashtable before setting it
	to null. This does not change the functionality.
	* src/jacl/tcl/lang/Interp.java (setResult):
	Optimize the case where the interp result is set
	to the same object as the current result.
	* src/jacl/tcl/lang/Parser.java: Minor doc
	improvement, no code changes.
	* src/jacl/tcl/lang/TclList.java (append,
	insert, replace):
	* src/tclblend/tcl/lang/TclList.java (append,
	replace): Raise a specific error if a method
	is incorrectly called with a shared object.

2003-01-01  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_CLASSPATH): Add additional
	message to log file to indicate that an existing
	CLASSPATH env var is being used.
	* tests/tcljava/JavaInvoke.test: Test the
	JavaInvoke.isAssignable method.
	* tests/tcljava/PkgInvoker.test: Test the
	usesDefaultInvoker and isAccessible methods.

2002-12-31  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/FuncSig.java (matchSignature):
	Move assignment checks into JavaInvoke.isAssignable().
	* src/tcljava/tcl/lang/JavaInvoke.java (convertTclObject,
	isAssignable):
	Query the class of an object passed to convertTclObject
	and use it to ensure that a Java object is assignable.
	Add isAssignable method for use in this class and FuncSig.
	* tests/tcljava/JavaInvoke.test: Move failing test
	invoke-9.18 down to the convertTclObject section.
	Add tests to check that Java argument objects
	can be assigned to the argument types of the method.
	Also check that null cannot be assigned to a
	primitive argument type.

2002-12-31  Mo DeJong  <mdejong@users.sourceforge.net>

	* new_features.txt: Add note about TclObject passing.
	* src/tcljava/tcl/lang/JavaInvoke.java (convertTclObject):
	Add support for passing a TclObject directly to a
	Java method. If the TclObject contains a ReflectObject
	that contains a TclObject, then the TclObject inside
	the ReflectObject is passed for backwards compatibility.
	* src/tests/tcljava/tests/signature/PassTclObject.java:
	Add helper class for test cases.
	* tests/tcljava/JavaInvoke.test:
	Test implementation of convertTclObject as it applies
	to passing of a TclObject.

2002-12-31  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaInterp.c (
	Java_tcl_lang_Interp_evalNative,
	Java_tcl_lang_Interp_evalString,
	Java_tcl_lang_Interp_evalTclObject):
	Rename evalNative to evalString.
	Add evalTclObject method to support
	direct evaluation of a Tcl_Obj*
	wrapped in a TclObject. This significantly
	speeds up Java commands that call eval
	with a TclObject argument because the
	data does not need to be copied into
	Java and then back into Tcl.
	* src/tclblend/tcl/lang/Interp.java (evalNative,
	evalString, evalTclObject, eval):
	Invoke new evalTclObject method from
	eval call that takes a TclObject argument.

2002-12-31  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/empty/empty.jar: Regen.
	* src/empty/tcl/lang/CObject.java (getCObjectPtr):
	Add method decl.
	* src/native/java.h: Remove getInternalRep method
	and add getCObjectPtr and getCObjectInst. Remove
	objPtr field since we get that with getCObjectPtr.
	* src/native/javaCmd.c (JavaSetupJava): Init
	getCObjectPtr and getCObjectInst methods, remove
	getInternalRep and objPtr.
	* src/native/javaObj.c (JavaGetTclObj, JavaBreakRef):
	Call getCObjectPtr or getCObjectInst instead of calling
	getInternalRep and then calling instanceof. This
	implementation should be more efficient since it
	replaces multiple JNI calls with a single one.
	* src/tclblend/tcl/lang/CObject.java (getCObjectPtr):
	Add method to return the objPtr member.
	* src/tcljava/tcl/lang/TclObject.java (getCObjectPtr,
	getCObjectInst): Add method to return the Tcl_Obj*
	with a single JNI call. Add method to do instanceof
	checks in a Java method instead of with multiple
	JNI calls.
	* tests/tclblend/javaObj.test: Add additional
	JavaBreakRef test.

2002-12-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (TCLJAVA_WITH_TCL): Add TCL_CFLAGS_DEBUG
	or TCL_CFLAGS_OPTIMIZE to the CFLAGS that appear in
	the Makefile.

2002-12-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaInterp.c (JavaCmdProc):
	Scan the Tcl_Obj array passed into JavaCmdProc,
	if the same Tcl_Obj is passed more than once,
	don't try to convert it to a TclObject again.
	* src/tests/tcljava/tests/SameArgumentObjectsCmd.java:
	* tests/tcljava/JavaCmd.test: Add test case
	for duplicated arguments on the command line.

2002-12-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/java.h: Add JavaObjType decl.
	* src/native/javaInterp.c (BTestCmd): Add
	btest type subcommand, used for testing.
	* src/native/javaObj.c (Java_tcl_lang_CObject_makeRef):
	When the makeRef function is called with a command
	internal rep that does not have a ptr2 jobject ref,
	just set the ref without freeing the internal
	rep or changing the typePtr.
	* src/tcljava/tcl/lang/ReflectObject.java (cmdProc):
	Pass argv[0] as the second argument to JavaInvoke.callMethod().
	I think this was not done earlier because of bugs in the
	ref counting implementation. This change combined with
	the fix in makeRef allow for the conversion from an
	unknown object to a command with a jobject ref.
	* src/tests/tclblend/tcl/lang/IntNullConvertCmd.java:
	Add test case for possible bug in CObject.makeRef().
	* tests/tclblend/javaInterp.test: Add llength
	call to free internal rep of object that was
	turned into a cmd+ref type.
	* tests/tclblend/javaObj.test: Add tests for conversion
	from an unknown type to a cmd+ref type via a call
	to ReflectObject.cmdProc().
	* tests/tclblend/refCount.test: Add llength
	call to free internal rep of object that was
	turned into a cmd+ref type.

2002-12-30  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/JavaTryCmd.java (cmdProc, eval):
	Rewrite java::try command to take advantage of the
	fact that exceptions are now propagated by Tcl Blend.
	There is no longer any reason to query the value
	of errorCode, since we can catch an exception directly.
	Add support for catching a RuntimeException raised
	in a Java command proc. An Java exception raised in a
	method invoked via the invocation API would already
	be wrapped in a ReflectException object.
	* src/tcljava/tcl/lang/ReflectException.java (cmdProc,
	getThrowable): Add a new getThrowable method for
	use by the java::try command. This method lets us
	query the Throwable object passed to a ReflectException
	without having to deal with the errorCode variable.
	Raise an exception if a TclException is passed to
	the ReflectException constructor, since a ReflectException
	should only be used for wrapped Java exceptions.
	* src/tests/tcljava/tests/RuntimeExceptionCmd.java:
	Add test case that raises a RuntimeException in the
	body of a Java cmdProc.
	* tests/tcljava/JavaTryCmd.test: Add new test cases
	for exceptional conditions in catch and finally
	blocks. These tests exercise the new java::try
	command implementation.

2002-12-29  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tclblend/tcl/lang/Interp.java (callCommand):
	Fix stupid typo from last checkin.
	* src/tcljava/tcl/lang/JavaInvoke.java (call):
	Implement a shortcut when catching a TclException
	raised in an invoked Java method. Instead of
	wrapping it in a ReflectException, just throw it
	after resetting the interp result.
	* src/tcljava/tcl/lang/JavaThrowCmd.java (cmdProc):
	Implement same shortcut for thrown TclException.
	* src/tests/tcljava/tests/JavaTest.java (throwTclException):
	* tests/tcljava/JavaCallCmd.test:
	* tests/tcljava/JavaThrowCmd.test:
	Test TclException vs ReflectException shortcut.

2002-12-29  Mo DeJong  <mdejong@users.sourceforge.net>

	Overhaul exception handling and propagation
	in TclBlend. An exception raised during a
	Java command will now be propagated up
	to an Interp.eval() call. All other Tcl
	callable method should now panic if called
	with a pending JNI exception.

	* src/native/java.h: Add TclException.getCompletionCode()
	to method cache.
	* src/native/javaCmd.c (Tclblend_Init, JavaInterpDeleted,
	FreeJavaCache):
	Check for a pending Java exception when entering a
	method from Tcl. Check for exception after calling
	Interp.dispose(). Add getCompletionCode method.
	* src/native/javaIdle.c (JavaIdleProc):
	Check for a pending Java exception when entering a
	method from Tcl.
	* src/native/javaInterp.c (eval, evalNative, JavaTraceProc,
	JavaCmdDeleteProc, JavaCmdProc, BTestCmd): Rename eval
	to evalNative to match change in Java code.
	Check that there are no pending exceptions when entering
	a method from Tcl. Check for exceptions after JNI
	method calls. Get return value for JavaCmdProc from
	a thrown TclException. Add comp code test to btest.
	* src/native/javaNotifier.c (JavaEventProc): Check for a
	pending Java exception when entering a method from Tcl.
	Check for exception after JNI method call.
	* src/native/javaObj.c (DupTclObject, FreeTclObject,
	UpdateTclObject, JavaGetTclObj, JavaGetTclObject):
	Check for a pending Java exception when entering a
	method from Tcl. Rethrow the exception in some functions
	to deal with the case where a wrapped TclObject internal
	rep is freed while the stack is unwinding.
	Check for exception after JNI method call.
	* src/native/javaTimer.c (JavaTimerProc):
	Check for a pending Java exception when entering a
	method from Tcl.
	* src/tclblend/tcl/lang/Interp.java (eval, evalNative,
	callCommand): Use new propagateException flag in
	callCommand to determine if an exception should be
	handled or propagated up to an Interp.eval() call.
	This fix combined with the exception handle and
	re-throw changes in javaObj.c fix a long standing
	bug where exceptions never made it back up the
	stack to an eval().
	* src/tests/tcljava/tcl/lang/JtestCmd.java:
	* tests/tclblend/javaInterp.test: Add getCompletionCode()
	tests for callCommand from Java and C.

2002-12-29  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/ReflectObject.java (dispose):
	Don't attempt to delete the command from the
	interpreter if the interp was already deleted.
	* tests/tclblend/javaObj.test: Add test case that
	tries to delete a ReflectObject after the interp
	has been deleted. Modify existing test so that
	it does not trigger the same error.

2002-12-29  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/ArrayObject.java (initArray):
	Generate TclException instead of ReflectException.
	* src/tcljava/tcl/lang/JavaDefineClassCmd.java (cmdProc):
	Remove pointless wrapping of Exception in ReflectException.
	* tests/tcljava/ArrayObject.test: Update error message.

2002-12-28  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tclblend/tcl/lang/Interp.java (callCommand):
	If a RuntimeException is encountered during
	execution of a Tcl command implemented in Java,
	set the interp result to the stack trace and
	continue to propagate the exception.
	* src/tcljava/tcl/lang/JavaInvoke.java (call,
	getsetField, getProperty, setProperty):
	Don't blindly catch all exceptions, instead
	catch InvocationTargetException and wrap it
	in a ReflectException when executing a method
	via the reflection interface.

2002-12-28  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/ReflectException.java
	(ReflectException): Set the interp result to
	the exception message instead of the result
	of a toString() call when wrapping a TclException.
	* tests/inprogress/CallFrame.test:
	* tests/inprogress/EventAdaptor.test:
	* tests/tclblend/javaInterp.test:
	* tests/tclblend/javaUtil.test:
	* tests/tcljava/FuncSig.test:
	* tests/tcljava/JavaInvoke.test:
	* tests/tcljava/JavaNewCmd.test:
	* tests/tcljava/PkgInvoker.test: Update error
	messages so that they do not include
	"tcl.lang.TclException: " before the
	actual error message.

2002-12-28  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/java.h:
	* src/native/javaCmd.c (FreeJavaCache, JavaSetupJava,
	AddToClassCache, AddToMethodCache, AddToFieldCache):
	Remove unused Void and voidTYPE classes from the cache.
	Don't set a thread local exit handler unless the
	cache was initialized properly. Don't call the ToString()
	method since the cache was not yet initialized.

2002-12-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/JavaInvoke.java (getsetField):
	Check to see is a field is final before setting it.
	Add previous exception error message when creating
	an unexpected exception.
	* tests/tcljava/JavaFieldCmd.test: Test for error
	on attempt to set a final field.

2002-12-27  Mo DeJong  <mdejong@users.sourceforge.net>

	* new_features.txt: Add note about accessibility
	checks for reflected objects.
	* DOS/TclJava/JavaCastCmd.html:
	* docs/TclJava/JavaFieldCmd.html:
	* docs/TclJava/JavaImportCmd.html:
	* docs/TclJava/JavaInfoCmd.html:
	* docs/TclJava/JavaInstanceOfCmd.html:
	* docs/TclJava/JavaNewCmd.html:
	* docs/TclJava/JavaPackage.html:
	Use the term "accessible" instead of "public" when
	talking about Java objects we can reflect. Add
	a couple of additional examples. Add note about
	loading into Java to Java package section.
	* src/tcljava/tcl/lang/FieldSig.java (get):
	Add accessibility check.
	* src/tcljava/tcl/lang/FuncSig.java (get):
	Add accessibility check.
	Add abstract class check.
	* src/tcljava/tcl/lang/JavaCastCmd.java (cmdProc):
	Add accessibility check.
	* src/tcljava/tcl/lang/JavaImportCmd.java (cmdProc):
	* src/tcljava/tcl/lang/JavaInfoCmd.java (cmdProc):
	Add accessibility checks to the events, fields,
	methods, constructors, and properties methods.
	* src/tcljava/tcl/lang/JavaInstanceofCmd.java (cmdProc):
	Add accessibility check.
	* src/tcljava/tcl/lang/JavaInvoke.java (callMethod,
	callStaticMethod, call, getsetField, getProperty,
	setProperty): Catch known exceptions that should
	not occur and raise a TclRuntimeError if they do.
	Add accessibility checks so that a method with a
	return type that cannot be reflected is not invoked.
	Add accessibility check so that a field with
	an inaccessible type will not be reflected.
	* src/tcljava/tcl/lang/JavaNewCmd.java (cmdProc,
	ArraySig, get): Rename componentType member to arrayType.
	Add accessibility check.
	Rewrite poor use of String class.
	* src/tcljava/tcl/lang/JavaTryCmd.java: Fix typo.
	* src/tcljava/tcl/lang/ReflectObject.java (makeReflectObject):
	Add accessibility check.
	* src/tcljava/tcl/lang/reflect/PkgInvoker.java (isAccessible):
	Add method to check accessibility of a Class.
	* src/tests/tcljava/tests/invoke/PublicTester.java (getNonPublicTester,
	getCNonPublicTester, getNonPublicTesterI, nptf): Add methods
	and fields to test inaccessible type errors.
	* src/tests/tcljava/tests/signature/MethodFailure1.java:
	* src/tests/tcljava/tests/signature/MethodFailure2.java:
	* src/tests/tcljava/tests/signature/MethodFailure3.java:
	* src/tests/tcljava/tests/signature/MethodFailure4.java:
	* src/tests/tcljava/tests/signature/MethodInvoker4.java:
	* src/tests/tcljava/tests/signature/MethodInvoker5.java:
	* src/tests/tcljava/tests/signature/MethodInvoker6.java:
	Mark those inner classes that will be reflected inside
	the interpreter as public instead of private to account
	for accessibility changes.
	* tests/tcljava/FuncSig.test: Update test FuncSig-2.5
	to account for changes in PublicTester.java.
	Cast to interface in FuncSig-3.3, this is what the original
	test should have done since reflecting an inaccessible
	type is not really correct. Add abstract class test.
	* tests/tcljava/JavaNewCmd.test: Change componentType to
	arrayType in test case.
	* tests/tcljava/PkgInvoker.test: Add a series of tests
	for inaccessible class errors. Test that casting to
	an accessible protected class works as expected.

2002-12-26  Mo DeJong  <mdejong@users.sourceforge.net>

	* docs/TclJava/JavaCallCmd.html: Use the
	term accessible instead of public to describe
	which methods can be invoked.
	* docs/TclJava/JavaObjCmd.html: Use the
	term accessible instead of public to describe
	which methods can be invoked. Explicitly
	mention that invoking static methods via
	an instance handle is not supported.
	* src/tcljava/tcl/lang/ArrayObject.java (cmdProc):
	Add additional static flag to FuncSig.get() call.
	* src/tcljava/tcl/lang/FuncSig.java (get,
	lookupMethod, matchSignature,
	getAccessibleMethods, getAccessibleInstanceMethods,
	getAccessibleStaticMethods, mergeMethods,
	mergeInstanceMethods):
	Create seperate static and instance cache for
	accessible methods. Add additional static flag
	to get() so that search is confined to static
	methods. Pass this flag down to lookupMethod
	and matchSignature. Add the word static to
	the error message printed when searching for
	a static Method fails.
	Add new getAccessibleStaticMethods and
	getAccessibleInstanceMethods methods to
	implement seperating out the static and
	instance method lookup tables.
	Rename mergeMethods to mergeInstanceMethods
	and avoid merging static or inaccessible
	methods.
	* src/tcljava/tcl/lang/JavaInfoCmd.java (getFieldInfoList,
	getMethodInfoList):
	Don't check for SecurityException, we don't do it
	other places and the code should be able to deal
	with a Java error. Use the -static flag to limit
	the search to static or instance methods in
	getMethodInfoList.
	* src/tcljava/tcl/lang/JavaInvoke.java (newInstance,
	callMethod, callStaticMethod): Pass additional
	static flag to FuncSig.get().
	* src/tcljava/tcl/lang/UnsupportedJDetachCallCmd.java:
	Search for static and then instance method.
	* src/tcljava/tcl/lang/reflect/PkgInvoker.java (isAccessible):
	Add method to check accessibility of a Method.
	* tests/tcljava/FuncSig.test: Pass additional
	static flag to FuncSig.get().
	* tests/tcljava/FuncSig.test: Update signature tests
	to account for new getAccessibleInstanceMethods and
	getAccessibleStaticMethods methods.
	* tests/tcljava/JavaCallCmd.test: Update error
	message for a non-static method via java::call.
	* tests/tcljava/JavaInfoCmd.test: Fix java::info
	test cases, static methods are not inherited or
	overloaded.
	* tests/tcljava/JavaInvoke.test: Fixup error
	message and useless quoting.

2002-12-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/tcljava/JavaThrowCmd.test: Update test
	JavaThrowCmd-1.3 to account for new Exception
	constructors in JDK 1.4.

2002-12-24  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaInterp.c (Java_tcl_lang_Interp_setResult,
	Java_tcl_lang_Interp_setResult__Ltcl_lang_TclObject_2,
	Java_tcl_lang_Interp_setResult__I,
	Java_tcl_lang_Interp_setResult__Z): Add native
	implementations of the setResult(boolean) and
	setResult(int) methods of the Interp class.
	This optimization makes a setResult with an
	int or boolean argument about 4X faster.
	* src/tclblend/tcl/lang/Interp.java (setResult):
	Declare 2 addition native versions of setResult
	instead of creating a wrapper TclObject.
	* src/tests/tclblend/tests/SetInterpResultCmd.java:
	Add test case for Interp.setResult().
	* src/tests/tcljava/tcl/lang/JtestCmd.java:
	Use setResult(boolean) directly instead of
	wasteful call to setResult(TclObject) with
	a TclBoolean object result.
	* tests/tclblend/javaInterp.test:
	Add test cases for Interp.setResult(), the
	only user visible change is the internal rep
	of an interp result.

2002-12-24  Mo DeJong  <mdejong@users.sourceforge.net>

	* docs/TclJava/JavaFieldCmd.html: Make the doc
	more clear WRT shadowed fields in a superclass.

2002-12-24  Mo DeJong  <mdejong@users.sourceforge.net>

	* README.jacl:
	* README.tclblend:
	* unix/README.tclblend:
	* win/README.tclblend: Rework help section, mention
	SourceForge mailing lists instead of focusing
	on comp.lang.tcl. Note that Tcl 8.3.2 or newer
	is needed for Tcl Blend.

2002-12-24  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/defs: Move conditional define of
	testgetplatform so it works with Jacl or
	Tcl Blend.
	* tests/tcljava/JavaDefineClassCmd.test:
	* tests/tcljava/JavaLoadCmd.test: Fixup
	test directory name to account for changes
	on 2002-04-11.

2002-12-24  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaObj.c (FreeTclObject, SetJavaCmdFromAny):
	Convert both a tclObjectType and a cmdTypePtr that
	holds a TclObject into a command internal rep
	with the same method. The previous implementation
	incremented the ref count and created a new JNI
	global ref for no apparent reason. Set the TclObject
	pointer to NULL in FreeTclObject, this has no effect
	but makes the code more clear.

2002-12-24  Mo DeJong  <mdejong@users.sourceforge.net>

	* new_features.txt: Mention tclblend_init change.
	* src/native/javaCmd.c (JavaInitEnv): Treat
	tclblend_init as a list and pass each element
	as a JVM option.
	* tests/tclblend/loading.test: Test passing
	of multiple JVM options via tclblend_init.

2002-12-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* new_features.txt: Add note about new accessible
	field, method, and constructor implementation.
	* src/tcljava/tcl/lang/FieldSig.java (get,
	getAccessibleFields, getAccessibleField):
	Implement new access approach for fields. Use
	a new error message to indicate that a field
	can't be access, not that is does not exist.
	* src/tcljava/tcl/lang/FuncSig.java (get,
	lookupMethod, matchSignature,
	getAccessibleConstructors, getAccessibleConstructor,
	getAllDeclaredMethods, getAccessibleMethods):
	Implement new access approach for methods
	and constructors. Use a new error message to
	indicate that a method or constructor can't
	be accessed, not the it does not exist.
	* src/tcljava/tcl/lang/JavaInfoCmd.java
	(getFieldInfoList): Invoke FieldSig.getAccessibleFields()
	instead of calling Class.getFields() directly so that
	package access fields are returned when accessible.
	* src/tcljava/tcl/lang/reflect/PkgInvoker.java
	(usesDefaultInvoker): Add new helper method that
	will return true when a given class does not have
	a custom package invoker.
	* src/tests/tcljava/tests/invoke/PublicTester.java:
	Update comments.
	* tests/tcljava/AutomaticSignature.test: Update err msg.
	* tests/tcljava/FieldSig.test: Update err msg.
	* tests/tcljava/FuncSig.test: Update err msg and tests
	that invoked getAllDeclaredMethods.
	* tests/tcljava/JavaFieldCmd.test: Update err msg.
	* tests/tcljava/JavaInvoke.test: Update err msg.
	Use java::field instead of Object.forName() to get
	a java.lang.Class object.
	* tests/tcljava/JavaThrowCmd.test: Update err msg.
	* tests/tcljava/PkgInvoker.test: Update err msg.
	Use java::field instead of Object.forName() to get
	a java.lang.Class object. Add java::info fields
	test for a package accessible field.
	* tests/tcljava/ReflectObject.test: Update err msg.

2002-12-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/tcljava/JavaInfoCmd.test (Button_properties_check):
	Add a testing proc that checks java.awt.Button props
	vs a known JDK 1.1 list of props. This will avoid
	a bunch of error messages from later JDK versions
	which add additional properties.

2002-12-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_PROG_JAVAC, TCLJAVA_WITH_TCL,
	TCLJAVA_WITH_THREAD): Print better error
	message if user does not pass a --with-tcl,
	--with-thread, or --with-jdk options.

2002-12-20  Mo DeJong  <mdejong@users.sourceforge.net>

	Implement new ref count system for Tcl Blend,
	see JavaRefCount.html for complete description.

	* new_features.txt: Mention new ref count impl.
	* docs/TclJava/JavaGC.html: Move info to the new
	JavaRefCount.html page and add link.
	* docs/TclJava/JavaRefCount.html: Add new page
	that describes how Jacl and Tcl Blend increment
	ref counting. The description of Tcl Blend's
	ref count approach corresponds to the new
	implementation.
	* docs/TclJava/contents.html: Add link to new
	JavaRefCount.html page.
	* src/empty/empty.jar: Regen.
	* src/empty/tcl/lang/CObject.java: Add decls for
	decrRefCount() and incrRefCount().
	* src/empty/tcl/lang/Interp.java: Use RuntimeException
	not RuntimeError.
	* src/native/javaCmd.c (JavaSetupJava): Link
	jcache->preserve to TclObject._preserve() to avoid
	incrementing the Tcl_Obj count from JNI code.
	* src/native/javaInterp.c (JavaCmdProc): Invoke
	jcache->preserve and jcache->release for each
	TclObject argument passed to a Java method.
	* src/native/javaList.c (Java_tcl_lang_TclList_append,
	Java_tcl_lang_TclList_replace): Don't implicitly
	increment a newly allocated Tcl_Obj in list
	methods that can modify a Tcl_Obj.
	* src/native/javaObj.c (Java_tcl_lang_CObject_makeRef,
	JavaGetTclObject):
	Don't increment the ref count for a TclObject when
	converting from a CObject to a non-CObject internal
	rep. Increment the ref count of a new CObject or
	TclList when it is created.
	* src/tclblend/tcl/lang/CObject.java (CObject,
	dispose, duplicate, toString, decrRefCount, incrRefCount,
	makeReference, cleanupAdd, cleanupPush, cleanupPop, dump,
	finalize): Completely reimplement CObject so that
	a ref count is not implicitly held for a Tcl_Obj.
	This gets rid of the need to try to send an object
	back to the thread it came from for cleanup and means
	we don't have to depend on the Java garbage collector.
	See JavaRefCount.html for a more detailed description
	of how the new ref count approach works.
	* src/tclblend/tcl/lang/Interp.java (callCommand):
	Invoke CObject.cleanupPush() before calling a Java
	method and CObject.cleanupPop() when finished. Add
	new cobjCleanup member to interp.
	* src/tclblend/tcl/lang/TclList.java (setListFromAny,
	append, replace): Invoke cleanupAdd() when allocating
	a TclList in Java code. Check for an empty list and
	invoke cleanupAdd() for it as well.
	* src/tcljava/tcl/lang/EventAdaptor.java (setCallback,
	deleteCallback): Copy a CObject into a TclString
	to avoid a memory leak when running in Tcl Blend.
	An event adaptor has no dispose() method so there
	was no place to release the held ref count.
	* src/tcljava/tcl/lang/TclObject.java (preserve,
	_preserve, release, _release, getRefCount):
	Create new private methods that will be invoked
	from JNI code. The preserve and release methods
	will modify the ref count of a contained CObject
	or TclList while _preserve and _release will not.
	Make it possible to call getRefCount from the package.
	* src/tcljava/tcl/lang/library/java/javalock.tcl:
	Remove unneeded llength and fixup comments.
	* src/tests/tclblend/tcl/lang/ArgConvertCmd.java:
	* src/tests/tclblend/tcl/lang/IntListAppendCmd.java:
	* src/tests/tclblend/tcl/lang/IntLostListCmd.java:
	* src/tests/tcljava/tests/HoldRefCmd.java:
	* src/tests/tcljava/tests/ListReplaceCmd.java:
	* src/tests/tcljava/tests/LostListCmd.java:
	* src/tests/tcljava/tests/ReRepCmd.java:
	* src/tests/tcljava/tests/ReleaseNewListCmd.java:
	* src/tests/tcljava/tests/StringListStringCmd.java:
	Add test cases that are run in refCount.test.
	* tests/jacl/refCount.test: Add Jacl specific
	ref count tests.
	* tests/tclblend/javaInterp.test: Dispose of
	interp in javaInterp-5.2. Call preserve and
	release in javaInterp-9.8 since a reflected
	TclObject is not automatically preserved.
	* tests/tclblend/refCount.test: Add Tcl Blend
	specific ref count tests.
	* tests/tcljava/FuncSig.test: Reformat test.

2002-12-18  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_PROG_JAVAC, AC_JAVA_JNI_LIBS):
	Check for Solaris javac install in /usr/bin
	that is actually a link into /usr/java/bin.
	Use uname -m instead of uname --machine.
	Check for libhpi.so on sparc systems and
	don't link to it if it is not there.
	Fixup error message displayed when something
	goes wrong with the JNI link test.

2002-12-18  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/java.h: Add decl for JavaNotifierInDoOneEvent.
	* src/native/javaIdle.c (Java_tcl_lang_IdleHandler_doWhenIdle,
	Java_tcl_lang_IdleHandler_cancelIdleCall, JavaIdleProc):
	Reimplement IdleHandler to be more like TimerHandler.
	Create a single global ref and store it inside the
	instance. This avoids a memory leak in JDK 1.2 and newer
	when the even is canceled. Use JavaNotifierInDoOneEvent
	function to decide when to propagate a Java exception.
	* src/native/javaNotifier.c (Java_tcl_lang_Notifier_init,
	JavaNotifierInDoOneEvent): Add new JavaNotifierInDoOneEvent
	function that can be used to find out if an event was
	being processed as a result of a JNI call to the
	Notifier.doOneEvent method.
	* src/native/javaTimer.c (JavaTimerProc): Don't propagate
	a Java exception when invoked from Tcl, instead print
	an error message.
	* src/tclblend/tcl/lang/IdleHandler.java (IdleHandler,
	cancel, invoke): See javaIdle.c description.
	Raise error if invoke is called after cancel.
	* src/tclblend/tcl/lang/TimerHandler.java (cancel, invoke):
	Zero out token, update comments. Raise an error if invoke
	is called after cancel().

2002-12-18  Mo DeJong  <mdejong@users.sourceforge.net>

	Invoke JNI DeleteLocalRef method to cleanup
	exception and object pointers. This is handled
	by default for JNI methods but it can't hurt
	so cleanup after ourselves everywhere we can.
	Check ExceptionOccurred after JNI methods
	even if we can't recover from the error.

	* src/native/javaCmd.c (JavaInitBlend,
	JavaThrowTclException, JavaGetString):
 	Panic if JavaGetString is passed a null string.
	* src/native/javaIdle.c (JavaIdleProc):
	* src/native/javaInterp.c (ThrowNullPointerException,
	Java_tcl_lang_Interp_create, Java_tcl_lang_Interp_eval):
	* src/native/javaList.c (ThrowNullPointerException,
	Java_tcl_lang_TclList_append, Java_tcl_lang_TclList_getElements,
	Java_tcl_lang_TclList_index, Java_tcl_lang_TclList_listLength,
	Java_tcl_lang_TclList_replace): Replace inlined exception
	raising code with ThrowNullPointerException function.
	* src/native/javaObj.c (ThrowNullPointerException,
	printString, UpdateTclObject, JavaGetTclObj,
	Java_tcl_lang_CObject_getString,
	Java_tcl_lang_CObject_incrRefCount,
	Java_tcl_lang_CObject_decrRefCount,
	Java_tcl_lang_CObject_makeRef, JavaBreakRef,
	JavaGetTclObject):
	Check for exception in JNI method and panic if
	we can't do anything to handle it. Replace inlined
	exception raising code with ThrowNullPointerException.
	Reset object to the value returned by NewGlobalRef
	instead of directly setting the pointer, this should
	not matter but is done for consistency.
	* src/native/javaTimer.c (JavaTimerProc): Invoke
	DeleteLocalRef to cleanup memory.

2002-12-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/java.h (JavaIsRef):
	* src/native/javaInterp.c (BTestCmd):
	* src/native/javaObj.c (JavaIsRef):
	* tests/tclblend/javaObj.test: Add new
	btest isjobject method and use it to
	check that the recently added JavaBreakRef
	works as expected.

2002-12-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaInterp.c (BTestCmd,
	Java_tcl_lang_Interp_createBTestCommand):  Add
	new btest command via createBTestCommand().
	* src/native/javaList.c (Java_tcl_lang_TclList_index):
	Check for previously disposed Tcl_Obj.
	* src/tclblend/tcl/lang/Interp.java (createBTestCommand):
	Add native method decl.
	* src/tclblend/tcl/lang/TclList.java: Fixup comments.
	* src/tcljava/tcl/lang/TclString.java: Fixup comments.
	* src/tests/tclblend/tcl/lang/NativeTestExtension.java:
	Invoke Interp.createBTestCommand().
	* src/tests/tcljava/tcl/lang/JtestCmd.java (cmdProc):
	Modify the refcount subcommand so that it returns
	refCount-1 to account for the ref added for the
	method invocation.
	* tests/inprogress/AfterCmd.test:
	* tests/inprogress/BgErrorMgr.test:
	* tests/inprogress/UplevelCmd.test :
	Update tests that use jtest refcount to account
	for change made to JtestCmd.java.
	* tests/jacl/refCount.test: Check jtest command.
	* tests/tclblend/javaTimer.test: Add comment.
	* tests/tclblend/refCount.test: Add tests
	for new btest command.

2002-12-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/java.h:
	* src/native/javaInterp.c (JavaCmdProc):
	* src/native/javaObj.c (JavaBreakRef, JavaGetTclObject):
	* src/tests/tcljava/tests/ListLengthCmd.java:
	* tests/tclblend/javaObj.test:
	Add new JavaBreakRef and invoke it from JavaCmdProc
	and JavaGetTclObject. This fixes a problem where
	a TclObject with a CObject or a TclList internal
	rep is stored as a Java ref inside a Tcl_Obj on
	the C side. Only non-CObject or TclList types
	should have a reference from C pointing to the
	container TclObject.

2002-12-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaObj.c (Java_tcl_lang_CObject_makeRef,
	Java_tcl_lang_CObject_newCObject): Return after
	raising exception to avoid crash in some strange
	situations. Zero out 64 bit structure before
	assigning 32 bit value to make debugging of
	newCObject easier.

2002-12-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/all.tcl: Run tests names through
	lsort -dictionary so that they always
	get run in the same order.

2002-12-15  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaList.c: Add checks for deallocated
	Tcl objects when TCL_MEM_DEBUG is defined.
	* src/native/javaObj.c (JavaObjInit): Use  Tcl_GetObjType
	to lookup the tcl list type pointer. Add checks for
	deallocated Tcl objects when TCL_MEM_DEBUG is defined.

2002-12-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaInterp.c (Java_tcl_lang_Interp_setVar):
	* tests/tclblend/javaInterp.test:
	Plug a memory leak in Interp.setVar when
	appending to a string variable. Add test
	case that demonstrates the memory leak.

2002-12-10  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaCmd.c (JavaInitEnv): Comment
	out code that deallocated JVM options. It seems
	that some buggy JVMs don't copy the arguments
 	passed into JNI_CreateJavaVM.

2002-12-09  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaCmd.c (JavaInitEnv): Free memory
	allocated for JVM options and classpath.

2002-12-09  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/TclObject.java (disposedCheck):
	Add helper method that will raise an error if
	a TclObject method is called after the object
	has been disposed of. Invoke this method at
	the begining of each public TclOject api.

2002-12-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/CallFrame.java (chain,
	wrongNumProcArgs):
	* tests/jacl/Interp.test:
	* tests/tcl/compile.test:
	* tests/tcl/proc-old.test:
	* tests/tcl/proc.test:
	Update Jacl error message when proc is
	called with wrong number of args to match
	Tcl 8.4 implementation. Update tests.

2002-12-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/JavaCallCmd.java (cmdProc):
	* src/tcljava/tcl/lang/JavaInvoke.java (callMethod,
	callStaticMethod):
	* src/tcljava/tcl/lang/ReflectObject.java (cmdProc):
	* tests/tclblend/javaObj.test:
	Don't set the interp result after invoking a
	void Java method. This is functionally equivalent
	and saves a wrapper object allocation.

2002-12-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/FieldSig.java (get):
	* src/tcljava/tcl/lang/FuncSig.java (get):
	* src/tcljava/tcl/lang/JavaNewCmd.java (get,
	looksLikeArraySig):
	* tests/tcljava/FuncSig.test:
	* tests/tcljava/JavaNewCmd.test:
	Optimize TclList use by getting the string
	representation of lists we know have a
	length of 1. This avoids an unneeded
	allocation of a native object wrapper
	in Tcl Blend. Comment out the pointless
	setting of an internal rep in FuncSig
	and update test cases.

2002-12-07  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/java.h:
	* src/native/javaCmd.c (FreeJavaCache, JavaSetupJava):
	* src/native/javaObj.c (JavaObjInit, JavaGetTclObject):
	* src/tclblend/tcl/lang/TclList.java (newInstance):
	* tests/tclblend/javaObj.test:
	Add newInstance method to TclList and call it when
	we detect that a native object is a list. The
	old approach was to wrap the object as a CObject
	and then convert it to a TclList the first time
	a list operation was done from Java. The new
	approach is more efficient.

2002-08-12  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Fix 'make test' rule by setting
	TCLLIBPATH correctly.
	* src/native/javaCmd.c (Tclblend_Init):
	* src/native/javaInterp.c (JavaTraceProc,
	Java_tcl_lang_Interp_create):
	* src/native/javaList.c (Java_tcl_lang_TclList_append,
	Java_tcl_lang_TclList_replace,
	Java_tcl_lang_TclList_splitList):
	* src/native/javaNotifier.c (Java_tcl_lang_Notifier_init,
	Java_tcl_lang_Notifier_alertNotifier):
	* src/native/javaObj.c (JavaGetTclObject):
	* src/native/javaTimer.c (
	Java_tcl_lang_TimerHandler_createTimerHandler):
	Zero out jlong values before assigning a pointer
	value. This handles the case where pointers
	are 32bits and a jlong is 64 bits. Add additional
	CONST84 check to avoid compiler warnings when
	compiling with Tcl 8.4 or newer.

2002-07-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Write out an init file that sets
	env vars in for the gdb_tclblend target.
	* tcljava.m4 (AC_JAVA_JNI_INCLUDE, AC_JAVA_JNI_LIBS):
	Support newer Kaffe include/library layout.

2002-07-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tclblend/tcl/lang/Interp.java (finalize):
	* tests/tclblend/javaInterp.test: Print an
	error message to stderr if the Java GC
	thread calls finalize for an Interp. This
	would only happen when the user forgets to
	invoke dispose() on an interp. This is at
	least better than core dumping if an interp
	was finalized which is what the code used
	to do.

2002-07-22  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/javaInterp.c (JavaTraceProc,
	Java_tcl_lang_Interp_pkgRequire): Fixup CONST
	usage to cleanup compile with Tcl 8.4.

2002-07-22  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/native/java.h (JavaWasJavaThreadInit): Add decl.
	* src/native/javaCmd.c (JavaWasJavaThreadInit,
	JavaSetupJava): Add JavaWasJavaThreadInit method.
	* src/native/javaNotifier.c
	(Java_tcl_lang_Notifier_finalizeThreadCheck): Add
	new native method implementaiton that checks
	to see if thread was created in Java and cleans
	up Tcl thread data when last interp is deleted.
	* src/tclblend/tcl/lang/Interp.java (dispose):
	Invoke new Notifier.finalizeThreadCheck() method.
	* src/tclblend/tcl/lang/Notifier.java
	(finalizeThreadCheck): Add native method decl.
	* tests/tclblend/loading.test: Remove useless comments.

2002-07-22  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tests/tclblend/tests/JavaEval.java:
	* src/tests/tclblend/tests/JavaLoadTclBlend.java:
	* src/tests/tclblend/tests/JavaLoadTclBlend2.java:
	* src/tests/tclblend/tests/JavaThreadLoadTclBlend.java:
	Rework tests so that dispose is called from a finally
	block just in case something goes wrong.
	* tests/tclblend/loading.test: Add test that loads
	two Java interpreters into the same Java threads.
	Rename a couple of tests and fixup return values.

2002-07-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/empty/tcl/lang/Interp.java (Interp):
	Throw runtime exception if fake Interp instance
	is accidently created.
	* src/tcljava/tcl/lang/BlendExtension.java (init):
	Raise runtime exception if init method is
	invoked twice. This should never happed.

2002-07-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Add support for THREAD_BIN_DIR.
	Include pkgIndex.tcl files from the blend build
	dir, the src dir, and the THREAD_BIN_DIR.
	* configure: Regen.
	* configure.in: Require the Thread package at
	configure time via the --with-thread option.
	This is required so that we can test interaction
	with Tcl threads.
	* tcljava.m4 (TCLJAVA_WITH_THREAD): Define
	--with-thread option macro.
	* src/native/java.h: Add TclBlendTrace header.
	* src/native/javaCmd.c (Tclblend_Init, JavaInitEnv,
	DestroyJVM, DetachTclThread, FreeJavaCache,
	JavaSetupJava, TclBlendTrace): Add new TclBlendTrace
	method and use it in key methods to print low
	level loading info.
	* src/tests/tclblend/tests/JavaEval.java:
	* src/tests/tclblend/tests/JavaLoadTclBlend.java:
	* src/tests/tclblend/tests/JavaThreadLoadTclBlend.java:
	* src/tests/tclblend/tests/JavaThreadsLoadTclBlend.java:
	Add test helpers that deal with loading Tcl into a JVM.
	* tests/tclblend/loading.test: Add a host of tests
	for loading Tcl Blend into Tcl and into an existing JVM.

2002-05-16  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): Fallback to using
	the clasic JVM if a client JVM is not available
	for a JDK 1.3/1.4 file layout.

2002-05-16  Maurice Diamantini  <diam@ensta.fr>

	* src/jacl/tcl/lang/Util.java (isMac): Return false for
	Mac OSX since it is a UNIX system. This enables exec
	under Mac OSX.

2002-05-06  Maurice Diamantini  <diam@ensta.fr>

	* src/jacl/tcl/lang/BinaryCmd.java (cmdProc): Cast argument to
	?: operator to avoid compiler error from Jikes. Add parens
	to make precedence clear.

2002-05-02  Mo DeJong  <mdejong@users.sourceforge.net>

	* new_features.txt: Add notes about the new features
	added to Tcl Blend and Jacl.

2002-05-02  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): The previous checkin
	neglected to use the $machine variable for variable
	names. Fix that.

2002-04-29  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): Update the JDK
	detection macro to support blackdown JDK 1.3
	releases for Linux on architectures other than
	i386.

2002-04-14  Mo DeJong  <mdejong@users.sourceforge.net>

	* configure: Regen.
	* tcljava.m4 (AC_JAVA_JNI_LIBS): Update the JDK
	detection macro to support Sun JDK 1.3 and 1.4
	under Linux. Emit an error if no known jvm
	configuration can be found.

2002-04-13  Shawn Boyce  <shawn@qcominc.com>

	* src/jacl/tcl/lang/Expression.java (ExprLex):
	Check that a token starts with a digit before
	passing it to strtod. This avoids a costly
	runtime exception and leads to a 4x speedup
	in some trivial examples.

2002-04-12  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/AfterCmd.java (processTimerEvent,
	processIdleEvent):
	* src/jacl/tcl/lang/Interp.java (eval):
	* src/jacl/tcl/lang/PackageCmd.java (pkgRequire):
	* src/jacl/tcl/lang/Shell.java (run):
	* src/jacl/tcl/lang/SocketConnectionEvent.java (processEvent):
	* src/tclblend/tcl/lang/Interp.java (eval, recordAndEval):
	Pass TCL.EVAL_GLOBAL instead of TCL.GLOBAL_ONLY to
	eval() functions. Fixup docs that suggest using the
	wrong form.

2002-04-12  Shawn Boyce  <shawn@qcominc.com>

	* src/jacl/tcl/lang/FileCmd.java (copyRenameOneFile):
	Treat data copied via 'file copy' as binary. Fix
	array bound bug that was causing the copy command
	to fail. Fixup error message when too few arguments
	are passed to the 'file join' command.

2002-04-12  Shawn Boyce  <shawn@qcominc.com>

	* src/jacl/tcl/lang/FileCmd.java (cmdProc):
	Implement 'file volumes' command using the JDK 1.2
	method File.listRoots(). Reflection is used to preserve
	backward compatibility with JDK 1.1 systems. Fixed
	number of args check so that 'file volumes' can be run.

2002-04-11  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/EncodingCmd.java: Map the
	Tcl "identity" encoding to "UTF8" in Java. While
	this does not pass all the Tcl identity
	encoding tests, it does pass quite a few.
	* tests/tcl/utf.test: Add encoding command
	tests from Tcl 8.3.

2002-04-11  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Build demo binaries in a directory
	named bdemo. Build test binaries in a directory
	named btest. This will keep the make clean rule
	from removing the source files when configure
	is run in the src directory. Don't set auto_path
	when running Jacl since it is not required.

2002-01-22  Bruce Johnson  <bruce_johnson@merck.com>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (getChanType, getRefCount,
	getBufferedInput, getBufferedOutput, isBlocked,
	isBgFlushScheduled, inputSawCR): Add placeholder methods
	for properties queried by the testchannel command.
	* src/jacl/tcl/lang/FblockedCmd.java (cmdProc):
	Call placeholder isBlocked method of Channel class.
	* src/jacl/tcl/lang/FileChannel.java (getChanType):
	Add implementation of abstract getChanType method.
	* src/jacl/tcl/lang/ServerSocketChannel.java (getChanType):
	Add implementation of abstract getChanType method.
	* src/jacl/tcl/lang/SocketChannel.java (getChanType):
	Add implementation of abstract getChanType method.
	* src/jacl/tcl/lang/StdChannel.java (open, getChanType):
	Add implementation of abstract getChanType method.
	Set correct default buffering mode for stdchannels so
	that the testchannel command return proper values.
	* src/tests/jacl/tcl/lang/JavaTestExtension.java (init)
	Load testchannel command with other Jacl test commands.
	* src/tests/jacl/tcl/lang/TestChannelCmd.java:
	Add implementation of testchannel command.

2002-01-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/BgErrorMgr.java (processIdleEvent):
	Invoke Channel write method that takes a TclObject
	directly instead of converting an existing TclObject
	to a String.
	* src/jacl/tcl/lang/Channel.java (read, write, flush):
	Modify read and write methods to accept and return
	TclObjects instead of Strings. This will make it
	easier to add support for reading and writing of
	binary data.
	* src/jacl/tcl/lang/FileChannel.java (read, write, close):
	Update read and write methods to match superclass signatures.
	Place superclass close call in a try-finally block so that
	file is closed if exception is raised in superclass close.
	* src/jacl/tcl/lang/GetsCmd.java (cmdProc): Update call
	to channel read method, it now returns a TclObject.
	* src/jacl/tcl/lang/PutsCmd.java (cmdProc): Update call
	to channel write method, it now accepts a TclObject.
	* src/jacl/tcl/lang/ReadCmd.java (cmdProc): Update call
	to channel read method, it now returns a TclObject.
	* src/jacl/tcl/lang/StdChannel.java (write):
	Update read and write methods to match superclass signatures.

2002-01-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (write, flush):
	Don't mess with the eof flag while writing or
	flushing since it only applies to a read operation.
	* src/jacl/tcl/lang/TclIO.java (unregisterChannel):
	Improve diagnostic message printed when something goes
	seriously wrong with a close command on a channel.

2002-01-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/SocketChannel.java (SocketChannel): Raise
	an IOException instead of catching it and raising a TclException.
	* src/jacl/tcl/lang/SocketCmd.java (cmdProc): Catch an
	IOException and instead raise a TclException when something
	goes wrong in the SocketChannel constructor.

2002-01-18  Mo DeJong  <mdejong@users.sourceforge.net>

	* new_features.txt: Add note about new socket
	command.
	* docs/TclJava/JavaImportCmd.html: Attempt to
	make it more clear that importing all classes
	from a package is not supported by the
	java::import command.
	* src/jacl/tcl/lang/ExecCmd.java: Don't include
	InterruptedException in throws declaration for
	methods that can't raise this exception.
	* src/jacl/tcl/lang/OpenCmd.java (cmdProc): Avoid
	calling unnecessary TclString constructor.
	* src/jacl/tcl/lang/PutsCmd.java (cmdProc): When
	writing out a string with a newline, invoke the
	write method of the channel driver twice to match
	Tcl's implementation.
	* src/tcljava/tcl/lang/TclString.java: Update
	comment for newInstance method to make it clear
	that a passed in StringBuffer should not be
	modified by the caller.

2002-01-15  Mo DeJong  <mdejong@users.sourceforge.net>

	* tests/README: Update README so that it is
	clear the tests are for Tcl/Java commands.
	Describe running on make shell and make test.
	Remove unneeded sections.
	
2002-01-15  Shawn Boyce  <shawn@qcominc.com>

	* src/jacl/tcl/lang/ExecCmd.java
	(cmdProc, execWin, execReflection):
	Use new Runtime.exec API to avoid PWD hack
	with JDK 1.3 or newer. The API is called
	via reflection so that code can continue
	to be compiled on a JDK 1.1 system.
	Update the system name check in execWin
	to work with Windows 2000.

2002-01-14  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/SocketChannel.java
	(read, write, close, flush): Don't retain a
	errorMsg member since it is not used anywhere
	and makes things more complex.

2002-01-08  Mo DeJong  <mdejong@users.sourceforge.net>

	* Makefile.in: Add JDB_ATTACH_FLAGS to deal
	with version specific arguments for jdb.
	Rework the jdb_jacl rule so that it uses
	these new command line arguments.
	* configure: Regen.
	* configure.in: Subst JDB_ATTACH_FLAGS.
	* tcljava.m4 (AC_JAVA_TOOLS): Set JAVA_G_FLAGS
	and JDB_ATTACH_FLAGS based on JDK version.
	If a java_g executable can't be found use
	the java executable in its place.

2002-01-08  Mo DeJong  <mdejong@users.sourceforge.net>

	* aclocal.m4: Removed.
	* configure: Regen with autoconf 2.52.
	* configure.in: Require autoconf 2.50 or newer.
	Directly include the tcljava.m4 file instead of
	including it via aclocal.m4.
	* tcljava.m4: Call m4_ifval instead of ifval
	to avoid errors from new version of autoconf.

2002-01-02  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/SocketCmd.java (cmdProc, getPort):
	Call new helper method to get port number passed in
	by the user and check that it is valid. Raise error
	if the port number is too large.

2002-01-02  Bruce Johnson  <bruce_johnson@merck.com>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (Channel, setEncoding):
	Add default constructor that will set the encoding at
	channel creation time. Move Tcl channel name logic into
	fconfigure command and call EncodingCmd.getBytesPerChar
	to cache the number of bytes per char for the channel.
	* src/jacl/tcl/lang/EncodingCmd.java: Add initial
	implementation of the encoding command.
	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc): Add
	logic to translate from Tcl encoding names to Java
	encoding names and vice versa.
	* src/jacl/tcl/lang/Interp.java (createCommands): Add
	encoding command to interp cmd table.

2001-12-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (close):
	Check for a custom output eof character and
	write it to the stream before closing.
	* src/jacl/tcl/lang/FileChannel.java (close):
	Invoke super class close method before closing
	actual stream in case custom EOF is written.
	Reformat some tabs into spaces.
	* src/jacl/tcl/lang/ServerSocketChannel.java (close):
	Invoke super class close method before closing
	actual stream. Add FIXME note.
	* src/jacl/tcl/lang/SocketChannel.java (close):
	Invoke super class close method before closing
	actual stream in case custom EOF is written.

2001-12-25  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (read, write,
	flush, checkRead, checkWrite): Implement and use
	new helper methods that check to see if reading
	or writing is allowed on a Channel. The old logic
	was incorrect in the case of a server socket which
	is neither readable nor writeable.
	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc):
	Handle server socket case which is neither readable
	not writeable the same as standard Tcl.
	* src/jacl/tcl/lang/FileChannel.java (write, flush):
	Call new checkWrite method instead of invoking
	super class method to check the writable property.

2001-12-24  Bruce Johnson  <bruce_johnson@merck.com>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (getInputEofChar,
	setInputEofChar, getOutputEofChar, setOutputEofChar):
	Add methods to query and set the input and
	output new eof state fields. These fields are not
	actually used yet.
	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc): Add
	support for getting and setting -eofchar on a channel.

2001-12-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc):
	Use new getBufferingString and getBufferingID
	methods from the TclIO class.
	* src/jacl/tcl/lang/TclIO.java (getBufferingString,
	getBufferingID): Add helper methods to simplify
	the code in the fconfigure command.

2001-12-23  Bruce Johnson  <bruce_johnson@merck.com>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (getInputTranslation,
	setInputTranslation, getOutputTranslation, setOutputTranslation):
	Add new input and output translations fields and accessors.
	These fields are not actually used yet.
	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc): Implement
	the -translation option for the fconfigure command.
	* src/jacl/tcl/lang/TclIO.java (getTranslationString,
	getTranslationID): Add new methods and fields to support
	the -translation option for fconfigure.

2001-12-23  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (getMode, isReadOnly,
	isWriteOnly, isReadWrite): Add new methods to check mode
	status without having to deal with TclIO flags directly.
  	Use these new methods throughout the class. Remove
	the getMode method.
	* src/jacl/tcl/lang/FileChannel.java: Rename input
	parameter mode to inmode to avoid possible confusion
	with inherited mode field.

2001-11-27  Bruce Johnson  <bruce_johnson@merck.com>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (buffering, getBuffering,
	setBuffering, BUF_SIZE, bufferSize, getBufferSize,
	setBufferSize, encoding, getEncoding, setEncoding): Add
	new members and get/set methods.
	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc):
	Get and set channel values for -buffering, -buffersize,
	and -encoding options.
	* src/jacl/tcl/lang/TclIO.java (BUFF_FULL, BUFF_LINE,
	BUFF_NONE): Add new fields for use in Channel code.

2001-11-27  Bruce Johnson  <bruce_johnson@merck.com>,
            Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (blocking, getBlocking,
	setBlocking): Add new blocking state.
	* src/jacl/tcl/lang/FconfigureCmd.java (cmdProc): Indent
	to 4 space Tcl style. Add -blocking channel option.
	Remove the "fconfigure command not implemented yet" error.

2001-11-21  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/tcljava/tcl/lang/TclPosixException.java
	(TclPosixException): Return posix errors in upper
	case to match Tcl implementation.

2001-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/SocketCmd.java (cmdProc): Use the
	Util.getInt() method to parse socket port numbers so
	that we are compatible with Tcl error messages.
	Avoid wrapping code in try blocks that catch Exception.
	Set the interpreter result to String directly
	instead of creating a TclString inline.

2001-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/StdChannel.java (open): Set
	channel names to stdin, stdout, and stderr instead
	of file0, file1, and file2.
	* src/jacl/tcl/lang/TclIO.java (getChannel,
	getNextDescriptor): Remove aliases for stdin, stdout,
	and stderr. When getting a descriptor prefixed with
	"file" but sure the first one we return is "file3".

2001-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/PutsCmd.java:
	* src/jacl/tcl/lang/ReadCmd.java: Reformat comments
	to make use Java style // instead of C style /**/.

2001-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (write): Remove
	trailing "." from error message since it is not
	compatible with Tcl error message.
	* src/jacl/tcl/lang/FblockedCmd.java (cmdProc):
	* src/jacl/tcl/lang/GetsCmd.java (cmdProc):
	* src/jacl/tcl/lang/PutsCmd.java (cmdProc):
	* src/jacl/tcl/lang/ReadCmd.java (cmdProc):
	Remove mode check that belongs in Channel methods.

2001-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ServerSocketChannel.java (errorMsg)
	Remove unused errorMsg member.
	* src/jacl/tcl/lang/SocketChannel.java (SocketChannel,
	close): Set channel mode to TclIO.RDWR to indicate that
	reading and writing are allowed on socket. Set errorMsg
	member if an exception was raised during close.
	* src/jacl/tcl/lang/SocketCmd.java (cmdProc): Create
	SocketChannel with TclIO.RDWR mode to indicate that
	reading and writing are allowed on socket.

2001-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ServerSocketChannel.java (write,
	flush): Remove overridden methods that attempted to
	provide channel specific error messages. The write
	and flush methods in the super class provide error
	messages that are compatible with Tcl.

2001-11-20  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (getNextDescriptor):
	Move the getNextDescriptor method into the TclIO class.
	Update documentation for Channel class.
	* src/jacl/tcl/lang/FileChannel.java:
	* src/jacl/tcl/lang/ServerSocketChannel.java:
	* src/jacl/tcl/lang/SocketChannel.java:
	Invoke TclIO.getNextDescriptor from TclIO class.
	* src/jacl/tcl/lang/TclIO.java (getNextDescriptor):
	Add getNextDescriptor method from Channel class.

2001-11-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (read): Turn the
	read method into a concrete implementation instead
	of an abstract method.
	* src/jacl/tcl/lang/FileChannel.java (read):
	* src/jacl/tcl/lang/ServerSocketChannel.java (read):
	* src/jacl/tcl/lang/SocketChannel.java (read):
	* src/jacl/tcl/lang/StdChannel.java (read): Make use
	of super class read method instead of including
	read logic in each Channel subclass.

2001-11-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (close): Fix silly
	cut and paste error that was closing the underlying
	channel twice.

2001-11-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (tell): Turn the tell
	method into a concrete implementation instead of an
	abstract method. It currently just returns -1.
	* src/jacl/tcl/lang/ServerSocketChannel.java (tell):
	* src/jacl/tcl/lang/SocketChannel.java (tell):
	* src/jacl/tcl/lang/StdChannel.java (tell):
	Remove tell command since it is now handled in the
	super class.

2001-11-19  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (seek): Properly indent
	some throws clauses on methods. Turn the seek method into
	a concrete implementation instead of an abstract method.
	By default seek will set the posix error code EINVAL
	to indicate that seeking is not supported. Pass interp
	argument to seek method so we can raise TclExceptions.
	* src/jacl/tcl/lang/FileChannel.java (seek): Update
	method signature to account for changes in Channel class.
	* src/jacl/tcl/lang/SeekCmd.java (cmdProc): Pass interp
	argument to channel's seek command. Don't attempt to
	handle seek not supported case since that will
	be done by the driver.
	* src/jacl/tcl/lang/ServerSocketChannel.java (seek):
	Update method signature to account for changes in Channel
	class. Raise a EACCES posix error code if seek is invoked
	on a server socket so we match Tcl.
	* src/jacl/tcl/lang/SocketChannel.java (seek): Remove
	seek method since this is taken care of in the super class.
	* src/jacl/tcl/lang/StdChannel.java (seek): Remove
	seek method since this is taken care of in the super class.

2001-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (write): Turn
	the write method into a concrete implementation
	instead of an abstract method.
	* src/jacl/tcl/lang/FileChannel.java (write): Invoke
	Channel's write method to check for error writing to
	a read only channel.
	* src/jacl/tcl/lang/SocketChannel.java (write): Use
	new write method in Channel class.
	* src/jacl/tcl/lang/StdChannel.java (write): Use
	new write method in Channel class.

2001-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Shell.java (ConsoleThread, putLine,
	put): Make use of Tcl Channels instead of writing to
	System.out and System.err directly. This avoids buffering
	conflicts between the Shell and the Tcl interp.

2001-11-17  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (flush): Turn the
	flush method into a concrete implementation
	instead of an abstract method.
	* src/jacl/tcl/lang/FileChannel.java (flush): Invoke
	Channel.flush() inside FileChannel's flush() method to
	check for error writing to a read only channel.
	* src/jacl/tcl/lang/ServerSocketChannel.java (flush):
	Avoid passing unneeded 3rd argument to TclException
	constructor.
	* src/jacl/tcl/lang/SocketChannel.java (flush):
	Avoid passing unneeded 3rd argument to TclException
	constructor. Invoke Channel.flush() inside flush
	method instead of dealing directly with the channel.
	* src/jacl/tcl/lang/StdChannel.java (flush, write):
	Remove flush() implementation since it is now handled
	in the Channel class. Add call to flush in the write
	method for the stderr stream to maintain the appearance
	of an unbuffered stream.

2001-11-16  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java (chanName, close,
	getNextDescriptor): Make chanName member private.
	Turn the close() method into a concrete implementation
	instead of an abstract method. Add getNextDescriptor()
	method to replace getNextFileNum() and getNextSocketNum()
	methods in subclasses.
	* src/jacl/tcl/lang/FileChannel.java (close,
	getNextFileNum): Call supercalss getNextDescriptor()
	instead of our own getNextFileNum(). Override close()
	method to handle our own shutdown needs.
	* src/jacl/tcl/lang/ServerSocketChannel.java (close,
	getNextSockNum): Call supercalss getNextDescriptor()
	instead of our own getNextSockNum(). Override close()
	method to handle our own shutdown needs.
	* src/jacl/tcl/lang/SocketChannel.java (close,
 	getNextSockNum, interp): Remove unneeded interp member.
	Call supercalss getNextDescriptor() instead of
	our own getNextSockNum(). Override close()
	method to handle our own shutdown needs.
	* src/jacl/tcl/lang/StdChannel.java (close, flush,
	open, write): Remove close() method since that
	is now handled in superclass.

2001-11-16  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/Channel.java:
	* src/jacl/tcl/lang/FileChannel.java:
	* src/jacl/tcl/lang/ServerSocketChannel.java:
	* src/jacl/tcl/lang/SocketChannel.java:
	* src/jacl/tcl/lang/StdChannel.java:
	Refactor subclases of Channel. Move reader, writer,
	eofCond, BUF_SIZE, and eof() members into the superclass.

2001-11-16  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/InfoCmd.java (InfoNameOfExecutableCmd):
	Implement info nameofexecutable command by doing a query
	of the "JAVA" system property.
	* tests/tcl/info.test: Check that the info nameofexecutable
	command does not return "".

2001-11-15  Neil Madden  <neil@tallniel.co.uk>

	* src/jacl/tcl/lang/ServerSocketChannel.java:
	* src/jacl/tcl/lang/SocketChannel.java:
	* src/jacl/tcl/lang/SocketCmd.java:
	* src/jacl/tcl/lang/SocketConnectionEvent.java:
	Add initial socket implementation for both client
	and server sockets. The code does not work with
	async sockets and its functionality is limited
	because of the lack of fconfigure and fileevent
	commands in Jacl.

2001-11-15  Mo DeJong  <mdejong@users.sourceforge.net>

	* src/jacl/tcl/lang/ExecCmd.java (cmdProc): If an
	exec'ed subprocess exits with a non-zero status
	set the error code to a three value list like
	{CHILDSTATUS PID NUMBER}.
	* tests/inprogress/ExecCmd.test: Test error code
	after a call to the exec command.

2001-06-03  Mo DeJong  <mdejong@redhat.com>

	* tests/tcl/interp.test: Add interp-32.1, it checks
	that the child's CWD is inherited from a parent's interp.

2001-06-03  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/EventuallyFreed.java (dispose): Make
	the dispose() method public, it was incorrectly changed
	from public when the EventuallyFreed class was created.

2001-05-12  Christian Krone  <christian.krone@softwareag.com>

	* src/jacl/tcl/lang/Util.java (findElement): Fix parsing of
	nested quoted braces in lists.
	* tests/tcl/lindex.test: Add test for parsing of nested
	quoted braces in list.

2001-05-12  Christian Krone  <christian.krone@softwareag.com>

	* tests/jacl/Interp.test: Add braces around the result
	for the Interp-5.1 test.

2001-05-12  Christian Krone  <christian.krone@softwareag.com>

	* src/jacl/tcl/lang/Interp.java (removeInterpResolver):
	Use Vector.removeElement()instead of Vector.remove()
	which is not supported by JDK 1.1.

2001-05-05  Mo DeJong  <mdejong@redhat.com>

	* tests/tcljava/JavaImportCmd.test: Fix incorrectly
	spelled error message that was causing test failures.

2001-05-05  Christian Krone  <christian.krone@softwareag.com>

	* src/jacl/tcl/lang/Interp.java (resolvers,
	Interp, eventuallyDispose, ResolverScheme,
	addInterpResolver, getInterpResolver,
	removeInterpResolver):
	* src/jacl/tcl/lang/NamespaceCmd.java (createNamespace,
	findCommand, findNamespaceVar, setNamespaceResolver,
	getNamespaceResolver, Namespace):
	* src/jacl/tcl/lang/Resolver.java: New file.
	* src/jacl/tcl/lang/Var.java (lookupVar):
	* src/jacl/tcl/lang/library/init.tcl (unknown):
	Add interp and namespace variable and command
	resolver implementation.

2001-02-07  Christian Sorensen  <cs@maerskdata.dk>

	* src/jacl/tcl/lang/FileCmd.java (getMtime):
	Divide the File.lastModified() result by
	1000 so that the returned result will
	be in seconds instead of milliseconds.

2001-01-28  Mo DeJong  <mdejong@redhat.com>

	* src/tcljava/tcl/lang/JavaImportCmd.java:
	Fix up diction of error messages.

2001-01-28  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/SubstCmd.java:
	Use a StringBuffer instead of repeatedly
	concatenating strings together. Remove
	unneeded if block. These changes should
	improve the execution time of the
	subst command.

2001-01-28  Mo DeJong  <mdejong@redhat.com>

	* tests/tcl/join.test:
	* tests/tcl/lindex.test:
	* tests/tcl/link.test:
	* tests/tcl/linsert.test:
	* tests/tcl/list.test:
	* tests/tcl/listObj.test:
	* tests/tcl/llength.test:
	* tests/tcl/lrange.test:
	* tests/tcl/lreplace.test:
	* tests/tcl/lsearch.test:
	* tests/tcl/misc.test:
	* tests/tcl/namespace-old.test:
	* tests/tcl/namespace.test:
	* tests/tcl/obj.test:
	* tests/tcl/parse.test:
	* tests/tcl/parseExpr.test:
	* tests/tcl/parseOld.test:
	* tests/tcl/pkg.test:
	* tests/tcl/platform.test:
	* tests/tcl/proc-old.test:
	* tests/tcl/proc.test:
	* tests/tcl/pwd.test:
	* tests/tcl/regexp.test:
	* tests/tcl/rename.test:
	* tests/tcl/scan.test:
	* tests/tcl/security.test:
	* tests/tcl/set-old.test:
	* tests/tcl/set.test:
	* tests/tcl/split.test:
	* tests/tcl/stack.test:
	* tests/tcl/string.test:
	* tests/tcl/stringObj.test:
	* tests/tcl/subst.test:
	* tests/tcl/switch.test:
	* tests/tcl/timer.test:
	* tests/tcl/trace.test:
	* tests/tcl/unknown.test:
	* tests/tcl/uplevel.test:
	* tests/tcl/upvar.test:
	* tests/tcl/util.test:
	* tests/tcl/var.test:
	* tests/tcl/while-old.test:
	* tests/tcl/while.test: Add or update tests
	to match the ones in Tcl 8.3.

2000-12-27  Mo DeJong  <mdejong@redhat.com>

	* tests/tcl/error.test:
	* tests/tcl/eval.test:
	* tests/tcl/execute.test:
	* tests/tcl/expr-old.test:
	* tests/tcl/expr.test:
	* tests/tcl/fileName.test:
	* tests/tcl/for-old.test:
	* tests/tcl/for.test:
	* tests/tcl/foreach.test:
	* tests/tcl/format.test:
	* tests/tcl/get.test:
	* tests/tcl/history.test:
	* tests/tcl/if-old.test:
	* tests/tcl/if.test:
	* tests/tcl/incr-old.test:
	* tests/tcl/incr.test:
	* tests/tcl/interp.test: Add or update tests
	to match the ones in Tcl 8.3.

2000-12-23  Mo DeJong  <mdejong@redhat.com>

	* tests/tcl/append.test:
	* tests/tcl/assocd.test:
	* tests/tcl/binary.test:
	* tests/tcl/case.test:
	* tests/tcl/clock.test:
	* tests/tcl/compile.test:
	* tests/tcl/concat.test: Add or update tests
	to match the ones in Tcl 8.3. Some tests expose
	minor formatting issues for test arguments.

2000-12-23  Mo DeJong  <mdejong@redhat.com>

	* tests/all.tcl: Add missing test init file.
	* tests/defs: Add Tcl only implementations
	of test commands like testsetassocdata.

2000-12-23  Mo DeJong  <mdejong@redhat.com>

	* tests/tcl/CdCmd.test:
	* tests/tcl/FileCmd.test:
	* tests/tcl/Procedure.test:
	* tests/tcl/PwdCmd.test:
	* tests/tcl/RegexpCmd.test:
	* tests/tcl/ReturnCmd.test:
	* tests/tcl/SwitchCmd.test:
	* tests/tcl/UpdateCmd.test: Add tcltest
	package initilization and cleanup code
	to each of the test cases.

2000-12-22  Mo DeJong  <mdejong@redhat.com>

	* Makefile.in: The test target will now source
	tests/all.tcl instead of tests/all.
	* tests/all: Remove.
	* tests/defs: Remove old tcltest implementation,
	keep some old helper procs.
	* tests/tcltest.tcl: Import tcltest from Tcl 8.3.
	* tests/inprogress/AfterCmd.test:
	* tests/inprogress/BgErrorMgr.test:
	* tests/inprogress/CallFrame.test:
	* tests/inprogress/EventAdaptor.test:
	* tests/inprogress/ExecCmd.test:
	* tests/inprogress/ExprCmd.test:
	* tests/inprogress/GlobCmd.test:
	* tests/inprogress/TimerHandler.test:
	* tests/inprogress/Unicode.test:
	* tests/inprogress/UplevelCmd.test:
	* tests/inprogress/Util.test:
	* tests/jacl/FileCmd.test:
	* tests/jacl/IdleHandler.test:
	* tests/jacl/Interp.test:
	* tests/jacl/Notifier.test:
	* tests/tclblend/javaCmd.test:
	* tests/tclblend/javaIdle.test:
	* tests/tclblend/javaInterp.test:
	* tests/tclblend/javaObj.test:
	* tests/tclblend/javaTimer.test:
	* tests/tclblend/javaUtil.test:
	* tests/tcljava/ArrayObject.test:
	* tests/tcljava/AutomaticSignature.test:
	* tests/tcljava/BeanEvent.test:
	* tests/tcljava/BeanEventMgr.test:
	* tests/tcljava/ClassRep.test:
	* tests/tcljava/FieldSig.test:
	* tests/tcljava/FuncSig.test:
	* tests/tcljava/JavaBindCmd.test:
	* tests/tcljava/JavaCallCmd.test:
	* tests/tcljava/JavaCastCmd.test:
	* tests/tcljava/JavaDefineClassCmd.test:
	* tests/tcljava/JavaEventCmd.test:
	* tests/tcljava/JavaFieldCmd.test:
	* tests/tcljava/JavaImportCmd.test:
	* tests/tcljava/JavaInfoCmd.test:
	* tests/tcljava/JavaInstanceofCmd.test:
	* tests/tcljava/JavaInvoke.test:
	* tests/tcljava/JavaIsNullCmd.test:
	* tests/tcljava/JavaLoadCmd.test:
	* tests/tcljava/JavaLock.test:
	* tests/tcljava/JavaNewCmd.test:
	* tests/tcljava/JavaNullCmd.test:
	* tests/tcljava/JavaPropCmd.test:
	* tests/tcljava/JavaThrowCmd.test:
	* tests/tcljava/JavaTryCmd.test:
	* tests/tcljava/PkgInvoker.test:
	* tests/tcljava/PropertySig.test:
	* tests/tcljava/ReflectException.test:
	* tests/tcljava/ReflectObject.test:
	* tests/tcljava/TclEvent.test: Add tcltest
	package initilization and cleanup code
	to each of the test cases.

2000-11-19  Christian Krone  <christian.krone@softwareag.com>

	* src/jacl/tcl/lang/StdChannel.java: (Bug #121678:) The recently
	introduced method StdChannel.getChanName() was removed again,
	since with its existence the standard channels no longer occupy
	the first three slots in filename channel.
	* src/jacl/tcl/lang/ReadCmd.java:
	* src/jacl/tcl/lang/PutsCmd.java:
	* src/jacl/tcl/lang/GetsCmd.java: These command implementations
	now check themself for the needed read/write access, since the
	underlying channel don't know the user specified name of the
	channel.

2000-11-14  Mo DeJong  <mdejong@redhat.com>

	* tcljava.m4: The AC_FD_LOG macro was renamed
	to AS_MESSAGE_LOG_FD in the autoconf CVS. Use
	the new macro.

2000-10-31  Mo DeJong  <mdejong@redhat.com>

	* configure: Regen.
	* tcljava.m4: The configure script would fail
	if jikes was not found, fix that.

2000-10-29  Mo DeJong  <mdejong@redhat.com>

	* configure: Regen.
	* tcljava.m4: Properly quote call to AC_CACHE_CHECK.
	* src/native/javaCmd.c: Fixup a couple of comments.
	* tests/tcljava/ArrayObject.test: Correct test number.

2000-10-28  Mo DeJong  <mdejong@redhat.com>

	Finish merge from ajuba-tclblend-contract-2000-08-01-branch.

2000-10-27  Daniel Wickstrom  <danw@rtp.ericsson.se>

	* Makefile.in: Don't build unixNotifier.o.
	* src/jacl/tcl/lang/Notifier.java: Minor
	comment fixups.
	* src/native/java.h (JavaAlertNotifier, JavaDisposeNotifier,
	JavaInitNotifier): Remove declarations for unused functions.
	* src/native/javaNotifier.c: Add thread local cache for
	Notifier info, save the Tcl thread id in the Notifier instance.
	* src/tclblend/tcl/lang/Notifier.java: Support Notifier
	on a per thread basis.
	* unix/README.jacl:
	* unix/README.tclblend: Fixup build notes.
	* unix/unixNotifier.c: Removed single threaded
	Notifier implementation for Unix.
	* win/makefile.vc: Don't build win/winNotifier.o.
	* win/tclRegexp.h: Removed old support file.
	* win/winNotifier.c: Removed single threaded
	Notifier implementation for Windows.

2000-10-27  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Notifier.java: Change
	comments from C style to Java style.

2000-10-25  Mo DeJong  <mdejong@redhat.com>

	* src/native/javaObj.c: Added comment about
	how CObject.newInstance() is invoked.
	* src/tclblend/tcl/lang/CObject.java: CObject
	now extends TclEvent. When a dangling reference
	to a Tcl_Obj* is found in the CObject.finalize()
	method, it is freed in the creating thread instead
	of the JVM's GC thread.

2000-10-25  Mo DeJong  <mdejong@redhat.com>

	* docs/TclJavaLib/InternalRep.htm:
	* docs/TclJavaLib/ReflectObject.htm:
	* docs/TclJavaLib/TclBoolean.htm:
	* docs/TclJavaLib/TclDouble.htm:
	* docs/TclJavaLib/TclIndex.htm:
	* docs/TclJavaLib/TclInteger.htm:
	* docs/TclJavaLib/TclList.htm:
	* docs/TclJavaLib/TclObject.htm:
	* docs/TclJavaLib/TclString.htm:
	* docs/TclJavaLib/traceVar.htm: Update to
	account for change to InternalRep class.
	* src/empty/empty.jar: Regen.
	* src/empty/tcl/lang/CObject.java:
	* src/jacl/tcl/lang/CObject.java:
	* src/jacl/tcl/lang/NamespaceCmd.java:
	* src/jacl/tcl/lang/TclByteArray.java:
	* src/jacl/tcl/lang/TclList.java:
	* src/tclblend/tcl/lang/CObject.java:
	* src/tcljava/tcl/lang/ClassRep.java:
	* src/tcljava/tcl/lang/FieldSig.java:
	* src/tcljava/tcl/lang/FuncSig.java:
	* src/tcljava/tcl/lang/InternalRep.java:
	* src/tcljava/tcl/lang/JavaNewCmd.java:
	* src/tcljava/tcl/lang/PropertySig.java:
	* src/tcljava/tcl/lang/ReflectObject.java:
	* src/tcljava/tcl/lang/TclBoolean.java:
	* src/tcljava/tcl/lang/TclDouble.java:
	* src/tcljava/tcl/lang/TclIndex.java:
	* src/tcljava/tcl/lang/TclInteger.java:
	* src/tcljava/tcl/lang/TclString.java: Change InternalRep
	into an interface instead of an abstract class.

2000-10-25  Mo DeJong  <mdejong@redhat.com>

	* src/tcljava/tcl/lang/TclObject.java:
	* src/tcljava/tcl/lang/TclString.java: Comment fixup.

2000-10-22  Mo DeJong  <mdejong@redhat.com>

	* src/tests/tcljava/tests/javabind/Bind.java (run): Check
	for a null callback so as to avoid a NullPointerException.
	* tests/tcljava/JavaBindCmd.test: Give test thread time
	to queue up the event, then process all events in queue.

2000-10-22  Mo DeJong  <mdejong@redhat.com>

	* src/native/javaCmd.c (TclThreadCleanup, DestroyJVM,
	DetachTclThread, FreeJavaCache): Rename TclThreadCleanup
	to DetachTclThread. Add DestroyJVM callback to cleanup
	the thread that creates the JVM. Add FreeJavaCache,
	this method releases any global references in the JVM.

2000-10-21  Mo DeJong  <mdejong@redhat.com>

	* src/native/javaObj.c (JavaObjInit): Fix
	JavaObjInit so that it only inits the global
	data once. Add cmdTypePtrLock mutex to
	protect the global data from multiple threads.

2000-10-09  Mo DeJong  <mdejong@redhat.com>

	* src/xputils/xputils.tcl (appendpath, prependpath):
	Use list command to quote arguments set to uplevel.
	This fixes a bug that caused xputils to fail under Windows.

2000-08-26  Mo DeJong  <mdejong@redhat.com>

	* src/native/javaCmd.c (JavaSetupJava, TclThreadCleanup):
	Move JavaInfo cache into thread local storage. Removed
	javaVM_init_mutex. Create thread exit handler that
	will detach a Tcl thread from the JVM.

2000-08-26  Mo DeJong  <mdejong@redhat.com>

	* src/native/java.h (java, JavaGetCache): Remove
	global java variable, replaced it with JavaGetCache().
	* src/native/javaCmd.c:
	* src/native/javaIdle.c:
	* src/native/javaInterp.c:
	* src/native/javaList.c:
	* src/native/javaNotifier.c:
	* src/native/javaObj.c:
	* src/native/javaTimer.c: Call JavaGetCache() to get
	the JavaInfo pointer for the current thread.

2000-08-26  Mo DeJong  <mdejong@redhat.com>

	* src/native/java.h: Add method that corresponds
	to tcl.lang.Exceptions's constructor to the JavaInfo struct.
	* src/native/javaCmd.c (AddToClassCache, AddToMethodCache,
	AddToFieldCache): Remove the global arrays that were used
	to store class, method, and field signatures. We now init
	the JavaInfo struct by calling methods.

2000-08-23  Jiang Wu  <jwu@cs.stanford.edu>

	* src/tclblend/tcl/lang/Notifier.java (preserve, release,
	queueEvent, deleteEvents, deleteEvent, serviceEvent,
	getAvailableEvent, hasEvents): Fix bugs in Notifier,
	use an internal monitor instead of one on the class
	so that an event that calls vwait does not block
	other events from getting added to the after queue.

2000-08-23  Mo DeJong  <mdejong@redhat.com>

	* src/tests/tcljava/tests/AppendEventQueueThread.java: Add source
	for enqueue of event that does a vwait test.
	* tests/tcljava/TclEvent.test: Add test case for notifier
	queue bug.

2000-08-23  Mo DeJong  <mdejong@redhat.com>

	* configure: Regen.
	* tcljava.m4: Reject Tcl build that does not
	include thread support.

2000-08-19  Mo DeJong  <mdejong@redhat.com>

	* Makefile.in: Renamed TCLBLEND_CLASS_NAMES variable
	to TCLBLEND_JNI_HEADER_CLASS_NAMES.

2000-08-08  Mo DeJong  <mdejong@redhat.com>

	* src/native/java.h (JavaGetEnv):
	* src/native/javaCmd.c (JavaGetEnv, JavaInitEnv):
	Rewrite Tcl Blend initilization, create new method
	to handle all initialization in a thread safe way.
	* src/native/javaIdle.c:
	* src/native/javaInterp.c:
	* src/native/javaNotifier.c:
	* src/native/javaObj.c:
	* src/native/javaTimer.c: Call JavaGetEnv without
	an Interp argument.

2000-08-07  Mo DeJong  <mdejong@redhat.com>

	* src/native/javaCmd.c (JavaGetEnv): Rewrite
	JavaGetEnv, it was implemented as two methods
	that did the exact same thing for two different
	versions of the JDK. It is now a single method.

2000-08-06  Mo DeJong  <mdejong@redhat.com>

	* src/native/java.h:
	* src/native/javaCmd.c:
	* src/native/javaInterp.c:
	* src/tclblend/tcl/lang/NativeLock.java: Remove
	the tcl.lang.NativeLock class, it is not needed
	since we removed the big global lock.

2000-07-30  Mo DeJong  <mdejong@redhat.com>

	* src/native/java.h:
	* src/native/javaCmd.c:
	* src/native/javaIdle.c:
	* src/native/javaInterp.c:
	* src/native/javaList.c:
	* src/native/javaNotifier.c:
	* src/native/javaObj.c:
	* src/native/javaTimer.c:
	* src/native/javaUtil.c: Put the JNIEnv
	pointer in thread local storage. Create
	a per JVM init flag and a per thread init
	flag. Tcl interps in other threads can
	communicate with the JVM in the main
	thread using the synchronization
	primitives project by the JNI. Remove
	JAVA_LOCK, JAVA_UNLOCK, PUSH_JAVA_ENV,
	and POP_JAVA_ENV macros and associated
	Java monitor. Remove JavaSetEnv function.

2000-07-29  Jiang Wu  <jwu@cs.stanford.edu>

	* win/makefile.vc:
	Fix the makefile.vc to install the new xputil package, remove
	some errors that stopped the build, and install the .dll and
	.jar in lib/tclblend rather than lib.  The makefile now mostly
	matches what the UNIX side does for tclblend 1.3.

2000-10-28  Mo DeJong  <mdejong@redhat.com>

	Begin merge from ajuba-tclblend-contract-2000-08-01-branch.

2000-10-04  Mo DeJong  <mdejong@redhat.com>

	* demos/watchpkg/README: Add a better
	example of use of the sw* commands.

2000-08-22  Mo DeJong  <mdejong@redhat.com>

	* src/tests/tcljava/tests/JavaTest.java:
	* tests/tcljava/JavaInvoke.test: Add identity
 	test case for passing of a java.lang.String
	ReflectObject to a Java method.

2000-08-20  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/LreplaceCmd.java:
	* tests/tcl/lreplace.test: Update lreplace
	command to be 8.4 compliant.

2000-08-20  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/LsearchCmd.java: Update
	lsearch command to be 8.4 compatible.
	* tests/tcl/LsearchCmd.test: Remove.
	* tests/tcl/lsearch.test: Add 8.4 test cases.

2000-08-20  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/Expression.java (ExprGetValue):
	Expressions with &&, || or ?: now accept boolean string values.

2000-08-20  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/Expression.java (DoubleTooSmall,
	ExprLooksLikeInt): Check for ARITH UNDERFLOW, rename
	ExprLooksLikeInt to looksLikeInt.
	* src/jacl/tcl/lang/Parser.java (parseVar, backslash):
	No Exception, when parsing the following command: "set $a(foo".
	Correct handling for \x123 characters with its 8th bit set (>= \x80).
	* src/jacl/tcl/lang/StringCmd.java: 8.4 compatible string command.
	* src/jacl/tcl/lang/TclByteArray.java (toString): And a byte
	with 0xff to produce a char.
	* src/jacl/tcl/lang/Util.java (strtoul, toTitle): 0X123 will now
	be detected as valid hex number. 8.4 compatible error message for
	bad octal numbers. Add toTitle method to support string command.
	* tests/tcl/string.test: 8.4 compatible tests for string command.

2000-08-20  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/FileCmd.java: Don't
	back up over multiple dots in a file
	extension. This matches the behavior
	of newer versions of Tcl.

2000-08-20  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/ClockCmd.java:
	* tests/tcl/clock.test: Update Jacl's clock
	command to be Tcl 8.4 compliant.

2000-08-20  Christian Krone  <krischan@sql.de>

	* configure.in: Pass -ms5m -mx22m in JAVA_FLAGS.
	* diffs.txt: Add note about new interp command.
	* jaclsh.in: Dont set JAVA_FLAGS here.
	* new_features.txt: Add note about new interp command.
	* src/jacl/tcl/lang/BgErrorMgr.java (processIdleEvent):
	Add calls to Interp.preserve() and Interp.release().
	* src/jacl/tcl/lang/CatchCmd.java:
	Add call to Interp.resetResult().
	* src/jacl/tcl/lang/EventuallyFreed.java:
	Implement a ref counting scheme like
	Tcl_Preserve and Tcl_Release. We can't
	use GC because of Tcl's semantics.
	* src/jacl/tcl/lang/Interp.java (dispose,
	eventuallyDispose, createCommands,
	deleteCommandFromToken, renameCommand, preventAliasLoop,
	resetResult, eval, processUnexpectedResult, transferResult,
	hideCommand, exposeCommand, hideUnsafeCommands, invokeGlobal,
	invoke, allowExceptions):
	Make Interp derive from EventuallyFreed.
	Add guts needed to support slave/safe interps.
	Add interp command. Set the returnCode to TCL.OK
	when resetResult() is called. Add support for
	propagating error info slave to master interp as well
 	as hiding and exposing commands.
	* src/jacl/tcl/lang/InterpAliasCmd.java: Add command
	that will proxy aliases commands in an interp.
	* src/jacl/tcl/lang/InterpCmd.java: Add command
	that handles the interp Tcl command.
	* src/jacl/tcl/lang/InterpSlaveCmd.java: Add command
	that will handle commands for slave interp in the master.
	* src/jacl/tcl/lang/library/init.tcl: Remove stub
	interp command.
	* tests/tcl/interp.test: Add interp regression tests.

2000-08-19  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/BgErrorMgr.java: Use
	Java style comments instead of C style ones.

2000-07-31  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/FconfigureCmd.java: Don't
	raise error when -buffering option is given,
	just silently do nothing for now.
	* src/jacl/tcl/lang/ReadCmd.java: Fix bug
	that caused channel open with r+ to not
	work with the read command.

2000-07-31  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/Channel.java: Add refCount.
	* src/jacl/tcl/lang/CloseCmd.java (cmdProc):
	Use TclIO.unregisterChannel.
	* src/jacl/tcl/lang/FileChannel.java: Fix typos.
	* src/jacl/tcl/lang/OpenCmd.java: Fix typos.
	* src/jacl/tcl/lang/StdChannel.java (getChanName):
	Add getChanName method to StdChannel class.
	* src/jacl/tcl/lang/TclIO.java: Use refCount.

2000-07-29  Mo DeJong  <mdejong@redhat.com>

	* tests/tcljava/JavaLock.test: Use
	error string from Tcl 8.3 when a
	command is invoked with the incorrect
	number of arguments. Jacl does not
	yet generate a Tcl 8.3 compliant
	error in this case, so some of its
	regression tests will fail.

2000-07-29  Mo DeJong  <mdejong@redhat.com>

	* src/empty/empty.jar: Regen.
	* src/empty/tcl/lang/Interp.java:
	* src/jacl/tcl/lang/Interp.java:
	* src/native/javaInterp.c:
	* src/tclblend/tcl/lang/Interp.java:
	* src/tcljava/tcl/lang/ReflectObject.java:

2000-07-16  Christian Krone  <krischan@sql.de>

	* src/jacl/tcl/lang/ClockCmd.java: Upgrade
	Jacl's clock command to match Tcl 8.3.
	Even stardates are supported!
	* tests/tcl/clock.test: Upgrade to Tcl 8.3.

2000-07-13  Mo DeJong  <mdejong@redhat.com>

	* tcljava.m4: Add doublequotes around
	test variables that might be empty.

2000-07-13  Mo DeJong  <mdejong@redhat.com>

	* src/empty/empty.jar: Regen.
	* src/empty/tcl/lang/Interp.java:
	* src/jacl/tcl/lang/Interp.java:
	* src/tclblend/tcl/lang/Interp.java: Add conflict table variable.
	* src/tcljava/tcl/lang/ReflectObject.java: Overhaul reflect table
	implementation to avoid problem with object hash overlap in JDK
	1.2. We now use a second conflict table to store hash conflicts.

2000-06-15  Mo DeJong  <mdejong@redhat.com>

	* src/native/java.h:
	* src/native/javaCmd.c:
	* src/native/javaIdle.c:
	* src/native/javaInterp.c:
	* src/native/javaList.c:
	* src/native/javaNotifier.c:
	* src/native/javaObj.c:
	* src/native/javaTimer.c:
	* src/native/javaUtil.c:
	Rename JAVA_LOCK/JAVA_UNLOCK to
	PUSH_JAVA_ENV/POP_JAVA_ENV, create
	new JAVA_LOCK and JAVA_UNLOCK macros
	that just grab the monitor, use these
	new JAVA_LOCK/JAVA_UNLOCK macros in
	the rest of the code.

2000-06-03  Mo DeJong  <mdejong@redhat.com>

	* demos/pyramidpkg/AppletConsole.java:
	* demos/pyramidpkg/ConsoleKeyListener.java:
	* demos/pyramidpkg/Pyramid.java:
	Overhauled the pyramid demo so that it uses
	the Tcl event queue in a thread safe way.

2000-06-03  Mo DeJong  <mdejong@redhat.com>

	* new_features.txt: Added notes about
	new JVM support. Minor comment fixup.
	* src/native/java.h: Removed old code
	that supported Tcl 8.0.
	* src/jacl/tcl/lang/Interp.java (appendElement):
	Removed extra call to toString() on result.

2000-06-03  Mo DeJong  <mdejong@redhat.com>

	* Makefile.in: Merged from unix/Makefile.in
	* aclocal.m4:
	* autogen.sh: Added
	* configure: Added
	* configure.in: Merged from unix/configure.in
	* jaclsh.in: Added
	* jtclsh.in: Added
	* tcljava.m4: Added
	* tcljavaConfig.sh.in: Added
	* unix/Makefile.in: Removed
	* unix/configure.in: Removed
	* unix/install-sh: Removed
	* unix/jaclsh.in: Removed
	* unix/jtclsh.in: Removed
	* unix/tcljavaConfig.sh.in: Removed
	Finished major overhaul of the build
	system. The new configure process
	is much more robust and will support
	more systems that the older one.
	Tcl Blend can now use the Kaffe JVM.
	Support for IBM Java2-13 also added.

2000-05-24  Mo DeJong  <mdejong@redhat.com>

	* tests/inprogress/Unicode.test: Overhauled
	the unicode conversions/substitution tests.
	They now take a lot less time to run.

2000-05-24  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Interp.java (evalResource):
	* src/tclblend/tcl/lang/Interp.java (evalResource):
	Changed class that getResourceAsStream is called on
	so that we don't use a system class loader.

2000-05-21  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Shell.java: Removed
	unused bits of old code that were
	still lying around. Added FIXME comment
	about TCL.OK which is not accessible.

2000-05-21  Mo DeJong  <mdejong@redhat.com>

	* unix/Makefile.in: Changed target
	name from dists to dist to conform
	to GNU specs.

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* unix/configure.in: Moved minimum
	version number back to 8.3 instead
	of 8.3.1 because of a bug in Tcl's
	package command.

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* unix/Makefile.in: Fixed up "make test"
	rules, added output that makes it easy
	to run the tests from "make shell".

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* src/tclblend/tcl/lang/Interp.java: Fixed
	up comments about flags argument, for instance
	GLOBAL_ONLY was changed to TCL.GLOBAL_ONLY.

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Shell.java: Added calls
	to preserve() and release() on cmd object being
	passed to recordAndEval() to avoid a null
	pointer exception.

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* src/pkgIndex.tcl:
	* src/tcljava/tcl/lang/BlendExtension.java:
	Moved the exporting of commands in the java
	namespace from pkgIndex.tcl to BlendExtension.java
	so that it will work in both Jacl and Tcl Blend.

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* docs/TclJavaLib/Eval.htm:
	* src/jacl/tcl/lang/BgErrorMgr.java:
	* src/jacl/tcl/lang/Interp.java:
	* src/jacl/tcl/lang/Parser.java:
	* src/tcljava/tcl/lang/TCL.java:
	* src/tests/jacl/tcl/lang/TestEval2Cmd.java:
	* src/tests/jacl/tcl/lang/TestEvalObjvCmd.java:
	Moved eval() flags like TCL_EVAL_GLOBAL
	from the Jacl Parser class to the tcljava
	TCL class. This makes it possible to write
	code that calls eval() with flags arguments
	that works in both Jacl and Tcl Blend. Also
	removed an unused variable from Jacl's Interp.

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Interp.java: Removed
	unused primaryThread variable.

2000-05-14  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/ConsoleEvent.java: Removed
	class as it is no longer needed after changes to Shell.
	* src/jacl/tcl/lang/Shell.java: Overhauled the
	way the Shell program interacts with the Interp.
	The old way was not thread safe. The prompt displayed
	when a command is not yet complete has also been
	changed to match recent verisons of Tcl.

2000-05-13  Mo DeJong  <mdejong@redhat.com>

	* src/pkgIndex.tcl: Added missing
	namespace export of the java::import cmd.

2000-05-13  Mo DeJong  <mdejong@redhat.com>

	* src/native/javaCmd.c:
	* src/native/javaObj.c:
	* src/native/javaUtil.c:
	* src/native/tclResult.c:
	* unix/Makefile.in:
	* unix/configure.in:
	Removed old compat code that supported
	building Tcl Blend with Tcl 8.0.
	We now require Tcl 8.3.1 as a minimum.

2000-05-13  Mo DeJong  <mdejong@redhat.com>

	* unix/Makefile.in: Changed var named
	TCL_INSTALL_BIN_DIR to TCL_INSTALL_LIB_DIR.
	Added "make gdb" rule for Tcl Blend debugging.
	* unix/configure.in: Added search on PATH for
	gdb. Changed var named TCL_INSTALL_BIN_DIR to
	TCL_INSTALL_LIB_DIR.

2000-05-13  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Notifier.java:
	Fixed small typo in a comment.

2000-05-13  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Shell.java:
	Dropped use of Jacl Channel objects in
	favor of directly calling System.in and
	System.out.

2000-04-07  Mo DeJong  <mdejong@redhat.com>

	* README.jacl:
	* README.tclblend: Fixed up README files
	for the 1.3 version.
	* src/pkgIndex.tcl: Major overhaul of
	the tclblend package loading process, we
	now make use of the XpUtils package.
	* src/jacl/tcl/lang/Interp.java: Updated
	Java package version to 1.3.0.
	* src/tclblend/tcl/lang/Interp.java: Moved
	name of tclblend shared lib into a variable.
	* src/tcljava/tcl/lang/BlendExtension.java:
	Updated Java package version to 1.3.0.
	* src/tcljava/tcl/lang/TclInteger.java:
	Added Tcl C function names to documentation.
	* src/xputils/iload.tcl:
	* src/xputils/iload.test:
	* src/xputils/pkgIndex.tcl:
	* src/xputils/xputils.tcl:
	* src/xputils/xputils.test:
	Added XpUtils package for Tcl Blend.
	* unix/Makefile.in: Added tcljavaConfig.sh support.
	Fixed runtime linker search path so that it checks
	where the tcl lib will be installed not where it was
	built. Fixed install so that all tcljava libraries
	are installed into a common Tcl/lib/tcljava${VERSION}
	directory. Added support for XpUtils package.
	* unix/configure.in: Updated Java package version
	to 1.3.0. Added tcljavaConfig.sh support.
	Set minimum supported Tcl version to 8.3.
	* unix/jaclsh.in:
	* unix/jtclsh.in:
	Updated to account for new lib install location.
	* unix/tcljavaConfig.sh.in: New file.
	* unix/tools/vutil/current:
	* win/makefile.vc:
	Updated Java package version to 1.3.0.

2000-04-03  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/ConsoleEvent.java:
	* src/jacl/tcl/lang/Shell.java:
	* src/tcljava/tcl/lang/TclException.java: Fixed
	up the way an event is sent to an interp and
	how the error result is returned so that
	the Shell class is more thread safe.

2000-04-03  Mo DeJong  <mdejong@redhat.com>

	* diffs.txt: Added note about Interp.recordAndEval
	* new_features.txt: Added note about the addition
	of the history command.
	* docs/cFunctions.html: Fixed Interp.recordAndEval
	doc and reformatted to a single list.
	* docs/TclJavaLib/Eval.htm: Fixed Interp.recordAndEval
	documentation.
	* src/jacl/tcl/lang/ConsoleEvent.java: Fixed up
	Interp.recordAndEval method invocation.
	* src/jacl/tcl/lang/Interp.java: Changed signature
	for recordAndEval method.
	* src/tclblend/tcl/lang/Interp.java: Added empty stub
	for recordAndEval method.
	* tests/tcl/history.test: Added regression tests for
	history command.

2000-04-01  Mo DeJong  <mdejong@redhat.com>

	* src/tcljava/tcl/lang/ReflectObject.java: improved some
	error and debug messages.

2000-04-01  Mo DeJong  <mdejong@redhat.com>

	* unix/Makefile.in: added "make check" rule as an alias
	to "make test" to conform to the GNU coding standards.

2000-04-01  Mo DeJong  <mdejong@redhat.com>

	* unix/Makefile.in:
	* win/makefile.vc: Fixed bug that caused the pyramidpkg
	to get compiled and shipped with tclblend. This fix was
	also back ported to the old 1.2 version.

2000-04-01  Mo DeJong  <mdejong@redhat.com>

	* unix/kaffe_tests: removed useless file.

2000-04-01  Mo DeJong  <mdejong@redhat.com>

	* unix/Makefile.in: fixed up "make dists" rule.

2000-03-30  Mo DeJong  <mdejong@redhat.com>

	* changes.txt: updated contents as a result
	of back porting fixes to the 1.2 branch.

2000-03-29  Mo DeJong  <mdejong@redhat.com>

	* unix/configure.in: removed IRIX hack that was added
	on 2000-02-23 but in fact did not work.

2000-03-20 Mo DeJong  <mdejong@redhat.com>

	* src/tests/tcljava/tests/javabind/ActionEvent.java:
	* src/tests/tcljava/tests/javabind/ActionListener.java:
	* src/tests/tcljava/tests/javabind/Bind.java:
	* tests/tcljava/JavaBindCmd.test:
	* unix/Makefile.in
	Added new multi-threaded test case for the java::bind command.

2000-03-17 Mo DeJong  <mdejong@redhat.com>

	* tests/inprogress/Unicode.test: Added test cases
	for Jacl substitution and passing of strings from
	Java to Tcl.
	* src/jacl/tcl/lang/Parser.java:
	Fixed a horrible bug that caused \u1234 to be
	parsed as \u1234 + 4. The parser was off by one.

2000-03-17 Mo DeJong  <mdejong@redhat.com>

	* docs/cFunctions.html:
	* docs/TclJavaLib/TclInteger.htm:
	* src/jacl/tcl/lang/LindexCmd.java:
	* src/jacl/tcl/lang/LinsertCmd.java:
	* src/jacl/tcl/lang/LrangeCmd.java:
	* src/jacl/tcl/lang/LreplaceCmd.java:
	* src/jacl/tcl/lang/LsortCmd.java:
	* src/jacl/tcl/lang/StringCmd.java:
	* src/jacl/tcl/lang/Util.java:
	* src/tcljava/tcl/lang/TclInteger.java:
	* tests/tcl/lindex.test:
	* tests/tcl/linsert.test:
	* tests/tcl/lrange.test:
	* tests/tcl/lreplace.test:
	* tests/tcl/string.test:
	Renamed and moved the TclInteger.getForIndex() method
	to Util.getIntForIndex(). It is a
	mapping for the TclGetIntForIndex function
	which is private, so it did not belong
	in TclInteger. Along with this change, I
	updated the implementation of getIntForIndex
	so that it is compatible with Tcl 8.3, which
	also required adding the Util.checkBadOctal()
	method. A number of regression test were update
	to account for these changes.

2000-03-14  Mo DeJong  <mdejong@redhat.com>

	* demos/packDemo/StringSplitter.java: Removed file.
	* demos/packDemo/PackerLayout.java: Added split()
	method that was implemented in StringSplitter. Also
	added a method to query the current pack settings.
	The ability to "update" a widget was also added.

2000-03-10  Mo DeJong  <mdejong@redhat.com>

	* src/jacl/tcl/lang/Expression.java:
	* src/jacl/tcl/lang/StringCmd.java:
	* src/jacl/tcl/lang/Util.java: Got rid of the
	Util.isLetterOrDigit() method. It was a workaround
	for a bug in the Microsoft JVM. Since we do not
	support the Microsoft JVM and it does not exist
	anymore, there is no reason to leave this bug
	workaround in the code.

2000-03-01  Mo DeJong  <mdejong@redhat.com>

	* diffs.txt:
	* new_features.txt:
	* src/jacl/tcl/lang/BinaryCmd.java:
	* src/jacl/tcl/lang/TclByteArray.java:
	* tests/tcl/binary.test:
	* src/jacl/tcl/lang/Interp.java: Added implementation
	of Tcl's binary comand to Jacl. The implementation was donated
	by Christian Krone <krischan@sql.de>.

2000-03-01  Mo DeJong  <mdejong@redhat.com>

	* README.jacl:
	* README.tclblend: Updated Team member names.

2000-02-23  Mo DeJong  <mdejong@redhat.com>

	* src/tclblend/tcl/lang/Interp.java: Removed old code
	that was commented out. Fixed comments.

2000-02-23  Mo DeJong  <mdejong@redhat.com>

	* unix/configure.in: improved the error message displayed when
	the directory given by --with-tcl does not exist by adding
	the name of the directory we are searching for to the err msg.	

2000-02-23  Mo DeJong  <mdejong@redhat.com>

	* docs/cFunctions.html:
	* docs/TclJavaLib/Eval.htm:
	* src/jacl/tcl/lang/ConsoleEvent.java:
	* src/jacl/tcl/lang/Interp.java:
	* src/jacl/tcl/lang/library/history.tcl:
	* src/jacl/tcl/lang/library/init.tcl: Added implementation of
	the history command to Jacl. The implementation was donated
	by Christian Krone <krischan@sql.de>.

2000-02-23  Mo DeJong  <mdejong@redhat.com>

	* README.jacl:
	* diffs.txt:
	* new_features.txt:
	* unix/Makefile.in:
	* src/jacl/tcl/lang/RegexpCmd.java:
	* src/jacl/tcl/lang/RegsubCmd.java:
	* src/jacl/tcl/lang/Util.java:
	* src/jacl/sunlabs/brazil/util/regexp/Regexp.java:
	* src/jacl/sunlabs/brazil/util/regexp/Regsub.java:
	* src/jacl/tcl/lang/TclRegexp.java: Added new regular
	expression implementation for Jacl donated by
	Colin Stevens <colin.stevens@sun.com>.

2000-02-23  Mo DeJong  <mdejong@redhat.com>

	* license.oro:
	* src/jacl/oro.jar:
	* src/jacl/tcl/regex/OroRegexMatcher.java:
	* src/jacl/tcl/regex/OroRegexpCmd.java:
	* src/jacl/tcl/regex/OroRegsubCmd.java:
	* src/jacl/tcl/lang/RegexMatcher.java: Removed all files
	that were part of the ORO regexp implementation for Jacl.

2000-02-23  Mo DeJong  <mdejong@redhat.com>

	This ChangeLog file is new, for descriptions of
	older changes see changes.txt.
