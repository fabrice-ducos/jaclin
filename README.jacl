Jacl

RCS: @(#) $Id: README.jacl,v 1.14 2003/07/25 07:05:29 mdejong Exp $

1. Introduction
---------------

Jacl (which stands for Java Application Command Language) is a
platform independent scripting language for Java. The feature set and
functionality of Jacl are structured to mirror the scripting language
Tcl version 8. In addition to the write-once-run-anywhere
philosophy, Jacl provides it's user with two other key concepts.
First, Jacl enables users to write Tcl extensions entirely in Java.
Extension writers can use the classes supplied in tcl.lang.*, as well
as any other classes, to write portable extensions.  Second, Jacl
includes the Java Package, which provides a direct Tcl interface to
Java Objects.  For example, the Java Package contains a Tcl command,
java::info, that provides a Jacl user with information about the
public methods, fields, etc. of a given Java class or object.  The
Java Package enables the user to script Java.

2. Documentation
----------------

The new webste includes a getting started page that provides
a good intro to using Tcl/Java. One can also find demos
included in this release that provide examples of how to
integrate Tcl and Java. The "docs" directory contains additional
information.  See the "diffs.txt" file in this directory for a list of
Tcl features and the extent to which they are implemented in Jacl.
The "new_features.txt" file describes features that have been
added in each release.

3. Requirements
---------------

The Jacl distribution requires the Java Development Kit 1.1 or
greater. Jacl has been tested on Win95, WinNT, Solaris, IRIX,
and Linux. It should also work on other systems that
have a correctly implemented Java VM.

Jacl works under JDK1.2 and greater, see known_issues.txt for
a list of known problems and bugs.

4. Installation
---------------

A unified build system that works under both Unix and Windows
is used to build Jacl. To build on UNIX, just run the supplied
configure script in a shell. To build on Windows, you will
first need to download the msys_mingw package, it provides
a minimal set of tools needed to build applications under
Windows.

http://sourceforge.net/project/showfiles.php?group_id=10894

Unzip the msys_mingw package in a directory and click on the
msys shortcut to start the msys shell. You can then run the
configure script from inside this shell.

To run the configure script, just type ./configure in the
toplevel directory. This runs a configuration script created
by GNU autoconf, which configures Jacl for your system and
creates a Makefile. The configure script allows you to customize
the Jacl configuration for your site; for details on how you can
do this, type "./configure --help" or refer to the autoconf
documentation (not included here). The most commonly used
arguments to the configure script are as follows:

	--prefix=DIR		By default, the configure script will
                                assume that you want to install into
                                /usr/local. Under Windows, the /usr/local
                                directory is mapped to a Windows path
                                based on where you installed mingw_msys.
				One can specify a specific install
                                directory by passing the directory name
                                as an argument to the prefix option.
                                For example, --prefix=/opt/jacl or
                                or --prefix=D:/jacl under Windows.

	--with-jdk=DIR		By default, the configure script will
                                attempt to find the JDK by searching on
                                the PATH for the javac program. If the
                                javac program can not be found on the
                                PATH or if you do not want to use the
				JDK that it finds, you will need to use
                                this switch to tell configure where
                                it should look for the JDK binaries.

	--with-kaffe=DIR	If this switch is given the configure script
				will attempt to configure for use with the
                                Kaffe JVM. See www.transvirtual.com for more
                                info about Kaffe. This switch should be used
                                with the absolute path to the directory where
                                your Kaffe binaries are installed.

	--with-jikes=PROG	The JDK ships with a java compiler called
				javac. This compiler works but it is very
				slow. Many people would rather use the
				jikes compiler from IBM because it is much
				faster than javac and it produces better code.
				On my system, a compile with javac takes
				1 minute while a compile with jikes
                                takes less than 3 seconds. If this switch is
                                given with no PROG argument then the configure
                                script will search for jikes on the PATH.
                                If a PROG argument is provided it must be the
                                absolute path name of your jikes executable.
                                See www.research.ibm.com/jikes for more info.

Running the configure script will generate a Makefile, assuming that
no errors occurred during the configure process. You should now
type "make", this will create two library files called jacl.jar and
tcljava.jar. The jacl.jar library file stores the class files that
are only used by jacl. The tcljava.jar library file stores the class
files that are shared between jacl and tclblend.

After the make finishes you can quickly test out jacl by typing
"make shell" which will drop you into a running jacl shell where
you can type in commands. You can also run the regression tests
by typing "make test". See tests/README for more information
about the regression test suite

When you are ready to install, type "make install" to install
the jacl.jar and tcljava.jar libraries on your system. Doing the
install will also create a wrapper script called jaclsh which you
can use to run jacl without setting the CLASSPATH. After the wrapper
script has been installed a test program will be run to ensure that
the installed program is working correctly. If you want to run jacl
with special arguments you will need to edit the jaclsh script. Note
that you can not run the jaclsh before installing it.

5. License Agreement
---------------------

See the file "license.terms" for information on usage and 
redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.

6. Contact Information
----------------------

Jacl 1.0 was released by the now defunct SunScript group at Sun Labs.
The majority of the Jacl/Tcl Blend developers spun out of Sun Labs
into Scriptics.

Jacl 1.1 and 1.2 were primarily by people outside of Scriptics,
with assistance from Scriptics.

Newer versions of Jacl are crafted by independent developers.

7. Getting Help
----------------

Users of Tcl Blend or Jacl should make use of the tcljava-user mailing
list at SourceForge. This is the place to ask questions or post scripts
that are causing you trouble. Basically, any Jacl or Tcl Blend related
question is fine on the user list.

http://lists.sourceforge.net/lists/listinfo/tcljava-user

There is also a mailing list for Jacl and Tcl Blend developers.
If you have a specific question about some implementation feature,
have a patch for Jacl or Tcl Blend, or are interested in implementing
some feature, then you should post a note to the developers mailing list.

http://lists.sourceforge.net/lists/listinfo/tcljava-dev

Note that you will have to subscribe to the mailing lists before
posting to them. Some people this is is somehow "unfriendly", but
if we did not do this the mailing list would be full of spam and
it would be useful to nobody.

In addition to the mailing lists, you can ask about Jacl or Tcl Blend
or on the Tcl newsgroup. The network news group "comp.lang.tcl"
intended for the exchange of information about Tcl, Tk, and
related applications. It can also be useful to do a google groups
search on comp.lang.tcl for Jacl or Tcl Blend related questions.

When reporting bugs, please provide a short Tcl script that we can use
to reproduce the bug.  Make sure that the script runs with bare-bones
Tcl and doesn't depend on any extensions or other programs,
particularly those that exist only at your site.  Also, please include
these additional pieces of information with the script:
    (a) How do we use the script to make the problem happen (e.g.
	what things do we click on, in what order)?
    (b) What happens when you do these things (presumably this is
        undesirable)?
    (c) What did you expect to happen?
    (d) What platform are you running on (Machine, OS, etc.)?
    (e) What releases of Tcl products are you using?

8. Using Jacl in applets
-------------------------

Currently there are many issues that make it difficult to run Jacl as
an applet inside popular web browsers:

a) For remote applets, both Netscape and IE disallow the
   introspection of class members.  This makes it impossible to use
   any of the following commands: java::new, java::call, java::prop,
   java::field, etc.

b) You can install Jacl as a local Java package on your machine to
   get around the restriction mentioned in (a), but then Netscape
   will not read any of the Jacl library scripts, such as init.tcl,
   because it does not allow your applet to read from local disks.

   (a) and (b) together make it difficult to run Jacl as either a
   remote or a local applet.

c) Netscape 4.0.x does not yet support the JDK 1.1 event model.  This
   makes it impossible to create event handlers for any AWT widgets
   created by the java::new command.

Due to these current difficulties, we have decided not try to
support the use of Jacl inside applets.


The Jacl 1.0 & Tcl Blend 1.0 team at Sun Script
-----------------------------------------------

Ray Johnson - Project Manager
Melissa Hirschl
Ioi Lam
Bryan Surles
Special thanks to Scott Stanton who implemented Tcl Blend.


The Jacl 1.1 & Tcl Blend 1.1 team
---------------------------------
Mo DeJong (University of Minnesota)
Christopher Hylands (UC Berkeley)
John Reekie (UC Berkeley)
Bryan Surles (Scriptics)

The Jacl 1.2 & Tcl Blend 1.2 team
---------------------------------
Mo DeJong (University of Minnesota)
Scott Redman (Scriptics)

The Jacl 1.3 & Tcl Blend 1.3 team
---------------------------------
Mo DeJong (Cygnus / Red Hat)
Scott Redman (Scriptics)
Christian Krone (SQL Datenbanksysteme GmbH)
