'\"
'\" Copyright (c) 1994-1998 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\" 
.so man.macros
.TH Interp 3 1.0 Jacl "Jacl Library Procedures"
.BS
.SH CLASS
tcl.lang.Interp -- The Interp class represents the Jacl interpreter.

.SH METHODS
.TP
\fBCREATION/DISPOSAL\fR:  Interp, dispose
See \fBdispose\fR
.TP
\fBVARIABLES\fR:  setVar, getVar, unsetVar
See \fBsetVar\fR
.TP
\fBTRACES\fR:  traceVar, untraceVar
See \fBtraceVar\fR
.TP
\fBCOMMANDS\fR:  createCommand, deleteCommand, getCommand
See \fBcreateCommand\fR
.TP
\fBEVALUATION\fR:  eval, evalFile, commandComplete
See \fBeval\fR
.TP
\fBRESULT PROCESSING\fR:  setResult, getResult, resetResult
See \fBsetResult\fR
.TP
\fBERROR HANDLING\fR:  backgroundError, addErrorInfo, setErrorCode
See \fBbackgroundError\fR
.TP
\fBEVENT HANDLING\fR:  getNotifier
See \fBgetNotifier\fR
.TP
\fBASSOC-DATA\fR:  setAssocData, getAssocData, deleteAssocData
See \fBsetAssocData\fR
.TP
\fBPACKAGE\fR:  pkgRequire pkgProvide
See \fBpkgRequire\fR

.BE

.SH DESCRIPTION
.PP
The Interp class represents the Jacl interpreter, which is
the life blood of Jacl.  It centralizes the data and control of Jacl
programs.
.PP
The Interp class contains many varying public methods that control the
Jacl interpreter. It includes constructor and disposal methods as well
as methods that control the value of Jacl variables and commands.  It
also includes an interface to evaluation of Tcl commands, including
result processing, error handling, and event notification.
.PP
This manual entry categorizes the methods of the Interp class by thier
functionality.  For more details on specific methods, check the
documentation for their respective categories.
.TP
\fBdispose\fR
The constructor and \fBdispose\fR method offer creation and disposal
of instances of the \fBInterp\fR class.  See the \fBdispose\fR manual
entry for more details.
.TP
\fBsetVar\fR, \fBgetVar\fR, \fBunsetVar\fR
These methods manipulate the variables inside the interpreter.  See
the \fBsetVar\fR manual entry for more details.
.TP
\fBtraceVar\fR, \fBuntraceVar\fR
These methods offer an interface to monitor accesses to the variables
inside the interpreter.  See
the \fBtraceVar\fR manual entry for more details.
.TP
\fBcreateCommand\fR, \fBdeleteCommand\fR, \fBgetCommand\fR
These methods create, query, modify and delete Tcl commands
from the interpreter.  See
the \fBcreateCommand\fR manual entry for more details.
.TP
\fBeval\fR, \fBevalFile\fR, \fBcommandComplete\fR
These methods are the interface for Tcl commands to be evaluated in
the interpreter and to check completeness of commands before
evaluating them.  See
the \fBEval\fR manual entry for more details.
.TP
\fBsetResult\fR, \fBgetResult\fR, \fBresetResult\fR
These methods read and modify the interpreter's result object.  See
the \fBsetResult\fR manual entry for more details.
.TP
\fBbackgroundError\fR, \fBaddErrorInfo\fR, \fBsetErrorCode\fR
These methods manipulate the error info pertaining to Tcl commands
evaluated in the interpreter.  See the \fBbackgroundError\fR manual
entry for more details.
.TP
\fBgetNotifier\fR
This method retrieves the notifier associated with the interpreter.
See the \fBgetNotifier\fR manual entry for more details.
.TP
\fBsetAssocData\fR, \fBgetAssocData\fR, \fBdeleteAssocData\fR
These methods offer an interface to create and delete named
association between user-specified data and the interpreter.  See
the \fBsetAssocData\fR manual entry for more details.
.TP
\fBpkgRequire\fR, \fBpkgProvide\fR
These methods are for package version control.  See
the \fBpkgRequire\fR manual entry for more details.

.SH EXAMPLE
.RS
The following is an example of how an instance of the Interp object
may be used:
.CS
Interp interp;
interp = new Interp();
interp.eval("puts {Hello, world}");
interp.dispose();
.CE
.RE

.SH "SEE ALSO"
dispose, setVar, traceVar, createCommand, setResult, eval,
backgroundError, getNotifier, setAssocData, pkgRequire

.SH KEYWORDS
assoc-data, command, create, dispose, eval, error, event, interpreter,
result, trace, variable
