'\"
'\" Copyright (c) 1994-1998 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\" 
.so man.macros
.TH dispose 3 1.0 Jacl "Jacl Library Procedures"
.BS
.SH CLASS
tcl.lang.Interp -- This manual entry contains methods to create and
dispose of Interps.

.SH CONSTRUCTORS
.sp
\fBInterp\fR()

.SH METHODS
.sp
void \fBdispose\fR()

.SH OTHER METHODS
\fBsetVar\fR, 
\fBtraceVar\fR, 
\fBcreateCommand\fR,
\fBeval\fR, 
\fBsetResult\fR,
.br
\fBbackgroundError\fR,
\fBgetNotifier\fR, 
\fBsetAssocData\fR, 
\fBpkgRequire\fR
.BE

.SH DESCRIPTION
.TP
\fBInterp\fR
The \fBInterp\fR constructor takes no arguments and creates and
initializes an instance of the \fBInterp\fR class.  Built-in Tcl
commands are created, and global variables are initialized.
.TP
\fBdispose\fR
The \fBdispose\fR method frees all resources used by the interpreter.
Because references to the interpreter may be stored in global
hashtables, the Java garbage collector cannot be relied upon to
automatically free resources used by the interpreter.  This method
must be called when an interpreter is no longer in use.
The \fBdispose\fR method can safely be called multiple times.
However, after the \fBdispose\fR method is invoked, the interpreter is
no longer in a useable state and none of its other methods should be
called.

.SH EQUIVALENT C FUNCTIONS
Tcl_CreateInterp, Tcl_DeleteInterp

.SH "SEE ALSO"
Interp, Eval, setAssocData

.SH KEYWORDS
built in commands, dispose, free, garbage collection, global
varaibles, initialize, interpreter, reference
