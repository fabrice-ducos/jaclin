'\"
'\" Copyright (c) 1996-1998 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\" 
.so man.macros
.TH TclObject 3 1.0 Tcl "Jacl Library Procedures"
.BS
.SH CLASS
tcl.lang.TclObject -- the basic notion of an "object" in Tcl.

.SH CONSTRUCTORS
TclObject

.SH METHODS
.sp
\fBTclObject\fR(InternalRep \fIrep\fR)
.sp
void \fBsetInternalRep\fR(InternalRep \fIrep\fR)
.sp
InternalRep \fBgetInternalRep\fR()
.sp
String \fBtoString\fR()
.sp
void \fBinvalidateStringRep\fR()
.sp
void \fBpreserve\fR()
.sp
void \fBrelease\fR()
.sp
boolean \fBisShared\fR()
.sp
TclObject \fBtakeExclusive\fR()

.SH ARGUMENTS
.AS InternalRep rep .
.AP InternalRep rep
Internal representation to be stored in newly created TclObject.
.BE

.SH DESCRIPTION
The Java API to the Tcl interpreter is object-based -- in most cases,
the values passed to and from the Tcl interpreter are instances of
TclObject. This includes variable values and command arguments.
.PP
A TclObject is dual-ported: it behaves like a String but also holds an
internal representation that can be manipulated more efficiently.  For
example, a TclList is represented as a TclObject that holds the
list's string representation as well as a Vector to hold the
objects for each list element. Dual-ported objects avoid most runtime
type conversions.  This improves the speed of many operations
since an appropriate representation is immediately available.
.PP
Currently, the following internal representations are supported:
TclBoolean, TclDouble, TclList, TclIndex, TclInteger, TclString and
ReflectObject. Most of these internal representations have a
newInstance() method, which can be used to create a new TclObject
instance that contains the specific internal representation.  You
should always create TclObject instances with the newInstance() 
methods; use the "new" operator to create TclObject instances only
when you are writing new internal representations.
.PP
The type of the internal representation of Tcl objects can mutate.
Methods such as \fBsetInternalRep\fR and \fBinvalidateStringlRep\fR
are facilities for mutating the internal rep.
.PP
To improve memory efficiency, TclObject supports copy-on-write
operations.  When you need to save the value of a TclObject for later
use, call the \fBpreserve\fR method; when you no longer need its
value, call the \fBrelease\fR method. Internally, each call to
\fBpreserve\fR will internally increment the "reference count" of the
TclObject by one; conversely, each call to \fBrelease\fR decrements
the reference count by one.
.PP
Some methods of classes derrived from the \fBInternalRep\fR class,
such as \fBTclList\fR.\fBappend()\fR and \fBTclInteger\fR.\fBset()\fR,
modify the contents of a TclObject.  When you are about to call these
methods to modify the value of a TclObject, you must call \fBpreserve\fR (if
you haven't already done so) and then call \fBtakeExclusive\fR.
\fBtakeExclusive\fR will make a copy of the TclObject if it is shared.
The TclObject returned by the \fBtakeExclusive\fR will always have a
reference count of 1.
.TP
\fBTclObject\fR
The \fBTclObject\fR constructor creates a new TclObject with the
internal representation of \fIrep\fR.
.TP
\fBsetInternalRep\fR
The \fBsetInternalRep\fR method changes the internal representation
of the TclObject to the value \fIrep\fR.
.TP
\fBgetInternalRep\fR
The \fBgetInternalRep\fR method returns the internal representation
of the TclObject.  This methods allows you to query the class of a
returned object to determine what type of TclObject it is.
.TP
\fBtoString\fR
The \fBtoString\fR method returns the string representation of the
TclObject.
.TP
\fBinvalidateStringRep\fR
The \fBinvalidateStringRep\fR method marks the String representation
of the TclObject as invalid.  This method should be called only by
subclasses of the InternalRep prior to a call the
\fBsetInternalRep\fR.
.TP
\fBpreserve\fR
The \fBpreserve\fR method saves the value of a TclObject for
later use.  Each call to \fBpreserve\fR will internally increment the
"reference count" of the TclObject by one.
.TP
\fBrelease\fR
After saving the value of a TclObject for later use (via the
\fBpreserve\fR method), call the \fBrelease\fR method when you no
longer need the TclObject's value.  Each call to \fBrelease\fR will
internally decrement the "reference count" of the TclObject by one.
.TP
\fBisShared\fR
The \fBisShared\fR method returns true if the TclObject is shared (its
reference count is greater than one.)
.TP
\fBtakeExclusive\fR
The \fBtakeExclusive\fR method makes a copy of the TclObject if it is
shared.  The TclObject returned by the \fBtakeExclusive\fR will always
have a reference count of 1.

.SH "EQUIVALENT C FUNCTIONS"
Tcl_NewObj, Tcl_ConvertToType, TclObj.typePtr, Tcl_GetStringFromObj,
Tcl_InvalidateStringRep, Tcl_IncrRefCount,
Tcl_DecrRefCount, Tcl_IsShared

.SH "SEE ALSO"
InternalRep, TclBoolean, TclDouble, TclList, TclIndex, TclInteger,
TclString, ReflectObject, Interp

.SH KEYWORDS
internal representation, object, object creation, object type,
reference counting, string representation, type conversion
