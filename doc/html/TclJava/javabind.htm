<HTML><HEAD><TITLE>Java Package Commands - java manual page</TITLE></HEAD><BODY>
<DL>
<DD><A HREF="javabind.htm#M2" NAME="L40">NAME</A>
<DL><DD>java::bind - Handling JavaBean events.</DL>
<DD><A HREF="javabind.htm#M3" NAME="L41">SYNOPSIS</A>
<DL>
<DD><B>package require java ?1.1?</B>
<DD><B>java::bind </B><I>javaObj</I>
<DD><B>java::bind </B><I>javaObj eventName</I>
<DD><B>java::bind </B><I>javaObj eventName script</I>
<DD><B>java::event </B>?<B>-index </B><I>num</I>? ?<I>propertyName</I>?
</DL>
<DD><A HREF="javabind.htm#M4" NAME="L42">DESCRIPTION</A>
<DD><A HREF="javabind.htm#M5" NAME="L43">java::bind</A>
<DD><A HREF="javabind.htm#M6" NAME="L44">java::event</A>
<DD><A HREF="javabind.htm#M8" NAME="L46">DETERMINING THE EVENT PARAMETERS</A>
<DD><A HREF="javabind.htm#M9" NAME="L47">RETURNING VALUES FROM CALLBACK SCRIPTS</A>
<DD><A HREF="javabind.htm#M10" NAME="L48">EXCEPTIONS</A>
<DD><A HREF="javabind.htm#M11" NAME="L49">ERRORS IN CALLBACK SCRIPTS</A>
<DD><A HREF="javabind.htm#M12" NAME="L50">SEE ALSO</A>
<DD><A HREF="javabind.htm#M13" NAME="L51">KEYWORDS</A>
</DL><HR>
<H3><A NAME="M2">NAME</A></H3>
java::bind - Handling JavaBean events.
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>package require java ?1.1?</B><BR>
<B>java::bind </B><I>javaObj</I><BR>
<B>java::bind </B><I>javaObj eventName</I><BR>
<B>java::bind </B><I>javaObj eventName script</I><BR>
<B>java::event </B>?<B>-index </B><I>num</I>? ?<I>propertyName</I>?<BR>
<H3><A NAME="M4">DESCRIPTION</A></H3>
This group of commands are used to handle events fired by Java
objects.
<H3><A NAME="M5">java::bind</A></H3>
The <B>java::bind</B> command is used to associate scripts with events
fired by Java objects. The <I>javaObj</I> argument specifies a Java
object. The <I>eventName</I> argument identifies an event fired by the
object.
<P>
The events fired by Java objects are divided into <I>event
interfaces</I>. Each event is represented by an <I>event method</I> in
an event interface. For example, objects of the <B>java.awt.Button</B>
class can fire events in the <B>ActionListener</B>,
<B>ComponentListener</B>, <B>FocusListener</B>, <B>KeyListener</B>,
<B>MouseListener</B> and <B>MouseMotionListener</B> interfaces (all
these interfaces are defined in the JDK package <B>java.awt.event</B>.)
The <B>KeyListener</B> interface in turn contains the event methods
<B>keyPressed</B>, <B>keyReleased</B> and <B>keyTyped</B>. To find out
what events are fired by different Java classes, please consult their
API documentation.
<P>
The <I>eventName</I> argument for the <B>java::bind</B> command is the
full or abbreviated name of the event. The full event name is the name
of an event interface, followed by the character &quot;<B>.</B>&quot;, followed
by the name of the event method. For example,
<B>java.awt.event.KeyListener.keyTyped</B>.  The abbreviated event name
is just the name of the event method. For example, <B>keyTyped</B>.
Abbreviated event names may be used only if the event method name
appears in exactly one of the event interfaces of the object.
<P>
If the <I>script</I> argument is given, it specifies a <I>callback
script</I> to to be executed when the given event is fired in the
<I>javaObj</I>. If a callback script already exists for the given event
in <I>javaObj</I>, it will be replaced by <I>script</I>. If <I>script</I>
is the empty string, any previously installed callback
scripts for the given event in <I>javaObj</I> will be removed.
<P>
If the <I>script</I> argument is not given, the <B>java::bind</B>
command returns the current callback script, if any, for the given
event in <I>javaObj</I>.
<P>
If the <I>eventName</I> and <I>script</I> arguments are both omitted,
the <B>java::bind</B> command returns a Tcl list of the the full names
of all the events of <I>javaObj</I> that are currently associated with
callback scripts.
<P>
<H3><A NAME="M6">java::event</A></H3>
When a callback script is invoked due to the firing of a Java event,
some <I>event parameters</I> may be passed to the script to give
detailed description of the event. The <B>java::event</B> command is
used to query the values of these parameters. The <B>-index</B> option
specifies which event parameter to quety: <I>num</I> is equal to
<B>0</B> for the first parameter, <B>1</B> for the second parameter, and
so on. If the <B>-index</B> option is omitted, the first event
paramater is queried by default. In most cases, there is exactly one
event parameter passed to the callback script and the <B>-index</B>
may thus be safely omitted.
<P>
If <I>propertyName</I> is not given, <B>java::event</B> returns the
value of the specified event paramater. If the specified event
parameter is a Java object, then its object handle is returned. If
<I>propertyName</I> is given, and the specified event parameter is a
Java object, <B>java::event</B> returns the value of the given property
of the event parameter. The second form is used mainly for
convenience. For example, the following two statements are equivalent:
<P>
<PRE>java::bind $b keyTyped {
    puts [java::prop [java::event] keyCode]
}

java::bind $b keyTyped {
    puts [java::event keyCode]
}</PRE>
<P>
Event handling may be nested if the Tcl event loop is re-entered
during the execution of a callback script (e.g, when a callback script
executes the <B>update</B> command.) In that case, <B>java::event</B>
always returns the paramaters of the inner-most event whose callback
script is currently being executed.
<P>
<H3><A NAME="M8">DETERMINING THE EVENT PARAMETERS</A></H3>
An event callback script can query the event parameters using the
<B>java::event</B> command. Usually, there is only one event parameter
-- the <I>event object</I>, which stores various information about the
event as its properties. For example, when the <B>mouseClicked</B>
event occurs inside an AWT Button, the <B>x</B> and <B>y</B> properties
of the event object contains the location of the mouse cursor. The
following script prints out the location of the mouse cursor:
<P>
<PRE>set button [java::new jawa.awt.Button]
java::bind $button mouseClicked {
    puts &quot;mouse is at ([java::event x],[java::event y])&quot;
}</PRE>
<P>
<H3><A NAME="M9">RETURNING VALUES FROM CALLBACK SCRIPTS</A></H3>
When a Java object fires an event, it may expect the callback script
to return a value. In this case, the event method corresponding to the
event has a non-<B>void</B> return type. The callback script should
use the <B>return</B> command to return the desired value.
<P>
The return value must be convertible to the declared return type of
the event method. Otherwise, a Tcl background error is generated and
an undefined value (usually 0, false or null) is returned to the Java
object.
<P>
<H3><A NAME="M10">EXCEPTIONS</A></H3>
When a Java object fires an event, it may expect the callback script
to throw an exception to indicate certain conditions. This can be done
using the <B>java::throw</B> command. For example: the
<B>vetoableChange</B> event requires the callback script to throw a
<B>java.beans.PropertyVetoException</B> if the script deems the new value of a
property unaccecptable, as in the following code fragment:
<P>
<PRE>java::bind $b vetoableChange {
    if {[java::event propertyName] == &quot;size&quot;} {
        if {[java::event newValue] &gt; 10} {
            java::throw [java::new java.beans.PropertyVetoException \
                &quot;value too large&quot; [java::event]]
        }
    }
}</PRE>
<P>
The callback script can throw any unchecked exception object (e.g.,
instances of <B>java.lang.Error</B> or
<B>java.lang.RuntimeException</B>.) The callback script can also throw
any checked exception allowed by the signature of the event method.
<P>
If the callback script throws a checked exception which is not allowed
for the event, a Tcl background error is generated. If the callback
script is expected to return a value, an undefined value is returned
to the Java object.
<P>
<H3><A NAME="M11">ERRORS IN CALLBACK SCRIPTS</A></H3>
If the callback script causes a Tcl error, a Tcl background error is
generated. If the callback script is expected to return a value, an
undefined value is returned to the Java object.
<P>
<H3><A NAME="M12">SEE ALSO</A></H3>
<B><A HREF="java.htm">java</A></B>, <B><A HREF="javaload.htm">java::load</A></B>
<H3><A NAME="M13">KEYWORDS</A></H3>
<A href="../Keywords/J.htm#java">java</A>, <A href="../Keywords/T.htm#tcl">tcl</A>, <A href="../Keywords/B.htm#beans">beans</A>
<HR><PRE>
<A HREF="../copyright.htm">Copyright</A> &#169; 1998 by Sun Microsystems, Inc.
<A HREF="../copyright.htm">Copyright</A> &#169; 1995-1997 Roger E. Critchlow Jr.</PRE>
</BODY></HTML>
