<HTML><HEAD><TITLE>Tcl Bean Commands - studio::custom manual page</TITLE></HEAD><BODY>
<DL>
<DD><A HREF="studiocustom.htm#M2" NAME="L90">NAME</A>
<DL><DD>studio::custom - Scripting a Java Studio Customizer with the Tcl Bean.</DL>
<DD><A HREF="studiocustom.htm#M3" NAME="L91">SYNOPSIS</A>
<DL>
<DD><B>studio::custom getPanel</B> 
<DD><B>studio::custom commitScript</B> <I>callbackScript</I>
<DD><B>studio::custom getBeanData</B>
</DL>
<DD><A HREF="studiocustom.htm#M4" NAME="L92">DESCRIPTION</A>
<DL>
</DL>
<DL>
</DL>
<DD><A HREF="studiocustom.htm#M5" NAME="L93">COMMANDS</A>
<DL>
<DD><A HREF="studiocustom.htm#M6" NAME="L94"><B>studio::custom getPanel</B></A>
<DD><A HREF="studiocustom.htm#M7" NAME="L95"><B>studio::custom commitScript </B><I>callbackScript</I></A>
<DL>
</DL>
<DD><A HREF="studiocustom.htm#M8" NAME="L96"><B>studio::custom getBeanData</B></A>
</DL>
<DD><A HREF="studiocustom.htm#M9" NAME="L97">EXAMPLE</A>
<DD><A HREF="studiocustom.htm#M10" NAME="L98">SEE ALSO</A>
<DD><A HREF="studiocustom.htm#M11" NAME="L99">KEYWORDS</A>
</DL><HR>
<H3><A NAME="M2">NAME</A></H3>
studio::custom - Scripting a Java Studio Customizer with the Tcl Bean.
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>studio::custom getPanel</B> <BR>
<B>studio::custom commitScript</B> <I>callbackScript</I><BR>
<B>studio::custom getBeanData</B><BR>
<H3><A NAME="M4">DESCRIPTION</A></H3>
The <B>studio::custom</B> command provides the interface to create a
Java Studio Customizer from the Tcl Bean.  Java Studio is a graphical
development environment for gluing together Java Beans in order to
create applets, applications or other compound Java Beans.  Java
Studio creates a graphical interface, called a Customizer, to
manipulate Java Bean properties.  Every Tcl Bean contains a default
Customizer that displays the contents of the Tcl script.  However, the
<B>studio::custom</B> command and the <B><A HREF="../TclJava/java.htm">java</A></B> package provide the
interface to override the default Customizer and define a Customizer from Tcl.
<P>
The Customizer for all Tcl Beans, default or user defined, consists of
two components.  The first component in every Tcl Bean Customizer is
an interface for loading Tcl scripts from the local file system.  The
second component in every Tcl Bean Customizer is a Choice Box for 
selecting from a list of scripts contained in the Tcl Bean jar file.
The default Customizer displays the contents of the Tcl script for the
Tcl Bean.  If the Customizer is defined by the Tcl script, the
component that displays the contents of the Tcl script is replaced
with the user defined Customizer.
<P>
Every time a script is loaded into the Tcl Bean (from the local file
system or selecting a built-in script), the Tcl Bean examines the
contents of the script.  If the script does <B>not</B> begin with
#CUSTOM_BEGIN, a default Customizer is constructed and the contents of
the file are displayed.  Otherwise, the file is considered to contain
a user-defined Customizer, and the Tcl Bean parses the file
into two separate scripts based on the following file format:
<PRE>#CUSTOM_BEGIN
&lt;<I>customizerScript</I>&gt;
#CUSTOM_END
&lt;<I>beanScript</I>&gt;</PRE>
The <I>customizerScript</I> and <I>beanScript</I> are distinct scripts
evaluated in separate interpreters and share no common data.  The Tcl
Bean stores a copy of both scripts, and evaluates them when needed.
The <I>customizerScript</I>'s primary function is to the define the
Customizer.  Every time Java Studio requests that the Tcl Bean Customizer be
displayed, a new interpreter is created and the <I>customizerScript</I> is
evaluated.  The <I>beanScript</I>'s primary function is to initialize
the Tcl Bean by creating Java Studio ports and defining the bindings
on the ports.  Every time the Customizer commit phase begins (described
below),the <I>beanScript</I> is evaluated in a new interp.  See the
<B><A HREF="studio.htm">studio</A></B> man page for more information on writing the <I>beanScript</I>.
<P>
The Customizer is re-initialized by a new interp each time it is
displayed.  The runtime state of the widget (e.g. text entered into an
Entry component) must be preserved so it is not lost when the
Customizer is destroyed.  All of the Customizer's state, referred to as
<I>beanData</I>, is stored in the Tcl Bean.  The <I>beanData</I> is also
used to define Tcl Bean properties and must be
passed from the <I>customizerScript</I>'s interp to the <I>beanScript</I>'s
interp.  The <B>commitScript</B> and <B>getBeanData</B> sub commands
store, retrieve and pass <I>beanData</I> between interps and the Tcl
Bean.
<P>
The Customizer initialization phase begins whenever Java Studio
requests a new Customizer be displayed.  The phase starts by creating
a new interp and evaluating the <I>customizerScript</I>.  Every
<I>customizerScript</I> must perform the following steps to properly
initialize the Customizer:
<P>
<DL>
<P><DT>[1]<DD>
The Customizer's graphical interface must be defined.  Use the
<B>studio::custom getPanel</B> command and the <B><A HREF="../TclJava/java.htm">java</A></B> package, to
create the interface.
<P><DT>[2]<DD>
The <I>customizerScript</I> must register a <I>callbackScript</I>.  The
<I>callbackScript</I> defines how to preserve the Customizer state and
store data needed by the <I>beanScript</I>.  The result of
evaluating <I>callbackScript</I> is stored in <I>beanData</I>.  Use
the <B>studio::custom commitScript</B> command to register the
<I>callbackScript</I>.
<P><DT>[3]<DD>
Retrieve the <I>beanData</I> and restore the state of the
Customizer.  If the Customizer was previously displayed, then
<I>beanData</I> may contain information on the state of the Customizer
before it was destroyed.  The content of <I>beanData</I> will be
reflected in the Customizer.  Use the <B>studio::custom getBeanData</B>
to retrieve <I>beanData</I>. 
<P></DL>
<P>
The Customizer commit phase starts whenever the Customizer's 'OK' or 'Apply'
buttons are pressed.  The Customizer commit phase performs the
following tasks:
<P>
<DL>
<P><DT>[1]<DD>
Evaluate the <I>callbackScript</I>, defined by the command 
<B>studio::custom commitScript</B>, in the <I>customizerScript</I>'s interp.
The <I>callbackScript</I> is evaluated at the global scope, and has
access to all of the state defined when the <I>customizerScript</I> was
evaluated.
<P><DT>[2]<DD>
Store the result of evaluating the <I>callbackScript</I> in the Tcl
Bean's <I>beanData</I>.  At this point, the <I>customizerScript</I>'s
interp stops running, and the Customizer disappears.
<P><DT>[3]<DD>
Create a new interp, and evaluate the <I>beanScript</I>.  The
<I>beanScript</I> should call the <B>studio::custom getBeanData</B> command
to retrieve the data from the Tcl Bean.  After this step, the Tcl Bean
is initialized according to the <I>beanScript</I> and the <I>beanData</I>.
<P></DL>
<H3><A NAME="M5">COMMANDS</A></H3>
<P>
<DL>
<P><DT><A NAME="M6"><B>studio::custom getPanel</B></A><DD>
Return the Java object handle for the AWT Panel component contained in
the Customizer window.  Components packed into this Panel create
the Customizer's graphical interface.  When the Customizer window is
removed, the Panel and all of its sub-components are destroyed.  The
persistent state of each component must be preserved, to restore
the interface the next time the Customizer is displayed.  Use the
<B>studio::custom commitScript</B> command to preserve the state and the
<B>studio::custom getBeanData</B> command to retrieve the state.
<P><DT><A NAME="M7"><B>studio::custom commitScript </B><I>callbackScript</I></A><DD>
Specifies the <I>callbackScript</I> that should be invoked when the
Customizer commit phase begins.  The return value of
<I>callbackScript</I> is stored in the Tcl Bean, and can be retrieved
by using the <B>studio::custom getBeanData</B> command.  The
<I>callbackScript</I> is evaluated in the <I>customScript</I>'s
interpreter, and is evaluated at the global scope.  In general the
<I>callbackScript</I> should perform the following steps:
<P>
<DL>
<P><DT>[1]<DD>
Extract persistent data from the Customizer's Panel in order to restore
the interface to its identical state (e.g. The Text of an Entry component.)
<P><DT>[2]<DD>
Gather information needed by the bean script.
<P><DT>[3]<DD>
Marshall all of the above data into an ordered Tcl list so the data
can be used to re-initialize the Customizer, or be used to set Tcl
Bean properties.
<P><DT>[4]<DD>
Return the ordered list from step 3.
<P></DL>
<P><DT><A NAME="M8"><B>studio::custom getBeanData</B></A><DD>
This option returns Customizer data contained in the Tcl Bean.  The
data consists of the return value of the <I>script</I> that
was defined by the <B>callbackScript</B> option.  If the Tcl Bean does
not have any data stored when this command is called, an empty string
is returned.  This command should be used in the custom script to
retrieve data needed to restore the Customizer to its previous state.  The
bean script should call this command to retrieve the information from
the Customizer.
<P></DL>
<H3><A NAME="M9">EXAMPLE</A></H3>
<PRE>#CUSTOM_BEGIN

# Get the panel to pack the components into.

set customPanel [studio::custom getPanel]

# Get any data that may have been previously set.
# If there is no data, customData is &quot;&quot;

set customData  [studio::custom getBeanData]

# Create two Java AWT components that make the 
# custom interface.

set scriptLabel [java::new {java.awt.Label String} &quot;Script:&quot;]
set scriptArea  [java::new {java.awt.TextArea int int} 10 40]

# If customData is not an empty string, we 
# have defined it to contain a script.  Put
# the script back into the scriptArea.
 
if {$customData != &quot;&quot;} {
    $scriptArea setText $customData
}

# Add the components to the Customizer.

$customPanel {add java.awt.Component} $scriptLabel
$customPanel {add java.awt.Component} $scriptArea

# Define the callback that marshalls data into 
# the Tcl Bean.  The return value of the script
# becomes the return value of calls to 
# studio::custom getBeanData

studio::custom commitScript {
    set data [$scriptArea getText]
    return $data
}
#CUSTOM_END

# Get the data set by the studio::custom callbackScript 
# command.  For this example, the data is a script
# to be evaluated.

set beanData [studio::custom getBeanData]
eval $beanData</PRE>
<H3><A NAME="M10">SEE ALSO</A></H3>
<B><A HREF="studio.htm">studio</A></B>, <B><A HREF="../TclJava/java.htm">java</A></B>
<H3><A NAME="M11">KEYWORDS</A></H3>
<A href="../Keywords/S.htm#studio">studio</A>, <A href="../Keywords/C.htm#Customizer">Customizer</A>, <A href="../Keywords/J.htm#Java Beans">Java Beans</A>, <A href="../Keywords/J.htm#Java Studio">Java Studio</A>
<HR><PRE>
<A HREF="../copyright.htm">Copyright</A> &#169; 1997-1998 by Sun Microsystems, Inc.
<A HREF="../copyright.htm">Copyright</A> &#169; 1995-1997 Roger E. Critchlow Jr.</PRE>
</BODY></HTML>
