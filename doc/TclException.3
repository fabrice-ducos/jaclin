'\"
'\" Copyright (c) 1996-1998 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\" 
.so man.macros
.TH TclException 3 1.0 Tcl "Jacl Library Procedures"
.BS
.SH EXCEPTION
tcl.lang.TclException -- This class is used to signal exception
conditions in the execution of Tcl scripts.

.SH CONSTRUCTORS
.sp
\fBTclException\fR(int \fIccode\fR)
.sp
\fBTclException\fR(Interp \fIinterp\fR, String \fImsg\fR, int \fIccode\fR)
.sp
\fBTclException\fR(Interp \fIinterp\fR, String \fImsg\fR)

.SH METHODS
.sp
int \fBgetCompletionCode\fR()

.SH ARGUMENTS
.AS Interp interp .
.AP Interp interp
Internal representation to be stored in newly created TclObject.
.AP String msg
Error message to store in the \fIinterp\fR's result object.
.AP int ccode
Completion code to store inside the TclException.
.BE

.SH DESCRIPTION
.TP
\fBgetCompletionCode\fR
The \fBgetCompletionCode\fR method is used to retrieve the completion
code of the command that threw the exception.  The following
are the four possible integer values for the completion code:
.RS
.TP
TCL.ERROR
The command couldn't be completed successfully;
the interpreter's result describes what went wrong.
.TP
TCL.RETURN
The command requests that the current procedure
return; the interpreter's result contains the
procedure's return value.
.TP
TCL.BREAK
The command requests that the innermost loop
be exited; the interpreter's result is meaningless.
.TP
TCL.CONTINUE
Go on to the next iteration of the current loop;
the interpreter's result is meaningless.
.RE
.TP
\fBTclException\fR(int \fIccode\fR)
This constructor creates a TclException with the completion code \fIccode\fR.
.TP
\fBTclException\fR(Interp \fIinterp\fR, String \fImsg\fR, int \fIccode\fR)
This constructor extends the above constructor.  If \fIinterp\fR is
non-null, its result object will be set to contain \fImsg\fR.
.TP
\fBTclException\fR(Interp \fIinterp\fR, String \fImsg\fR)
This constructor is the same as the above constructor, except that the
completion code is set to TCL.ERROR.

.SH "EQUIVALENT C FUNCTIONALITY"
The Exception handling syntax in the C API can be
represented by the following canonical C code:
.CS
	int foo(Tcl_Interp interp, ...)
	{
	    if (ok) {
		Tcl_SetResult(interp, result);
		return TCL_OK;
	    } else {
		Tcl_SetResult(interp, "err message ...");
		return TCL_ERROR;
	    }
	}
.CE
The return value of the foo() procedure is the completion code. TCL_OK
indicates a normal completion status, and all other values indicate an
exception. The above code can be written in Java as:
.CS
	void foo(Interp interp, ...)
	{
	    if (ok) {
		interp.setResult(result);
	    } else {
		interp.setResult("err message ...");
		throw new TclException(TCL.ERROR);
	    }
	}
.CE
In the Java API, foo()'s return type is void.  Rather than returning
the completion code, the completion code is either stored in a
TclException or implied to be OK.  If the foo() method completes
normally, no TclException is thrown, and the completion code is
implied to be OK.  Otherwise, an exception is thrown with the desired
completion code (TCL.ERROR in the example above).

.SH "SEE ALSO"
TclNumArgsException, TclRuntimeError, Interp

.SH KEYWORDS
error, exception, return, result
